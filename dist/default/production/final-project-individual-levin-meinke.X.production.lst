

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Mar 13 15:47:08 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    43                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    44  0000                     
    45                           ; Generated 21/07/2023 GMT
    46                           ; 
    47                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution. Publication is not required when
    61                           ;        this file is used in an embedded application.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC18F67K40 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     _TX4REG	set	3812
    80  0000                     _RC4STAbits	set	3815
    81  0000                     _SP4BRGH	set	3814
    82  0000                     _TRISFbits	set	3974
    83  0000                     _LATHbits	set	3968
    84  0000                     _TRISAbits	set	3969
    85  0000                     _TRISGbits	set	3975
    86  0000                     _SSP2CON2bits	set	3802
    87  0000                     _RX4PPS	set	3605
    88  0000                     _SSP2CLKPPS	set	3612
    89  0000                     _SSP2DATPPS	set	3613
    90  0000                     _ANSELDbits	set	3751
    91  0000                     _SSP2ADD	set	3798
    92  0000                     _SSP2CON1bits	set	3801
    93  0000                     _LATAbits	set	3961
    94  0000                     _LATGbits	set	3967
    95  0000                     _LATCbits	set	3963
    96  0000                     _LATEbits	set	3965
    97  0000                     _PORTBbits	set	3978
    98  0000                     _PORTFbits	set	3982
    99  0000                     _TRISHbits	set	3976
   100  0000                     _T2PR	set	4028
   101  0000                     _T2CONbits	set	4029
   102  0000                     _CCPR2H	set	4006
   103  0000                     _CCPR1H	set	4010
   104  0000                     _TRISCbits	set	3971
   105  0000                     _TRISDbits	set	3972
   106  0000                     _TRISEbits	set	3973
   107  0000                     _RC4REG	set	3811
   108  0000                     _SP4BRGL	set	3813
   109  0000                     _TX4STAbits	set	3816
   110  0000                     _BAUD4CONbits	set	3817
   111  0000                     _SSP2CON2	set	3802
   112  0000                     _CCPR4H	set	3873
   113  0000                     _CCPR3H	set	3877
   114  0000                     _SSP2STAT	set	3800
   115  0000                     _ANSELFbits	set	3764
   116  0000                     _SSP2BUF	set	3797
   117  0000                     _PIE0bits	set	3625
   118  0000                     _PIE2bits	set	3627
   119  0000                     _RC7PPS	set	3689
   120  0000                     _RD5PPS	set	3695
   121  0000                     _RE2PPS	set	3700
   122  0000                     _RD6PPS	set	3696
   123  0000                     _RE4PPS	set	3702
   124  0000                     _RG6PPS	set	3720
   125  0000                     _ANSELAbits	set	3730
   126  0000                     _TMR0L	set	4051
   127  0000                     _TMR0H	set	4052
   128  0000                     _T0CON0bits	set	4053
   129  0000                     _T0CON1bits	set	4054
   130  0000                     _T2CLKCONbits	set	4031
   131  0000                     _T2HLTbits	set	4030
   132  0000                     _CCP1CONbits	set	4011
   133  0000                     _CCPTMRS0bits	set	4013
   134  0000                     _CCP2CONbits	set	4007
   135  0000                     _ADREFbits	set	3928
   136  0000                     _CCP3CONbits	set	3878
   137  0000                     _CCP4CONbits	set	3874
   138  0000                     _INTCONbits	set	4082
   139  0000                     _PIE4bits	set	3629
   140  0000                     _PIR4bits	set	3639
   141  0000                     _RC0PPS	set	3682
   142  0000                     _ADPCH	set	3935
   143  0000                     _ADRESH	set	3940
   144  0000                     _ADCON0bits	set	3936
   145                           
   146                           ; #config settings
   147                           
   148                           	psect	cinit
   149  0000'                    __pcinit:
   150                           	callstack 0
   151  0000'                    start_initialization:
   152                           	callstack 0
   153  0000'                    __initialization:
   154                           	callstack 0
   155                           
   156                           ; Clear objects allocated to BANK0 (60 bytes)
   157  0000' EE00' F000'        	lfsr	0,__pbssBANK0
   158  0004' 0E3C               	movlw	60
   159  0006'                    clear_0:
   160  0006' 6AEE               	clrf	postinc0,c
   161  0008' 06E8               	decf	wreg,f,c
   162  000A' E1FD               	bnz	clear_0
   163                           
   164                           ; Clear objects allocated to COMRAM (24 bytes)
   165  000C' EE00' F000'        	lfsr	0,__pbssCOMRAM
   166  0010' 0E18               	movlw	24
   167  0012'                    clear_1:
   168  0012' 6AEE               	clrf	postinc0,c
   169  0014' 06E8               	decf	wreg,f,c
   170  0016' E1FD               	bnz	clear_1
   171  0018'                    end_of_initialization:
   172                           	callstack 0
   173  0018'                    __end_of__initialization:
   174                           	callstack 0
   175  0018' 9000'              	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   176  001A' 9200'              	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   177  001C' 0100               	movlb	0
   178  001E' EF00' F000'        	goto	_main	;jump to C main() function
   179                           
   180                           	psect	bssCOMRAM
   181  0000'                    __pbssCOMRAM:
   182                           	callstack 0
   183  0000'                    _EUSART4RXbuf:
   184                           	callstack 0
   185  0000'                    	ds	20
   186  0014'                    _TxBufReadCnt:
   187                           	callstack 0
   188  0014'                    	ds	1
   189  0015'                    _TxBufWriteCnt:
   190                           	callstack 0
   191  0015'                    	ds	1
   192  0016'                    _RxBufReadCnt:
   193                           	callstack 0
   194  0016'                    	ds	1
   195  0017'                    _RxBufWriteCnt:
   196                           	callstack 0
   197  0017'                    	ds	1
   198                           
   199                           	psect	bssBANK0
   200  0000'                    __pbssBANK0:
   201                           	callstack 0
   202  0000'                    _EUSART4TXbuf:
   203                           	callstack 0
   204  0000'                    	ds	60
   205                           
   206                           	psect	cstackBANK1
   207  0000'                    __pcstackBANK1:
   208                           	callstack 0
   209  0000'                    main@clear_val:
   210                           	callstack 0
   211                           
   212                           ; 20 bytes @ 0x0
   213  0000'                    	ds	20
   214  0014'                    main@red_val:
   215                           	callstack 0
   216                           
   217                           ; 20 bytes @ 0x14
   218  0014'                    	ds	20
   219  0028'                    main@green_val:
   220                           	callstack 0
   221                           
   222                           ; 20 bytes @ 0x28
   223  0028'                    	ds	20
   224  003C'                    main@blue_val:
   225                           	callstack 0
   226                           
   227                           ; 20 bytes @ 0x3C
   228  003C'                    	ds	20
   229  0050'                    main@timings:
   230                           	callstack 0
   231                           
   232                           ; 40 bytes @ 0x50
   233  0050'                    	ds	40
   234  0078'                    main@actions:
   235                           	callstack 0
   236                           
   237                           ; 40 bytes @ 0x78
   238  0078'                    	ds	40
   239  00A0'                    main@lum:
   240                           	callstack 0
   241                           
   242                           ; 2 bytes @ 0xA0
   243  00A0'                    	ds	2
   244  00A2'                    main@pRGBC:
   245                           	callstack 0
   246                           
   247                           ; 2 bytes @ 0xA2
   248  00A2'                    	ds	2
   249  00A4'                    main@measured_time:
   250                           	callstack 0
   251                           
   252                           ; 2 bytes @ 0xA4
   253  00A4'                    	ds	2
   254  00A6'                    main@RGBC:
   255                           	callstack 0
   256                           
   257                           ; 8 bytes @ 0xA6
   258  00A6'                    	ds	8
   259  00AE'                    main@actions_completed:
   260                           	callstack 0
   261                           
   262                           ; 2 bytes @ 0xAE
   263  00AE'                    	ds	2
   264  00B0'                    main@upcoming_action:
   265                           	callstack 0
   266                           
   267                           ; 2 bytes @ 0xB0
   268  00B0'                    	ds	2
   269  00B2'                    main@going_forward:
   270                           	callstack 0
   271                           
   272                           ; 1 bytes @ 0xB2
   273  00B2'                    	ds	1
   274  00B3'                    main@pmL:
   275                           	callstack 0
   276                           
   277                           ; 2 bytes @ 0xB3
   278  00B3'                    	ds	2
   279  00B5'                    main@pmR:
   280                           	callstack 0
   281                           
   282                           ; 2 bytes @ 0xB5
   283  00B5'                    	ds	2
   284  00B7'                    main@motorL:
   285                           	callstack 0
   286                           
   287                           ; 9 bytes @ 0xB7
   288  00B7'                    	ds	9
   289  00C0'                    main@motorR:
   290                           	callstack 0
   291                           
   292                           ; 9 bytes @ 0xC0
   293  00C0'                    	ds	9
   294  00C9'                    main@action_to_do:
   295                           	callstack 0
   296                           
   297                           ; 2 bytes @ 0xC9
   298  00C9'                    	ds	2
   299                           
   300                           	psect	cstackCOMRAM
   301  0000'                    __pcstackCOMRAM:
   302                           	callstack 0
   303  0000'                    ?_decide_action:
   304                           	callstack 0
   305  0000'                    ?_invert_instruction:
   306                           	callstack 0
   307  0000'                    sendCharSerial4@charToSend:
   308                           	callstack 0
   309                           
   310                           ; 1 bytes @ 0x0
   311  0000'                    	ds	1
   312  0001'                    ??_color_click_toggleLED:
   313  0001'                    ??_I2C_2_Master_Idle:
   314  0001'                    ?_get16bitTMR0val:
   315                           	callstack 0
   316  0001'                    ?___wmul:
   317                           	callstack 0
   318  0001'                    initDCmotorsPWM@PWMperiod:
   319                           	callstack 0
   320  0001'                    ___wmul@multiplier:
   321                           	callstack 0
   322                           
   323                           ; 2 bytes @ 0x1
   324  0001'                    	ds	1
   325  0002'                    ??_I2C_2_Master_Read:
   326  0002'                    I2C_2_Master_Write@data_byte:
   327                           	callstack 0
   328                           
   329                           ; 1 bytes @ 0x2
   330  0002'                    	ds	1
   331  0003'                    ??_get16bitTMR0val:
   332  0003'                    color_writetoaddr@value:
   333                           	callstack 0
   334  0003'                    I2C_2_Master_Read@ack:
   335                           	callstack 0
   336  0003'                    ___wmul@multiplicand:
   337                           	callstack 0
   338                           
   339                           ; 2 bytes @ 0x3
   340  0003'                    	ds	1
   341  0004'                    color_writetoaddr@address:
   342                           	callstack 0
   343  0004'                    I2C_2_Master_Read@tmp:
   344                           	callstack 0
   345                           
   346                           ; 1 bytes @ 0x4
   347  0004'                    	ds	1
   348  0005'                    ??_color_click_init:
   349  0005'                    ?_color_read_Red:
   350                           	callstack 0
   351  0005'                    ?_color_read_Green:
   352                           	callstack 0
   353  0005'                    ?_color_read_Blue:
   354                           	callstack 0
   355  0005'                    ?_color_read_Clear:
   356                           	callstack 0
   357  0005'                    get16bitTMR0val@timer_val:
   358                           	callstack 0
   359  0005'                    ___wmul@product:
   360                           	callstack 0
   361                           
   362                           ; 2 bytes @ 0x5
   363  0005'                    	ds	2
   364  0007'                    ??_color_read_Red:
   365  0007'                    ??_color_read_Green:
   366  0007'                    ??_color_read_Blue:
   367  0007'                    ??_color_read_Clear:
   368  0007'                    ?___lwdiv:
   369                           	callstack 0
   370  0007'                    ___lwdiv@dividend:
   371                           	callstack 0
   372                           
   373                           ; 2 bytes @ 0x7
   374  0007'                    	ds	2
   375  0009'                    ___lwdiv@divisor:
   376                           	callstack 0
   377                           
   378                           ; 2 bytes @ 0x9
   379  0009'                    	ds	1
   380  000A'                    color_read_Clear@tmp:
   381                           	callstack 0
   382  000A'                    color_read_Red@tmp:
   383                           	callstack 0
   384  000A'                    color_read_Green@tmp:
   385                           	callstack 0
   386  000A'                    color_read_Blue@tmp:
   387                           	callstack 0
   388                           
   389                           ; 2 bytes @ 0xA
   390  000A'                    	ds	1
   391  000B'                    ___lwdiv@quotient:
   392                           	callstack 0
   393                           
   394                           ; 2 bytes @ 0xB
   395  000B'                    	ds	1
   396  000C'                    color_read@p:
   397                           	callstack 0
   398                           
   399                           ; 2 bytes @ 0xC
   400  000C'                    	ds	1
   401  000D'                    ___lwdiv@counter:
   402                           	callstack 0
   403                           
   404                           ; 1 bytes @ 0xD
   405  000D'                    	ds	1
   406  000E'                    setMotorPWM@m:
   407                           	callstack 0
   408                           
   409                           ; 2 bytes @ 0xE
   410  000E'                    	ds	2
   411  0010'                    ??_setMotorPWM:
   412                           
   413                           ; 1 bytes @ 0x10
   414  0010'                    	ds	2
   415  0012'                    setMotorPWM@posDuty:
   416                           	callstack 0
   417                           
   418                           ; 1 bytes @ 0x12
   419  0012'                    	ds	1
   420  0013'                    setMotorPWM@negDuty:
   421                           	callstack 0
   422                           
   423                           ; 1 bytes @ 0x13
   424  0013'                    	ds	1
   425  0014'                    stop@mL:
   426                           	callstack 0
   427  0014'                    fullSpeedAhead@mL:
   428                           	callstack 0
   429                           
   430                           ; 2 bytes @ 0x14
   431  0014'                    	ds	2
   432  0016'                    stop@mR:
   433                           	callstack 0
   434  0016'                    fullSpeedAhead@mR:
   435                           	callstack 0
   436                           
   437                           ; 2 bytes @ 0x16
   438  0016'                    	ds	2
   439  0018'                    ??_stop:
   440  0018'                    ??_fullSpeedAhead:
   441                           
   442                           ; 1 bytes @ 0x18
   443  0018'                    	ds	1
   444  0019'                    ??_main:
   445                           
   446                           ; 1 bytes @ 0x19
   447  0019'                    	ds	4
   448                           
   449 ;;
   450 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   451 ;;
   452 ;; *************** function _main *****************
   453 ;; Defined at:
   454 ;;		line 23 in file "main.c"
   455 ;; Parameters:    Size  Location     Type
   456 ;;		None
   457 ;; Auto vars:     Size  Location     Type
   458 ;;  actions        40  120[BANK1 ] int [20]
   459 ;;  timings        40   80[BANK1 ] unsigned int [20]
   460 ;;  blue_val       20   60[BANK1 ] unsigned char [20]
   461 ;;  green_val      20   40[BANK1 ] unsigned char [20]
   462 ;;  red_val        20   20[BANK1 ] unsigned char [20]
   463 ;;  clear_val      20    0[BANK1 ] unsigned char [20]
   464 ;;  motorR          9  192[BANK1 ] struct DC_motor
   465 ;;  motorL          9  183[BANK1 ] struct DC_motor
   466 ;;  RGBC            8  166[BANK1 ] struct RGBC_val
   467 ;;  action_to_do    2  201[BANK1 ] int 
   468 ;;  pmR             2  181[BANK1 ] PTR unsigned char 
   469 ;;		 -> main@motorR(9), 
   470 ;;  pmL             2  179[BANK1 ] PTR unsigned char 
   471 ;;		 -> main@motorL(9), 
   472 ;;  upcoming_act    2  176[BANK1 ] int 
   473 ;;  actions_comp    2  174[BANK1 ] int 
   474 ;;  measured_tim    2  164[BANK1 ] unsigned int 
   475 ;;  pRGBC           2  162[BANK1 ] PTR unsigned char 
   476 ;;		 -> main@RGBC(8), 
   477 ;;  PWMcycle        2    0        unsigned int 
   478 ;;  lum             2  160[BANK1 ] unsigned int 
   479 ;;  pgreen_val      2    0        PTR unsigned char 
   480 ;;		 -> main@green_val(20), 
   481 ;;  pblue_val       2    0        PTR unsigned char 
   482 ;;		 -> main@blue_val(20), 
   483 ;;  pred_val        2    0        PTR unsigned char 
   484 ;;		 -> main@red_val(20), 
   485 ;;  pclear_val      2    0        PTR unsigned char 
   486 ;;		 -> main@clear_val(20), 
   487 ;;  previously_m    2    0        unsigned int 
   488 ;;  going_forwar    1  178[BANK1 ] _Bool 
   489 ;; Return value:  Size  Location     Type
   490 ;;                  1    wreg      void 
   491 ;; Registers used:
   492 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, bsr, status,2, status,0, pcl, pclath, pclatu, btemp, b
      +temp+1, btemp+2, btemp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, btemp+12, btemp+13, 
      +btemp+14, btemp+15, btemp+16, btemp+17, btemp+18, btemp+19, btemp+20, btemp+21, btemp+22, btemp+23, btemp+24, btemp+25, 
      +btemp+26, btemp+27, btemp+28, btemp+29, btemp+30, btemp+31, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, cs
      +tack
   493 ;; Tracked objects:
   494 ;;		On entry : 0/0
   495 ;;		On exit  : 0/0
   496 ;;		Unchanged: 0/0
   497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   499 ;;      Locals:         0       0     203       0       0       0       0       0       0       0       0       0       
      +0       0       0
   500 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   501 ;;      Totals:         4       0     203       0       0       0       0       0       0       0       0       0       
      +0       0       0
   502 ;;Total ram usage:      207 bytes
   503 ;; Hardware stack levels required when called: 6
   504 ;; This function calls:
   505 ;;		_I2C_2_Master_Init
   506 ;;		_Interrupts_init
   507 ;;		_Timer0_init
   508 ;;		_color_click_init
   509 ;;		_color_click_toggleLED
   510 ;;		_color_read
   511 ;;		_color_read_Clear
   512 ;;		_decide_action
   513 ;;		_fullSpeedAhead
   514 ;;		_get16bitTMR0val
   515 ;;		_initDCmotorsPWM
   516 ;;		_initUSART4
   517 ;;		_invert_instruction
   518 ;;		_resetTimer0
   519 ;;		_stop
   520 ;;		_turn_180
   521 ;;		_turn_left_90
   522 ;;		_turn_r_90
   523 ;;		_turn_right_90
   524 ;; This function is called by:
   525 ;;		Startup code after reset
   526 ;; This function uses a non-reentrant model
   527 ;;
   528                           
   529                           	psect	text0
   530  0000'                    __ptext0:
   531                           	callstack 0
   532  0000'                    _main:
   533                           	callstack 25
   534  0000'                    
   535                           ;main.c: 25:     Timer0_init();
   536  0000' EC00' F000'        	call	_Timer0_init	;wreg free
   537  0004'                    
   538                           ;main.c: 26:     Interrupts_init();
   539  0004' EC00' F000'        	call	_Interrupts_init	;wreg free
   540  0008'                    
   541                           ;main.c: 27:     I2C_2_Master_Init();
   542  0008' EC00' F000'        	call	_I2C_2_Master_Init	;wreg free
   543  000C'                    
   544                           ;main.c: 28:     color_click_init();
   545  000C' EC00' F000'        	call	_color_click_init	;wreg free
   546  0010'                    
   547                           ;main.c: 29:     initDCmotorsPWM(99);
   548  0010' 0E00               	movlw	0
   549  0012' 6E00'              	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   550  0014' 0E63               	movlw	99
   551  0016' 6E00'              	movwf	initDCmotorsPWM@PWMperiod^0,c
   552  0018' EC00' F000'        	call	_initDCmotorsPWM	;wreg free
   553  001C'                    
   554                           ;main.c: 30:     initUSART4();
   555  001C' EC00' F000'        	call	_initUSART4	;wreg free
   556  0020'                    
   557                           ;main.c: 33:     color_click_toggleLED();
   558  0020' EC00' F000'        	call	_color_click_toggleLED	;wreg free
   559  0024'                    
   560                           ;main.c: 36:     LATHbits.LATH3=1;
   561  0024' 8680               	bsf	128,3,c	;volatile
   562  0026'                    
   563                           ;main.c: 37:     TRISHbits.TRISH3=0;
   564  0026' 9688               	bcf	136,3,c	;volatile
   565  0028'                    
   566                           ;main.c: 40:     TRISFbits.TRISF2=1;
   567  0028' 8486               	bsf	134,2,c	;volatile
   568  002A'                    
   569                           ;main.c: 41:     ANSELFbits.ANSELF2=0;
   570  002A' 010E               	movlb	14	; () banked
   571  002C' 95B4               	bcf	180,2,b	;volatile
   572  002E'                    
   573                           ; BSR set to: 14
   574                           ;main.c: 49:     motorL.power=0;
   575  002E' 0E00               	movlw	0
   576  0030' 0101               	movlb	1	; () banked
   577  0032' 6F00'              	movwf	main@motorL& (0+255),b
   578  0034'                    
   579                           ; BSR set to: 1
   580                           ;main.c: 50:     motorL.direction=1;
   581  0034' 0E01               	movlw	1
   582  0036' 6F00'              	movwf	(main@motorL+1)& (0+255),b
   583  0038'                    
   584                           ; BSR set to: 1
   585                           ;main.c: 51:     motorL.brakemode=1;
   586  0038' 0E01               	movlw	1
   587  003A' 6F00'              	movwf	(main@motorL+2)& (0+255),b
   588  003C'                    
   589                           ; BSR set to: 1
   590                           ;main.c: 52:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   591  003C' 0EAA               	movlw	170
   592  003E' 6F00'              	movwf	(main@motorL+5)& (0+255),b
   593  0040' 0E0F               	movlw	15
   594  0042' 6F00'              	movwf	(main@motorL+6)& (0+255),b
   595  0044'                    
   596                           ; BSR set to: 1
   597                           ;main.c: 53:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   598  0044' 0EA6               	movlw	166
   599  0046' 6F00'              	movwf	(main@motorL+7)& (0+255),b
   600  0048' 0E0F               	movlw	15
   601  004A' 6F00'              	movwf	(main@motorL+8)& (0+255),b
   602  004C'                    
   603                           ; BSR set to: 1
   604                           ;main.c: 54:     motorL.PWMperiod=PWMcycle;
   605  004C' 0E00               	movlw	0
   606  004E' 6F00'              	movwf	(main@motorL+4)& (0+255),b
   607  0050' 0E63               	movlw	99
   608  0052' 6F00'              	movwf	(main@motorL+3)& (0+255),b
   609  0054'                    
   610                           ; BSR set to: 1
   611                           ;main.c: 56:     motorR.power=0;
   612  0054' 0E00               	movlw	0
   613  0056' 6F00'              	movwf	main@motorR& (0+255),b
   614  0058'                    
   615                           ; BSR set to: 1
   616                           ;main.c: 57:     motorR.direction=1;
   617  0058' 0E01               	movlw	1
   618  005A' 6F00'              	movwf	(main@motorR+1)& (0+255),b
   619  005C'                    
   620                           ; BSR set to: 1
   621                           ;main.c: 58:     motorR.brakemode=1;
   622  005C' 0E01               	movlw	1
   623  005E' 6F00'              	movwf	(main@motorR+2)& (0+255),b
   624  0060'                    
   625                           ; BSR set to: 1
   626                           ;main.c: 59:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   627  0060' 0E25               	movlw	37
   628  0062' 6F00'              	movwf	(main@motorR+5)& (0+255),b
   629  0064' 0E0F               	movlw	15
   630  0066' 6F00'              	movwf	(main@motorR+6)& (0+255),b
   631  0068'                    
   632                           ; BSR set to: 1
   633                           ;main.c: 60:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   634  0068' 0E21               	movlw	33
   635  006A' 6F00'              	movwf	(main@motorR+7)& (0+255),b
   636  006C' 0E0F               	movlw	15
   637  006E' 6F00'              	movwf	(main@motorR+8)& (0+255),b
   638  0070'                    
   639                           ; BSR set to: 1
   640                           ;main.c: 61:     motorR.PWMperiod=PWMcycle;
   641  0070' 0E00               	movlw	0
   642  0072' 6F00'              	movwf	(main@motorR+4)& (0+255),b
   643  0074' 0E63               	movlw	99
   644  0076' 6F00'              	movwf	(main@motorR+3)& (0+255),b
   645  0078'                    
   646                           ; BSR set to: 1
   647                           ;main.c: 63:     char *pmL;;main.c: 64:     char *pmR;;main.c: 65:     pmL = &motorL;
   648  0078' 0E00'              	movlw	low main@motorL
   649  007A' 6F00'              	movwf	main@pmL& (0+255),b
   650  007C' 0E00'              	movlw	high main@motorL
   651  007E' 6F00'              	movwf	(main@pmL+1)& (0+255),b
   652  0080'                    
   653                           ; BSR set to: 1
   654                           ;main.c: 66:     pmR = &motorR;
   655  0080' 0E00'              	movlw	low main@motorR
   656  0082' 6F00'              	movwf	main@pmR& (0+255),b
   657  0084' 0E00'              	movlw	high main@motorR
   658  0086' 6F00'              	movwf	(main@pmR+1)& (0+255),b
   659  0088'                    
   660                           ; BSR set to: 1
   661                           ;main.c: 69:     struct RGBC_val RGBC;;main.c: 70:     char *pRGBC;;main.c: 71:     pRGB
      +                          C = &RGBC;
   662  0088' 0E00'              	movlw	low main@RGBC
   663  008A' 6F00'              	movwf	main@pRGBC& (0+255),b
   664  008C' 0E00'              	movlw	high main@RGBC
   665  008E' 6F00'              	movwf	(main@pRGBC+1)& (0+255),b
   666  0090'                    
   667                           ; BSR set to: 1
   668                           ;main.c: 100:     unsigned int lum;;main.c: 101:     _Bool going_forward = 0;
   669  0090' 0E00               	movlw	0
   670  0092' 6F00'              	movwf	main@going_forward& (0+255),b
   671  0094'                    
   672                           ; BSR set to: 1
   673                           ;main.c: 102:     unsigned int previously_measured_time, measured_time;;main.c: 103:    
      +                           int action_to_do;;main.c: 104:     unsigned int timings[20];;main.c: 105:     int actio
      +                          ns[20];;main.c: 106:     int actions_completed = 0;
   674  0094' 0E00               	movlw	0
   675  0096' 6F00'              	movwf	(main@actions_completed+1)& (0+255),b
   676  0098' 0E00               	movlw	0
   677  009A' 6F00'              	movwf	main@actions_completed& (0+255),b
   678  009C'                    l2082:
   679                           
   680                           ;main.c: 119:         if (PORTFbits.RF2){
   681  009C' A48E               	btfss	142,2,c	;volatile
   682  009E' EF00' F000'        	goto	u951
   683  00A2' EF00' F000'        	goto	u950
   684  00A6'                    u951:
   685  00A6' EF00' F000'        	goto	l2082
   686  00AA'                    u950:
   687  00AA' EF00' F000'        	goto	l2086
   688  00AE'                    l275:
   689  00AE'                    l2086:
   690                           
   691                           ;main.c: 126:         if(!going_forward){
   692  00AE' 0101               	movlb	1	; () banked
   693  00B0' 5100'              	movf	main@going_forward& (0+255),w,b
   694  00B2' A4D8               	btfss	status,2,c
   695  00B4' EF00' F000'        	goto	u961
   696  00B8' EF00' F000'        	goto	u960
   697  00BC'                    u961:
   698  00BC' EF00' F000'        	goto	l2094
   699  00C0'                    u960:
   700  00C0'                    
   701                           ; BSR set to: 1
   702                           ;main.c: 129:             resetTimer0();
   703  00C0' EC00' F000'        	call	_resetTimer0	;wreg free
   704  00C4'                    
   705                           ;main.c: 130:             fullSpeedAhead(pmL, pmR);
   706  00C4' C0B3' F014'        	movff	main@pmL,fullSpeedAhead@mL
   707  00C8' C0B4' F015'        	movff	main@pmL+1,fullSpeedAhead@mL+1
   708  00CC' C0B5' F016'        	movff	main@pmR,fullSpeedAhead@mR
   709  00D0' C0B6' F017'        	movff	main@pmR+1,fullSpeedAhead@mR+1
   710  00D4' EC00' F000'        	call	_fullSpeedAhead	;wreg free
   711  00D8'                    
   712                           ;main.c: 131:             going_forward = 1;
   713  00D8' 0E01               	movlw	1
   714  00DA' 0101               	movlb	1	; () banked
   715  00DC' 6F00'              	movwf	main@going_forward& (0+255),b
   716  00DE'                    l2094:
   717                           
   718                           ; BSR set to: 1
   719                           ;main.c: 134:         lum = color_read_Clear();
   720  00DE' EC00' F000'        	call	_color_read_Clear	;wreg free
   721  00E2' C005' F0A0'        	movff	?_color_read_Clear,main@lum
   722  00E6' C006' F0A1'        	movff	?_color_read_Clear+1,main@lum+1
   723  00EA'                    
   724                           ;main.c: 136:         if (lum > 1500){
   725  00EA' 0EDD               	movlw	221
   726  00EC' 0101               	movlb	1	; () banked
   727  00EE' 5D00'              	subwf	main@lum& (0+255),w,b
   728  00F0' 0E05               	movlw	5
   729  00F2' 5900'              	subwfb	(main@lum+1)& (0+255),w,b
   730  00F4' A0D8               	btfss	status,0,c
   731  00F6' EF00' F000'        	goto	u971
   732  00FA' EF00' F000'        	goto	u970
   733  00FE'                    u971:
   734  00FE' EF00' F000'        	goto	l2086
   735  0102'                    u970:
   736  0102'                    
   737                           ; BSR set to: 1
   738                           ;main.c: 138:             measured_time = get16bitTMR0val();
   739  0102' EC00' F000'        	call	_get16bitTMR0val	;wreg free
   740  0106' C001' F0A4'        	movff	?_get16bitTMR0val,main@measured_time
   741  010A' C002' F0A5'        	movff	?_get16bitTMR0val+1,main@measured_time+1
   742  010E'                    
   743                           ;main.c: 139:             stop(pmL, pmR);
   744  010E' C0B3' F014'        	movff	main@pmL,stop@mL
   745  0112' C0B4' F015'        	movff	main@pmL+1,stop@mL+1
   746  0116' C0B5' F016'        	movff	main@pmR,stop@mR
   747  011A' C0B6' F017'        	movff	main@pmR+1,stop@mR+1
   748  011E' EC00' F000'        	call	_stop	;wreg free
   749  0122'                    
   750                           ;main.c: 142:             going_forward = 0;
   751  0122' 0E00               	movlw	0
   752  0124' 0101               	movlb	1	; () banked
   753  0126' 6F00'              	movwf	main@going_forward& (0+255),b
   754  0128'                    
   755                           ; BSR set to: 1
   756                           ;main.c: 145:             timings[actions_completed] = measured_time;
   757  0128' 90D8               	bcf	status,0,c
   758  012A' 3500'              	rlcf	main@actions_completed& (0+255),w,b
   759  012C' 6ED9               	movwf	fsr2l,c
   760  012E' 3500'              	rlcf	(main@actions_completed+1)& (0+255),w,b
   761  0130' 6EDA               	movwf	fsr2h,c
   762  0132' 0E00'              	movlw	low main@timings
   763  0134' 26D9               	addwf	fsr2l,f,c
   764  0136' 0E00'              	movlw	high main@timings
   765  0138' 22DA               	addwfc	fsr2h,f,c
   766  013A' C0A4' FFDE         	movff	main@measured_time,postinc2
   767  013E' C0A5' FFDD         	movff	main@measured_time+1,postdec2
   768  0142'                    
   769                           ; BSR set to: 1
   770                           ;main.c: 147:             color_read(pRGBC);
   771  0142' C0A2' F00C'        	movff	main@pRGBC,color_read@p
   772  0146' C0A3' F00D'        	movff	main@pRGBC+1,color_read@p+1
   773  014A' EC00' F000'        	call	_color_read	;wreg free
   774  014E'                    
   775                           ;main.c: 149:             action_to_do = decide_action(pRGBC);
   776  014E' C0A2' F000'        	movff	main@pRGBC,?_decide_action
   777  0152' C0A3' F001'        	movff	main@pRGBC+1,?_decide_action+1
   778  0156' EC00' F000'        	call	_decide_action	;wreg free
   779  015A' C000' F0C9'        	movff	?_decide_action,main@action_to_do
   780  015E' C001' F0CA'        	movff	?_decide_action+1,main@action_to_do+1
   781  0162'                    
   782                           ;main.c: 151:             actions[actions_completed] = action_to_do;
   783  0162' 90D8               	bcf	status,0,c
   784  0164' 0101               	movlb	1	; () banked
   785  0166' 3500'              	rlcf	main@actions_completed& (0+255),w,b
   786  0168' 6ED9               	movwf	fsr2l,c
   787  016A' 3500'              	rlcf	(main@actions_completed+1)& (0+255),w,b
   788  016C' 6EDA               	movwf	fsr2h,c
   789  016E' 0E00'              	movlw	low main@actions
   790  0170' 26D9               	addwf	fsr2l,f,c
   791  0172' 0E00'              	movlw	high main@actions
   792  0174' 22DA               	addwfc	fsr2h,f,c
   793  0176' C0C9' FFDE         	movff	main@action_to_do,postinc2
   794  017A' C0CA' FFDD         	movff	main@action_to_do+1,postdec2
   795  017E'                    
   796                           ; BSR set to: 1
   797                           ;main.c: 154:             actions_completed += 1;
   798  017E' 4B00'              	infsnz	main@actions_completed& (0+255),f,b
   799  0180' 2B00'              	incf	(main@actions_completed+1)& (0+255),f,b
   800  0182'                    
   801                           ; BSR set to: 1
   802                           ;main.c: 157:             if(action_to_do == 0){turn_right_90();}
   803  0182' 5100'              	movf	main@action_to_do& (0+255),w,b
   804  0184' 1100'              	iorwf	(main@action_to_do+1)& (0+255),w,b
   805  0186' A4D8               	btfss	status,2,c
   806  0188' EF00' F000'        	goto	u981
   807  018C' EF00' F000'        	goto	u980
   808  0190'                    u981:
   809  0190' EF00' F000'        	goto	l2118
   810  0194'                    u980:
   811  0194'                    
   812                           ; BSR set to: 1
   813  0194' EC00' F000'        	call	_turn_right_90	;wreg free
   814  0198' EF00' F000'        	goto	l2122
   815  019C'                    l2118:
   816                           
   817                           ; BSR set to: 1
   818  019C' 0500'              	decf	main@action_to_do& (0+255),w,b
   819  019E' 1100'              	iorwf	(main@action_to_do+1)& (0+255),w,b
   820  01A0' A4D8               	btfss	status,2,c
   821  01A2' EF00' F000'        	goto	u991
   822  01A6' EF00' F000'        	goto	u990
   823  01AA'                    u991:
   824  01AA' EF00' F000'        	goto	l2122
   825  01AE'                    u990:
   826  01AE'                    
   827                           ; BSR set to: 1
   828  01AE' EC00' F000'        	call	_turn_left_90	;wreg free
   829  01B2'                    l2122:
   830                           
   831                           ;main.c: 159:             if(action_to_do == 2){
   832  01B2' 0E02               	movlw	2
   833  01B4' 0101               	movlb	1	; () banked
   834  01B6' 1900'              	xorwf	main@action_to_do& (0+255),w,b
   835  01B8' 1100'              	iorwf	(main@action_to_do+1)& (0+255),w,b
   836  01BA' A4D8               	btfss	status,2,c
   837  01BC' EF00' F000'        	goto	u1001
   838  01C0' EF00' F000'        	goto	u1000
   839  01C4'                    u1001:
   840  01C4' EF00' F000'        	goto	l2126
   841  01C8'                    u1000:
   842  01C8'                    
   843                           ; BSR set to: 1
   844                           ;main.c: 160:                 turn_left_90();
   845  01C8' EC00' F000'        	call	_turn_left_90	;wreg free
   846                           
   847                           ;main.c: 161:             }
   848  01CC' EF00' F000'        	goto	l2086
   849  01D0'                    l2126:
   850                           
   851                           ; BSR set to: 1
   852  01D0' 0E03               	movlw	3
   853  01D2' 1900'              	xorwf	main@action_to_do& (0+255),w,b
   854  01D4' 1100'              	iorwf	(main@action_to_do+1)& (0+255),w,b
   855  01D6' A4D8               	btfss	status,2,c
   856  01D8' EF00' F000'        	goto	u1011
   857  01DC' EF00' F000'        	goto	u1010
   858  01E0'                    u1011:
   859  01E0' EF00' F000'        	goto	l2130
   860  01E4'                    u1010:
   861  01E4'                    
   862                           ; BSR set to: 1
   863                           ;main.c: 163:                 turn_r_90();
   864  01E4' EC00' F000'        	call	_turn_r_90	;wreg free
   865                           
   866                           ;main.c: 164:             }
   867  01E8' EF00' F000'        	goto	l2086
   868  01EC'                    l2130:
   869                           
   870                           ; BSR set to: 1
   871  01EC' 0E04               	movlw	4
   872  01EE' 1900'              	xorwf	main@action_to_do& (0+255),w,b
   873  01F0' 1100'              	iorwf	(main@action_to_do+1)& (0+255),w,b
   874  01F2' A4D8               	btfss	status,2,c
   875  01F4' EF00' F000'        	goto	u1021
   876  01F8' EF00' F000'        	goto	u1020
   877  01FC'                    u1021:
   878  01FC' EF00' F000'        	goto	l2134
   879  0200'                    u1020:
   880  0200'                    l2132:
   881                           
   882                           ; BSR set to: 1
   883                           ;main.c: 166:                 turn_right_90();
   884  0200' EC00' F000'        	call	_turn_right_90	;wreg free
   885                           
   886                           ;main.c: 167:             }
   887  0204' EF00' F000'        	goto	l2086
   888  0208'                    l2134:
   889                           
   890                           ; BSR set to: 1
   891  0208' 0E05               	movlw	5
   892  020A' 1900'              	xorwf	main@action_to_do& (0+255),w,b
   893  020C' 1100'              	iorwf	(main@action_to_do+1)& (0+255),w,b
   894  020E' A4D8               	btfss	status,2,c
   895  0210' EF00' F000'        	goto	u1031
   896  0214' EF00' F000'        	goto	u1030
   897  0218'                    u1031:
   898  0218' EF00' F000'        	goto	l2138
   899  021C'                    u1030:
   900  021C' EF00' F000'        	goto	l2132
   901  0220'                    l2138:
   902                           
   903                           ; BSR set to: 1
   904  0220' 0E07               	movlw	7
   905  0222' 1900'              	xorwf	main@action_to_do& (0+255),w,b
   906  0224' 1100'              	iorwf	(main@action_to_do+1)& (0+255),w,b
   907  0226' A4D8               	btfss	status,2,c
   908  0228' EF00' F000'        	goto	u1041
   909  022C' EF00' F000'        	goto	u1040
   910  0230'                    u1041:
   911  0230' EF00' F000'        	goto	l275
   912  0234'                    u1040:
   913  0234'                    
   914                           ; BSR set to: 1
   915                           ;main.c: 174:                 turn_180();
   916  0234' EC00' F000'        	call	_turn_180	;wreg free
   917  0238'                    
   918                           ;main.c: 184:     int upcoming_action = actions_completed - 2;
   919  0238' 0EFE               	movlw	254
   920  023A' 0101               	movlb	1	; () banked
   921  023C' 2500'              	addwf	main@actions_completed& (0+255),w,b
   922  023E' 6F00'              	movwf	main@upcoming_action& (0+255),b
   923  0240' 0EFF               	movlw	255
   924  0242' 2100'              	addwfc	(main@actions_completed+1)& (0+255),w,b
   925  0244' 6F00'              	movwf	(main@upcoming_action+1)& (0+255),b
   926  0246'                    
   927                           ; BSR set to: 1
   928                           ;main.c: 187:     going_forward = 0;
   929  0246' 0E00               	movlw	0
   930  0248' 6F00'              	movwf	main@going_forward& (0+255),b
   931                           
   932                           ;main.c: 190:     while(upcoming_action >= 0){
   933  024A' EF00' F000'        	goto	l294
   934  024E'                    l2146:
   935                           
   936                           ; BSR set to: 1
   937                           ;main.c: 191:         if(!going_forward){
   938  024E' 5100'              	movf	main@going_forward& (0+255),w,b
   939  0250' A4D8               	btfss	status,2,c
   940  0252' EF00' F000'        	goto	u1051
   941  0256' EF00' F000'        	goto	u1050
   942  025A'                    u1051:
   943  025A' EF00' F000'        	goto	l2154
   944  025E'                    u1050:
   945  025E'                    
   946                           ; BSR set to: 1
   947                           ;main.c: 192:             resetTimer0();
   948  025E' EC00' F000'        	call	_resetTimer0	;wreg free
   949  0262'                    
   950                           ;main.c: 193:             fullSpeedAhead(pmL, pmR);
   951  0262' C0B3' F014'        	movff	main@pmL,fullSpeedAhead@mL
   952  0266' C0B4' F015'        	movff	main@pmL+1,fullSpeedAhead@mL+1
   953  026A' C0B5' F016'        	movff	main@pmR,fullSpeedAhead@mR
   954  026E' C0B6' F017'        	movff	main@pmR+1,fullSpeedAhead@mR+1
   955  0272' EC00' F000'        	call	_fullSpeedAhead	;wreg free
   956  0276'                    
   957                           ;main.c: 194:             going_forward = 1;
   958  0276' 0E01               	movlw	1
   959  0278' 0101               	movlb	1	; () banked
   960  027A' 6F00'              	movwf	main@going_forward& (0+255),b
   961  027C'                    l2154:
   962                           
   963                           ; BSR set to: 1
   964                           ;main.c: 197:         measured_time = get16bitTMR0val();
   965  027C' EC00' F000'        	call	_get16bitTMR0val	;wreg free
   966  0280' C001' F0A4'        	movff	?_get16bitTMR0val,main@measured_time
   967  0284' C002' F0A5'        	movff	?_get16bitTMR0val+1,main@measured_time+1
   968  0288'                    
   969                           ;main.c: 198:         if(measured_time > timings[upcoming_action + 1]){
   970  0288' C0B0' F019'        	movff	main@upcoming_action,??_main
   971  028C' C0B1' F01A'        	movff	main@upcoming_action+1,??_main+1
   972  0290' 90D8               	bcf	status,0,c
   973  0292' 3600'              	rlcf	??_main^0,f,c
   974  0294' 3600'              	rlcf	(??_main+1)^0,f,c
   975  0296' 0E02               	movlw	2
   976  0298' 2600'              	addwf	??_main^0,f,c
   977  029A' 0E00               	movlw	0
   978  029C' 2200'              	addwfc	(??_main+1)^0,f,c
   979  029E' 0E00'              	movlw	low main@timings
   980  02A0' 2400'              	addwf	??_main^0,w,c
   981  02A2' 6ED9               	movwf	fsr2l,c
   982  02A4' 0E00'              	movlw	high main@timings
   983  02A6' 2000'              	addwfc	(??_main+1)^0,w,c
   984  02A8' 6EDA               	movwf	fsr2h,c
   985  02AA' 0101               	movlb	1	; () banked
   986  02AC' 5100'              	movf	main@measured_time& (0+255),w,b
   987  02AE' 5CDE               	subwf	postinc2,w,c
   988  02B0' 5100'              	movf	(main@measured_time+1)& (0+255),w,b
   989  02B2' 58DE               	subwfb	postinc2,w,c
   990  02B4' B0D8               	btfsc	status,0,c
   991  02B6' EF00' F000'        	goto	u1061
   992  02BA' EF00' F000'        	goto	u1060
   993  02BE'                    u1061:
   994  02BE' EF00' F000'        	goto	l2192
   995  02C2'                    u1060:
   996  02C2'                    
   997                           ; BSR set to: 1
   998                           ;main.c: 199:             stop(pmL, pmR);
   999  02C2' C0B3' F014'        	movff	main@pmL,stop@mL
  1000  02C6' C0B4' F015'        	movff	main@pmL+1,stop@mL+1
  1001  02CA' C0B5' F016'        	movff	main@pmR,stop@mR
  1002  02CE' C0B6' F017'        	movff	main@pmR+1,stop@mR+1
  1003  02D2' EC00' F000'        	call	_stop	;wreg free
  1004  02D6'                    
  1005                           ;main.c: 200:             going_forward = 0;
  1006  02D6' 0E00               	movlw	0
  1007  02D8' 0101               	movlb	1	; () banked
  1008  02DA' 6F00'              	movwf	main@going_forward& (0+255),b
  1009  02DC'                    
  1010                           ; BSR set to: 1
  1011                           ;main.c: 201:             action_to_do = invert_instruction(actions[upcoming_action]);
  1012  02DC' 90D8               	bcf	status,0,c
  1013  02DE' 3500'              	rlcf	main@upcoming_action& (0+255),w,b
  1014  02E0' 6ED9               	movwf	fsr2l,c
  1015  02E2' 3500'              	rlcf	(main@upcoming_action+1)& (0+255),w,b
  1016  02E4' 6EDA               	movwf	fsr2h,c
  1017  02E6' 0E00'              	movlw	low main@actions
  1018  02E8' 26D9               	addwf	fsr2l,f,c
  1019  02EA' 0E00'              	movlw	high main@actions
  1020  02EC' 22DA               	addwfc	fsr2h,f,c
  1021  02EE' CFDE F000'         	movff	postinc2,?_invert_instruction
  1022  02F2' CFDD F001'         	movff	postdec2,?_invert_instruction+1
  1023  02F6' EC00' F000'        	call	_invert_instruction	;wreg free
  1024  02FA' C000' F0C9'        	movff	?_invert_instruction,main@action_to_do
  1025  02FE' C001' F0CA'        	movff	?_invert_instruction+1,main@action_to_do+1
  1026  0302'                    
  1027                           ;main.c: 203:             if(action_to_do == 0){;}
  1028  0302' 0101               	movlb	1	; () banked
  1029  0304' 5100'              	movf	main@action_to_do& (0+255),w,b
  1030  0306' 1100'              	iorwf	(main@action_to_do+1)& (0+255),w,b
  1031  0308' A4D8               	btfss	status,2,c
  1032  030A' EF00' F000'        	goto	u1071
  1033  030E' EF00' F000'        	goto	u1070
  1034  0312'                    u1071:
  1035  0312' EF00' F000'        	goto	l2168
  1036  0316'                    u1070:
  1037  0316' EF00' F000'        	goto	l2190
  1038  031A'                    l2168:
  1039                           
  1040                           ; BSR set to: 1
  1041  031A' 0500'              	decf	main@action_to_do& (0+255),w,b
  1042  031C' 1100'              	iorwf	(main@action_to_do+1)& (0+255),w,b
  1043  031E' A4D8               	btfss	status,2,c
  1044  0320' EF00' F000'        	goto	u1081
  1045  0324' EF00' F000'        	goto	u1080
  1046  0328'                    u1081:
  1047  0328' EF00' F000'        	goto	l2172
  1048  032C'                    u1080:
  1049  032C' EF00' F000'        	goto	l2190
  1050  0330'                    l2172:
  1051                           
  1052                           ; BSR set to: 1
  1053  0330' 0E02               	movlw	2
  1054  0332' 1900'              	xorwf	main@action_to_do& (0+255),w,b
  1055  0334' 1100'              	iorwf	(main@action_to_do+1)& (0+255),w,b
  1056  0336' A4D8               	btfss	status,2,c
  1057  0338' EF00' F000'        	goto	u1091
  1058  033C' EF00' F000'        	goto	u1090
  1059  0340'                    u1091:
  1060  0340' EF00' F000'        	goto	l2176
  1061  0344'                    u1090:
  1062  0344' EF00' F000'        	goto	l2190
  1063  0348'                    l2176:
  1064                           
  1065                           ; BSR set to: 1
  1066  0348' 0E03               	movlw	3
  1067  034A' 1900'              	xorwf	main@action_to_do& (0+255),w,b
  1068  034C' 1100'              	iorwf	(main@action_to_do+1)& (0+255),w,b
  1069  034E' A4D8               	btfss	status,2,c
  1070  0350' EF00' F000'        	goto	u1101
  1071  0354' EF00' F000'        	goto	u1100
  1072  0358'                    u1101:
  1073  0358' EF00' F000'        	goto	l2180
  1074  035C'                    u1100:
  1075  035C' EF00' F000'        	goto	l2190
  1076  0360'                    l2180:
  1077                           
  1078                           ; BSR set to: 1
  1079  0360' 0E04               	movlw	4
  1080  0362' 1900'              	xorwf	main@action_to_do& (0+255),w,b
  1081  0364' 1100'              	iorwf	(main@action_to_do+1)& (0+255),w,b
  1082  0366' A4D8               	btfss	status,2,c
  1083  0368' EF00' F000'        	goto	u1111
  1084  036C' EF00' F000'        	goto	u1110
  1085  0370'                    u1111:
  1086  0370' EF00' F000'        	goto	l2184
  1087  0374'                    u1110:
  1088  0374' EF00' F000'        	goto	l2190
  1089  0378'                    l2184:
  1090  0378'                    l2190:
  1091                           
  1092                           ; BSR set to: 1
  1093                           ;main.c: 210:             upcoming_action -=1 ;
  1094  0378' 0700'              	decf	main@upcoming_action& (0+255),f,b
  1095  037A' A0D8               	btfss	status,0,c
  1096  037C' 0700'              	decf	(main@upcoming_action+1)& (0+255),f,b
  1097  037E'                    l2192:
  1098                           
  1099                           ; BSR set to: 1
  1100                           ;main.c: 212:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1101  037E' 0ED0               	movlw	208
  1102  0380' 6E00'              	movwf	??_main^0,c
  1103  0382' 0ECA               	movlw	202
  1104  0384'                    u1157:
  1105  0384' 2EE8               	decfsz	wreg,f,c
  1106  0386' D7FE               	bra	u1157
  1107  0388' 2E00'              	decfsz	??_main^0,f,c
  1108  038A' D7FC               	bra	u1157
  1109  038C'                    l294:
  1110                           
  1111                           ;main.c: 190:     while(upcoming_action >= 0){
  1112  038C' 0101               	movlb	1	; () banked
  1113  038E' BF00'              	btfsc	(main@upcoming_action+1)& (0+255),7,b
  1114  0390' EF00' F000'        	goto	u1120
  1115  0394' EF00' F000'        	goto	u1121
  1116  0398'                    u1121:
  1117  0398' EF00' F000'        	goto	l2146
  1118  039C'                    u1120:
  1119  039C'                    
  1120                           ; BSR set to: 1
  1121                           ;main.c: 214:     stop(pmL, pmR);
  1122  039C' C0B3' F014'        	movff	main@pmL,stop@mL
  1123  03A0' C0B4' F015'        	movff	main@pmL+1,stop@mL+1
  1124  03A4' C0B5' F016'        	movff	main@pmR,stop@mR
  1125  03A8' C0B6' F017'        	movff	main@pmR+1,stop@mR+1
  1126  03AC' EC00' F000'        	call	_stop	;wreg free
  1127  03B0' EF00' F000'        	goto	start
  1128  03B4'                    __end_of_main:
  1129                           	callstack 0
  1130                           
  1131 ;; *************** function _stop *****************
  1132 ;; Defined at:
  1133 ;;		line 99 in file "dc_motor.c"
  1134 ;; Parameters:    Size  Location     Type
  1135 ;;  mL              2   20[COMRAM] PTR struct DC_motor
  1136 ;;		 -> main@motorL(9), 
  1137 ;;  mR              2   22[COMRAM] PTR struct DC_motor
  1138 ;;		 -> main@motorR(9), 
  1139 ;; Auto vars:     Size  Location     Type
  1140 ;;		None
  1141 ;; Return value:  Size  Location     Type
  1142 ;;                  1    wreg      void 
  1143 ;; Registers used:
  1144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1145 ;; Tracked objects:
  1146 ;;		On entry : 0/0
  1147 ;;		On exit  : 0/0
  1148 ;;		Unchanged: 0/0
  1149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1150 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1152 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1153 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1154 ;;Total ram usage:        5 bytes
  1155 ;; Hardware stack levels used: 1
  1156 ;; Hardware stack levels required when called: 4
  1157 ;; This function calls:
  1158 ;;		_setMotorPWM
  1159 ;; This function is called by:
  1160 ;;		_main
  1161 ;;		_turnLeft
  1162 ;;		_turnRight
  1163 ;; This function uses a non-reentrant model
  1164 ;;
  1165                           
  1166                           	psect	text1
  1167  0000'                    __ptext1:
  1168                           	callstack 0
  1169  0000'                    _stop:
  1170                           	callstack 26
  1171  0000'                    
  1172                           ;dc_motor.c: 100:     while ((mL->power) > 0 || (mR->power) > 0){
  1173  0000' EF00' F000'        	goto	l1910
  1174  0004'                    l1896:
  1175                           
  1176                           ;dc_motor.c: 101:         if ((mL->power) > 0) (mL->power) -= 1;
  1177  0004' C014' FFD9         	movff	stop@mL,fsr2l
  1178  0008' C015' FFDA         	movff	stop@mL+1,fsr2h
  1179  000C' 50DF               	movf	indf2,w,c
  1180  000E' B4D8               	btfsc	status,2,c
  1181  0010' EF00' F000'        	goto	u781
  1182  0014' EF00' F000'        	goto	u780
  1183  0018'                    u781:
  1184  0018' EF00' F000'        	goto	l1900
  1185  001C'                    u780:
  1186  001C' C014' FFD9         	movff	stop@mL,fsr2l
  1187  0020' C015' FFDA         	movff	stop@mL+1,fsr2h
  1188  0024' 06DF               	decf	indf2,f,c
  1189  0026'                    l1900:
  1190                           
  1191                           ;dc_motor.c: 102:         if ((mR->power) > 0) (mR->power) -= 1;
  1192  0026' C016' FFD9         	movff	stop@mR,fsr2l
  1193  002A' C017' FFDA         	movff	stop@mR+1,fsr2h
  1194  002E' 50DF               	movf	indf2,w,c
  1195  0030' B4D8               	btfsc	status,2,c
  1196  0032' EF00' F000'        	goto	u791
  1197  0036' EF00' F000'        	goto	u790
  1198  003A'                    u791:
  1199  003A' EF00' F000'        	goto	l1904
  1200  003E'                    u790:
  1201  003E' C016' FFD9         	movff	stop@mR,fsr2l
  1202  0042' C017' FFDA         	movff	stop@mR+1,fsr2h
  1203  0046' 06DF               	decf	indf2,f,c
  1204  0048'                    l1904:
  1205                           
  1206                           ;dc_motor.c: 104:         setMotorPWM(mL);
  1207  0048' C014' F00E'        	movff	stop@mL,setMotorPWM@m
  1208  004C' C015' F00F'        	movff	stop@mL+1,setMotorPWM@m+1
  1209  0050' EC00' F000'        	call	_setMotorPWM	;wreg free
  1210  0054'                    
  1211                           ;dc_motor.c: 105:         setMotorPWM(mR);
  1212  0054' C016' F00E'        	movff	stop@mR,setMotorPWM@m
  1213  0058' C017' F00F'        	movff	stop@mR+1,setMotorPWM@m+1
  1214  005C' EC00' F000'        	call	_setMotorPWM	;wreg free
  1215  0060'                    
  1216                           ;dc_motor.c: 106:         _delay((unsigned long)((1)*(64000000/4000.0)));
  1217  0060' 0E15               	movlw	21
  1218  0062' 6E00'              	movwf	??_stop^0,c
  1219  0064' 0EC6               	movlw	198
  1220  0066'                    u1167:
  1221  0066' 2EE8               	decfsz	wreg,f,c
  1222  0068' D7FE               	bra	u1167
  1223  006A' 2E00'              	decfsz	??_stop^0,f,c
  1224  006C' D7FC               	bra	u1167
  1225  006E' D000               	nop2	
  1226  0070'                    l1910:
  1227                           
  1228                           ;dc_motor.c: 100:     while ((mL->power) > 0 || (mR->power) > 0){
  1229  0070' C014' FFD9         	movff	stop@mL,fsr2l
  1230  0074' C015' FFDA         	movff	stop@mL+1,fsr2h
  1231  0078' 50DF               	movf	indf2,w,c
  1232  007A' A4D8               	btfss	status,2,c
  1233  007C' EF00' F000'        	goto	u801
  1234  0080' EF00' F000'        	goto	u800
  1235  0084'                    u801:
  1236  0084' EF00' F000'        	goto	l1896
  1237  0088'                    u800:
  1238  0088' C016' FFD9         	movff	stop@mR,fsr2l
  1239  008C' C017' FFDA         	movff	stop@mR+1,fsr2h
  1240  0090' 50DF               	movf	indf2,w,c
  1241  0092' A4D8               	btfss	status,2,c
  1242  0094' EF00' F000'        	goto	u811
  1243  0098' EF00' F000'        	goto	u810
  1244  009C'                    u811:
  1245  009C' EF00' F000'        	goto	l1896
  1246  00A0'                    u810:
  1247  00A0' 0012               	return		;funcret
  1248  00A2'                    __end_of_stop:
  1249                           	callstack 0
  1250                           
  1251 ;; *************** function _resetTimer0 *****************
  1252 ;; Defined at:
  1253 ;;		line 34 in file "timers.c"
  1254 ;; Parameters:    Size  Location     Type
  1255 ;;		None
  1256 ;; Auto vars:     Size  Location     Type
  1257 ;;		None
  1258 ;; Return value:  Size  Location     Type
  1259 ;;                  1    wreg      void 
  1260 ;; Registers used:
  1261 ;;		wreg, status,2
  1262 ;; Tracked objects:
  1263 ;;		On entry : 0/0
  1264 ;;		On exit  : 0/0
  1265 ;;		Unchanged: 0/0
  1266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1271 ;;Total ram usage:        0 bytes
  1272 ;; Hardware stack levels used: 1
  1273 ;; Hardware stack levels required when called: 2
  1274 ;; This function calls:
  1275 ;;		Nothing
  1276 ;; This function is called by:
  1277 ;;		_main
  1278 ;; This function uses a non-reentrant model
  1279 ;;
  1280                           
  1281                           	psect	text2
  1282  0000'                    __ptext2:
  1283                           	callstack 0
  1284  0000'                    _resetTimer0:
  1285                           	callstack 28
  1286  0000'                    
  1287                           ;timers.c: 35:     TMR0H = 0;
  1288  0000' 0E00               	movlw	0
  1289  0002' 6ED4               	movwf	212,c	;volatile
  1290                           
  1291                           ;timers.c: 36:     TMR0L = 0;
  1292  0004' 0E00               	movlw	0
  1293  0006' 6ED3               	movwf	211,c	;volatile
  1294  0008' 0012               	return		;funcret
  1295  000A'                    __end_of_resetTimer0:
  1296                           	callstack 0
  1297                           
  1298 ;; *************** function _initUSART4 *****************
  1299 ;; Defined at:
  1300 ;;		line 4 in file "serial.c"
  1301 ;; Parameters:    Size  Location     Type
  1302 ;;		None
  1303 ;; Auto vars:     Size  Location     Type
  1304 ;;		None
  1305 ;; Return value:  Size  Location     Type
  1306 ;;                  1    wreg      void 
  1307 ;; Registers used:
  1308 ;;		wreg, status,2
  1309 ;; Tracked objects:
  1310 ;;		On entry : 0/0
  1311 ;;		On exit  : 0/0
  1312 ;;		Unchanged: 0/0
  1313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1317 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1318 ;;Total ram usage:        0 bytes
  1319 ;; Hardware stack levels used: 1
  1320 ;; Hardware stack levels required when called: 2
  1321 ;; This function calls:
  1322 ;;		Nothing
  1323 ;; This function is called by:
  1324 ;;		_main
  1325 ;; This function uses a non-reentrant model
  1326 ;;
  1327                           
  1328                           	psect	text3
  1329  0000'                    __ptext3:
  1330                           	callstack 0
  1331  0000'                    _initUSART4:
  1332                           	callstack 28
  1333  0000'                    
  1334                           ;serial.c: 8:     RC0PPS = 0x12;
  1335  0000' 0E12               	movlw	18
  1336  0002' 010E               	movlb	14	; () banked
  1337  0004' 6F62               	movwf	98,b	;volatile
  1338                           
  1339                           ;serial.c: 9:     RX4PPS = 0x11;
  1340  0006' 0E11               	movlw	17
  1341  0008' 6F15               	movwf	21,b	;volatile
  1342  000A'                    
  1343                           ; BSR set to: 14
  1344                           ;serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  1345  000A' 97E9               	bcf	233,3,b	;volatile
  1346  000C'                    
  1347                           ; BSR set to: 14
  1348                           ;serial.c: 13:     TX4STAbits.BRGH = 0;
  1349  000C' 95E8               	bcf	232,2,b	;volatile
  1350                           
  1351                           ;serial.c: 15:     SP4BRGL = 51;
  1352  000E' 0E33               	movlw	51
  1353  0010' 6FE5               	movwf	229,b	;volatile
  1354                           
  1355                           ;serial.c: 16:     SP4BRGH = 0;
  1356  0012' 0E00               	movlw	0
  1357  0014' 6FE6               	movwf	230,b	;volatile
  1358  0016'                    
  1359                           ; BSR set to: 14
  1360                           ;serial.c: 19:     RC4STAbits.CREN = 1;
  1361  0016' 89E7               	bsf	231,4,b	;volatile
  1362  0018'                    
  1363                           ; BSR set to: 14
  1364                           ;serial.c: 20:     TX4STAbits.TXEN = 1;
  1365  0018' 8BE8               	bsf	232,5,b	;volatile
  1366  001A'                    
  1367                           ; BSR set to: 14
  1368                           ;serial.c: 21:     RC4STAbits.SPEN = 1;
  1369  001A' 8FE7               	bsf	231,7,b	;volatile
  1370  001C'                    
  1371                           ; BSR set to: 14
  1372  001C' 0012               	return		;funcret
  1373  001E'                    __end_of_initUSART4:
  1374                           	callstack 0
  1375                           
  1376 ;; *************** function _initDCmotorsPWM *****************
  1377 ;; Defined at:
  1378 ;;		line 6 in file "dc_motor.c"
  1379 ;; Parameters:    Size  Location     Type
  1380 ;;  PWMperiod       2    1[COMRAM] int 
  1381 ;; Auto vars:     Size  Location     Type
  1382 ;;		None
  1383 ;; Return value:  Size  Location     Type
  1384 ;;                  1    wreg      void 
  1385 ;; Registers used:
  1386 ;;		wreg, status,2
  1387 ;; Tracked objects:
  1388 ;;		On entry : 0/0
  1389 ;;		On exit  : 0/0
  1390 ;;		Unchanged: 0/0
  1391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1392 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1395 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1396 ;;Total ram usage:        2 bytes
  1397 ;; Hardware stack levels used: 1
  1398 ;; Hardware stack levels required when called: 2
  1399 ;; This function calls:
  1400 ;;		Nothing
  1401 ;; This function is called by:
  1402 ;;		_main
  1403 ;; This function uses a non-reentrant model
  1404 ;;
  1405                           
  1406                           	psect	text4
  1407  0000'                    __ptext4:
  1408                           	callstack 0
  1409  0000'                    _initDCmotorsPWM:
  1410                           	callstack 28
  1411  0000'                    
  1412                           ;dc_motor.c: 10:     RE2PPS=0x05;
  1413  0000' 0E05               	movlw	5
  1414  0002' 010E               	movlb	14	; () banked
  1415  0004' 6F74               	movwf	116,b	;volatile
  1416                           
  1417                           ;dc_motor.c: 11:     RE4PPS=0x06;
  1418  0006' 0E06               	movlw	6
  1419  0008' 6F76               	movwf	118,b	;volatile
  1420                           
  1421                           ;dc_motor.c: 12:     RC7PPS=0x07;
  1422  000A' 0E07               	movlw	7
  1423  000C' 6F69               	movwf	105,b	;volatile
  1424                           
  1425                           ;dc_motor.c: 13:     RG6PPS=0x08;
  1426  000E' 0E08               	movlw	8
  1427  0010' 6F88               	movwf	136,b	;volatile
  1428                           
  1429                           ;dc_motor.c: 16:     T2CONbits.CKPS=0b100;
  1430  0012' 50BD               	movf	189,w,c	;volatile
  1431  0014' 0B8F               	andlw	-113
  1432  0016' 0940               	iorlw	64
  1433  0018' 6EBD               	movwf	189,c	;volatile
  1434                           
  1435                           ;dc_motor.c: 17:     T2HLTbits.MODE=0b00000;
  1436  001A' 0EE0               	movlw	-32
  1437  001C' 16BE               	andwf	190,f,c	;volatile
  1438                           
  1439                           ;dc_motor.c: 18:     T2CLKCONbits.CS=0b0001;
  1440  001E' 50BF               	movf	191,w,c	;volatile
  1441  0020' 0BF0               	andlw	-16
  1442  0022' 0901               	iorlw	1
  1443  0024' 6EBF               	movwf	191,c	;volatile
  1444                           
  1445                           ;dc_motor.c: 22:     T2PR=99;
  1446  0026' 0E63               	movlw	99
  1447  0028' 6EBC               	movwf	188,c	;volatile
  1448  002A'                    
  1449                           ; BSR set to: 14
  1450                           ;dc_motor.c: 23:     T2CONbits.ON=1;
  1451  002A' 8EBD               	bsf	189,7,c	;volatile
  1452                           
  1453                           ;dc_motor.c: 27:     CCPR1H=0;
  1454  002C' 0E00               	movlw	0
  1455  002E' 6EAA               	movwf	170,c	;volatile
  1456                           
  1457                           ;dc_motor.c: 28:     CCPR2H=0;
  1458  0030' 0E00               	movlw	0
  1459  0032' 6EA6               	movwf	166,c	;volatile
  1460                           
  1461                           ;dc_motor.c: 29:     CCPR3H=0;
  1462  0034' 0E00               	movlw	0
  1463  0036' 010F               	movlb	15	; () banked
  1464  0038' 6F25               	movwf	37,b	;volatile
  1465                           
  1466                           ;dc_motor.c: 30:     CCPR4H=0;
  1467  003A' 0E00               	movlw	0
  1468  003C' 6F21               	movwf	33,b	;volatile
  1469                           
  1470                           ;dc_motor.c: 33:     CCPTMRS0bits.C1TSEL=0;
  1471  003E' 0EFC               	movlw	-4
  1472  0040' 16AD               	andwf	173,f,c	;volatile
  1473                           
  1474                           ;dc_motor.c: 34:     CCPTMRS0bits.C2TSEL=0;
  1475  0042' 0EF3               	movlw	-13
  1476  0044' 16AD               	andwf	173,f,c	;volatile
  1477                           
  1478                           ;dc_motor.c: 35:     CCPTMRS0bits.C3TSEL=0;
  1479  0046' 0ECF               	movlw	-49
  1480  0048' 16AD               	andwf	173,f,c	;volatile
  1481                           
  1482                           ;dc_motor.c: 36:     CCPTMRS0bits.C4TSEL=0;
  1483  004A' 0E3F               	movlw	-193
  1484  004C' 16AD               	andwf	173,f,c	;volatile
  1485  004E'                    
  1486                           ; BSR set to: 15
  1487                           ;dc_motor.c: 39:     CCP1CONbits.FMT=1;
  1488  004E' 88AB               	bsf	171,4,c	;volatile
  1489                           
  1490                           ;dc_motor.c: 40:     CCP1CONbits.CCP1MODE=0b1100;
  1491  0050' 50AB               	movf	171,w,c	;volatile
  1492  0052' 0BF0               	andlw	-16
  1493  0054' 090C               	iorlw	12
  1494  0056' 6EAB               	movwf	171,c	;volatile
  1495  0058'                    
  1496                           ; BSR set to: 15
  1497                           ;dc_motor.c: 41:     CCP1CONbits.EN=1;
  1498  0058' 8EAB               	bsf	171,7,c	;volatile
  1499  005A'                    
  1500                           ; BSR set to: 15
  1501                           ;dc_motor.c: 43:     CCP2CONbits.FMT=1;
  1502  005A' 88A7               	bsf	167,4,c	;volatile
  1503                           
  1504                           ;dc_motor.c: 44:     CCP2CONbits.CCP2MODE=0b1100;
  1505  005C' 50A7               	movf	167,w,c	;volatile
  1506  005E' 0BF0               	andlw	-16
  1507  0060' 090C               	iorlw	12
  1508  0062' 6EA7               	movwf	167,c	;volatile
  1509  0064'                    
  1510                           ; BSR set to: 15
  1511                           ;dc_motor.c: 45:     CCP2CONbits.EN=1;
  1512  0064' 8EA7               	bsf	167,7,c	;volatile
  1513  0066'                    
  1514                           ; BSR set to: 15
  1515                           ;dc_motor.c: 47:     CCP3CONbits.FMT=1;
  1516  0066' 8926               	bsf	38,4,b	;volatile
  1517                           
  1518                           ;dc_motor.c: 48:     CCP3CONbits.CCP3MODE=0b1100;
  1519  0068' 5126               	movf	38,w,b	;volatile
  1520  006A' 0BF0               	andlw	-16
  1521  006C' 090C               	iorlw	12
  1522  006E' 6F26               	movwf	38,b	;volatile
  1523  0070'                    
  1524                           ; BSR set to: 15
  1525                           ;dc_motor.c: 49:     CCP3CONbits.EN=1;
  1526  0070' 8F26               	bsf	38,7,b	;volatile
  1527  0072'                    
  1528                           ; BSR set to: 15
  1529                           ;dc_motor.c: 51:     CCP4CONbits.FMT=1;
  1530  0072' 8922               	bsf	34,4,b	;volatile
  1531                           
  1532                           ;dc_motor.c: 52:     CCP4CONbits.CCP4MODE=0b1100;
  1533  0074' 5122               	movf	34,w,b	;volatile
  1534  0076' 0BF0               	andlw	-16
  1535  0078' 090C               	iorlw	12
  1536  007A' 6F22               	movwf	34,b	;volatile
  1537  007C'                    
  1538                           ; BSR set to: 15
  1539                           ;dc_motor.c: 53:     CCP4CONbits.EN=1;
  1540  007C' 8F22               	bsf	34,7,b	;volatile
  1541                           
  1542                           ;dc_motor.c: 56:     RE2PPS=0x05;
  1543  007E' 0E05               	movlw	5
  1544  0080' 010E               	movlb	14	; () banked
  1545  0082' 6F74               	movwf	116,b	;volatile
  1546                           
  1547                           ;dc_motor.c: 57:     RE4PPS=0x06;
  1548  0084' 0E06               	movlw	6
  1549  0086' 6F76               	movwf	118,b	;volatile
  1550                           
  1551                           ;dc_motor.c: 58:     RC7PPS=0x07;
  1552  0088' 0E07               	movlw	7
  1553  008A' 6F69               	movwf	105,b	;volatile
  1554                           
  1555                           ;dc_motor.c: 59:     RG6PPS=0x08;
  1556  008C' 0E08               	movlw	8
  1557  008E' 6F88               	movwf	136,b	;volatile
  1558  0090'                    
  1559                           ; BSR set to: 14
  1560                           ;dc_motor.c: 62:     TRISEbits.TRISE2=0;
  1561  0090' 9485               	bcf	133,2,c	;volatile
  1562  0092'                    
  1563                           ; BSR set to: 14
  1564                           ;dc_motor.c: 63:     TRISEbits.TRISE4=0;
  1565  0092' 9885               	bcf	133,4,c	;volatile
  1566  0094'                    
  1567                           ; BSR set to: 14
  1568                           ;dc_motor.c: 64:     TRISCbits.TRISC7=0;
  1569  0094' 9E83               	bcf	131,7,c	;volatile
  1570  0096'                    
  1571                           ; BSR set to: 14
  1572                           ;dc_motor.c: 65:     TRISGbits.TRISG6=0;
  1573  0096' 9C87               	bcf	135,6,c	;volatile
  1574  0098'                    
  1575                           ; BSR set to: 14
  1576                           ;dc_motor.c: 68:     LATEbits.LATE2=0;
  1577  0098' 947D               	bcf	125,2,c	;volatile
  1578  009A'                    
  1579                           ; BSR set to: 14
  1580                           ;dc_motor.c: 69:     LATCbits.LATC7=0;
  1581  009A' 9E7B               	bcf	123,7,c	;volatile
  1582  009C'                    
  1583                           ; BSR set to: 14
  1584                           ;dc_motor.c: 70:     LATEbits.LATE4=0;
  1585  009C' 987D               	bcf	125,4,c	;volatile
  1586  009E'                    
  1587                           ; BSR set to: 14
  1588                           ;dc_motor.c: 71:     LATGbits.LATG6=0;
  1589  009E' 9C7F               	bcf	127,6,c	;volatile
  1590  00A0'                    
  1591                           ; BSR set to: 14
  1592  00A0' 0012               	return		;funcret
  1593  00A2'                    __end_of_initDCmotorsPWM:
  1594                           	callstack 0
  1595                           
  1596 ;; *************** function _get16bitTMR0val *****************
  1597 ;; Defined at:
  1598 ;;		line 27 in file "timers.c"
  1599 ;; Parameters:    Size  Location     Type
  1600 ;;		None
  1601 ;; Auto vars:     Size  Location     Type
  1602 ;;  timer_val       2    5[COMRAM] unsigned int 
  1603 ;; Return value:  Size  Location     Type
  1604 ;;                  2    1[COMRAM] unsigned int 
  1605 ;; Registers used:
  1606 ;;		wreg, status,2, status,0
  1607 ;; Tracked objects:
  1608 ;;		On entry : 0/0
  1609 ;;		On exit  : 0/0
  1610 ;;		Unchanged: 0/0
  1611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1612 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1613 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1614 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1615 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1616 ;;Total ram usage:        6 bytes
  1617 ;; Hardware stack levels used: 1
  1618 ;; Hardware stack levels required when called: 2
  1619 ;; This function calls:
  1620 ;;		Nothing
  1621 ;; This function is called by:
  1622 ;;		_main
  1623 ;; This function uses a non-reentrant model
  1624 ;;
  1625                           
  1626                           	psect	text5
  1627  0000'                    __ptext5:
  1628                           	callstack 0
  1629  0000'                    _get16bitTMR0val:
  1630                           	callstack 28
  1631  0000'                    
  1632                           ;timers.c: 29:     unsigned int timer_val = TMR0L;
  1633  0000' CFD3 F005'         	movff	4051,get16bitTMR0val@timer_val	;volatile
  1634  0004' 6A00'              	clrf	(get16bitTMR0val@timer_val+1)^0,c
  1635  0006'                    
  1636                           ;timers.c: 30:     timer_val |= (TMR0H << 8);
  1637  0006' 50D4               	movf	212,w,c	;volatile
  1638  0008' 6E00'              	movwf	(??_get16bitTMR0val+1)^0,c
  1639  000A' 6A00'              	clrf	??_get16bitTMR0val^0,c
  1640  000C' 5000'              	movf	??_get16bitTMR0val^0,w,c
  1641  000E' 1200'              	iorwf	get16bitTMR0val@timer_val^0,f,c
  1642  0010' 5000'              	movf	(??_get16bitTMR0val+1)^0,w,c
  1643  0012' 1200'              	iorwf	(get16bitTMR0val@timer_val+1)^0,f,c
  1644  0014'                    
  1645                           ;timers.c: 31:     return timer_val;
  1646  0014' C005' F001'        	movff	get16bitTMR0val@timer_val,?_get16bitTMR0val
  1647  0018' C006' F002'        	movff	get16bitTMR0val@timer_val+1,?_get16bitTMR0val+1
  1648  001C' 0012               	return		;funcret
  1649  001E'                    __end_of_get16bitTMR0val:
  1650                           	callstack 0
  1651                           
  1652 ;; *************** function _fullSpeedAhead *****************
  1653 ;; Defined at:
  1654 ;;		line 145 in file "dc_motor.c"
  1655 ;; Parameters:    Size  Location     Type
  1656 ;;  mL              2   20[COMRAM] PTR struct DC_motor
  1657 ;;		 -> main@motorL(9), 
  1658 ;;  mR              2   22[COMRAM] PTR struct DC_motor
  1659 ;;		 -> main@motorR(9), 
  1660 ;; Auto vars:     Size  Location     Type
  1661 ;;		None
  1662 ;; Return value:  Size  Location     Type
  1663 ;;                  1    wreg      void 
  1664 ;; Registers used:
  1665 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1666 ;; Tracked objects:
  1667 ;;		On entry : 0/0
  1668 ;;		On exit  : 0/0
  1669 ;;		Unchanged: 0/0
  1670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1671 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1673 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1674 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1675 ;;Total ram usage:        5 bytes
  1676 ;; Hardware stack levels used: 1
  1677 ;; Hardware stack levels required when called: 4
  1678 ;; This function calls:
  1679 ;;		_setMotorPWM
  1680 ;; This function is called by:
  1681 ;;		_main
  1682 ;; This function uses a non-reentrant model
  1683 ;;
  1684                           
  1685                           	psect	text6
  1686  0000'                    __ptext6:
  1687                           	callstack 0
  1688  0000'                    _fullSpeedAhead:
  1689                           	callstack 26
  1690  0000'                    
  1691                           ;dc_motor.c: 146:     mL->direction = 1;
  1692  0000' EE20 F001          	lfsr	2,1
  1693  0004' 5000'              	movf	fullSpeedAhead@mL^0,w,c
  1694  0006' 26D9               	addwf	fsr2l,f,c
  1695  0008' 5000'              	movf	(fullSpeedAhead@mL+1)^0,w,c
  1696  000A' 22DA               	addwfc	fsr2h,f,c
  1697  000C' 0E01               	movlw	1
  1698  000E' 6EDF               	movwf	indf2,c
  1699                           
  1700                           ;dc_motor.c: 147:     mR->direction = 1;
  1701  0010' EE20 F001          	lfsr	2,1
  1702  0014' 5000'              	movf	fullSpeedAhead@mR^0,w,c
  1703  0016' 26D9               	addwf	fsr2l,f,c
  1704  0018' 5000'              	movf	(fullSpeedAhead@mR+1)^0,w,c
  1705  001A' 22DA               	addwfc	fsr2h,f,c
  1706  001C' 0E01               	movlw	1
  1707  001E' 6EDF               	movwf	indf2,c
  1708                           
  1709                           ;dc_motor.c: 149:     while ((mL->power) < 100 || (mR->power) < 100){
  1710  0020' EF00' F000'        	goto	l193
  1711  0024'                    l1916:
  1712                           
  1713                           ;dc_motor.c: 150:         if ((mL->power) < 100) (mL->power) += 1;
  1714  0024' C014' FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1715  0028' C015' FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1716  002C' 0E64               	movlw	100
  1717  002E' 60DF               	cpfslt	indf2,c
  1718  0030' EF00' F000'        	goto	u821
  1719  0034' EF00' F000'        	goto	u820
  1720  0038'                    u821:
  1721  0038' EF00' F000'        	goto	l1920
  1722  003C'                    u820:
  1723  003C' C014' FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1724  0040' C015' FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1725  0044' 2ADF               	incf	indf2,f,c
  1726  0046'                    l1920:
  1727                           
  1728                           ;dc_motor.c: 151:         if ((mR->power) < 100) (mR->power) += 1;
  1729  0046' C016' FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1730  004A' C017' FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1731  004E' 0E64               	movlw	100
  1732  0050' 60DF               	cpfslt	indf2,c
  1733  0052' EF00' F000'        	goto	u831
  1734  0056' EF00' F000'        	goto	u830
  1735  005A'                    u831:
  1736  005A' EF00' F000'        	goto	l1924
  1737  005E'                    u830:
  1738  005E' C016' FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1739  0062' C017' FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1740  0066' 2ADF               	incf	indf2,f,c
  1741  0068'                    l1924:
  1742                           
  1743                           ;dc_motor.c: 153:         setMotorPWM(mL);
  1744  0068' C014' F00E'        	movff	fullSpeedAhead@mL,setMotorPWM@m
  1745  006C' C015' F00F'        	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  1746  0070' EC00' F000'        	call	_setMotorPWM	;wreg free
  1747  0074'                    
  1748                           ;dc_motor.c: 154:         setMotorPWM(mR);
  1749  0074' C016' F00E'        	movff	fullSpeedAhead@mR,setMotorPWM@m
  1750  0078' C017' F00F'        	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  1751  007C' EC00' F000'        	call	_setMotorPWM	;wreg free
  1752  0080'                    
  1753                           ;dc_motor.c: 155:         _delay((unsigned long)((1)*(64000000/4000.0)));
  1754  0080' 0E15               	movlw	21
  1755  0082' 6E00'              	movwf	??_fullSpeedAhead^0,c
  1756  0084' 0EC6               	movlw	198
  1757  0086'                    u1177:
  1758  0086' 2EE8               	decfsz	wreg,f,c
  1759  0088' D7FE               	bra	u1177
  1760  008A' 2E00'              	decfsz	??_fullSpeedAhead^0,f,c
  1761  008C' D7FC               	bra	u1177
  1762  008E' D000               	nop2	
  1763  0090'                    l193:
  1764                           
  1765                           ;dc_motor.c: 149:     while ((mL->power) < 100 || (mR->power) < 100){
  1766  0090' C014' FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1767  0094' C015' FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1768  0098' 0E63               	movlw	99
  1769  009A' 64DF               	cpfsgt	indf2,c
  1770  009C' EF00' F000'        	goto	u841
  1771  00A0' EF00' F000'        	goto	u840
  1772  00A4'                    u841:
  1773  00A4' EF00' F000'        	goto	l1916
  1774  00A8'                    u840:
  1775  00A8' C016' FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1776  00AC' C017' FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1777  00B0' 0E63               	movlw	99
  1778  00B2' 64DF               	cpfsgt	indf2,c
  1779  00B4' EF00' F000'        	goto	u851
  1780  00B8' EF00' F000'        	goto	u850
  1781  00BC'                    u851:
  1782  00BC' EF00' F000'        	goto	l1916
  1783  00C0'                    u850:
  1784  00C0' 0012               	return		;funcret
  1785  00C2'                    __end_of_fullSpeedAhead:
  1786                           	callstack 0
  1787                           
  1788 ;; *************** function _setMotorPWM *****************
  1789 ;; Defined at:
  1790 ;;		line 76 in file "dc_motor.c"
  1791 ;; Parameters:    Size  Location     Type
  1792 ;;  m               2   14[COMRAM] PTR struct DC_motor
  1793 ;;		 -> main@motorR(9), main@motorL(9), 
  1794 ;; Auto vars:     Size  Location     Type
  1795 ;;  negDuty         1   19[COMRAM] unsigned char 
  1796 ;;  posDuty         1   18[COMRAM] unsigned char 
  1797 ;; Return value:  Size  Location     Type
  1798 ;;                  1    wreg      void 
  1799 ;; Registers used:
  1800 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1801 ;; Tracked objects:
  1802 ;;		On entry : 0/0
  1803 ;;		On exit  : 0/0
  1804 ;;		Unchanged: 0/0
  1805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1806 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1807 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1808 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1809 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1810 ;;Total ram usage:        6 bytes
  1811 ;; Hardware stack levels used: 1
  1812 ;; Hardware stack levels required when called: 3
  1813 ;; This function calls:
  1814 ;;		___lwdiv
  1815 ;;		___wmul
  1816 ;; This function is called by:
  1817 ;;		_stop
  1818 ;;		_fullSpeedAhead
  1819 ;;		_turnLeft
  1820 ;;		_turnRight
  1821 ;; This function uses a non-reentrant model
  1822 ;;
  1823                           
  1824                           	psect	text7
  1825  0000'                    __ptext7:
  1826                           	callstack 0
  1827  0000'                    _setMotorPWM:
  1828                           	callstack 26
  1829  0000'                    
  1830                           ;dc_motor.c: 76: void setMotorPWM(struct DC_motor *m);dc_motor.c: 77: {;dc_motor.c: 78: 
      +                              unsigned char posDuty, negDuty;;dc_motor.c: 80:     if(m->brakemode) {
  1831  0000' EE20 F002          	lfsr	2,2
  1832  0004' 5000'              	movf	setMotorPWM@m^0,w,c
  1833  0006' 26D9               	addwf	fsr2l,f,c
  1834  0008' 5000'              	movf	(setMotorPWM@m+1)^0,w,c
  1835  000A' 22DA               	addwfc	fsr2h,f,c
  1836  000C' 50DF               	movf	indf2,w,c
  1837  000E' B4D8               	btfsc	status,2,c
  1838  0010' EF00' F000'        	goto	u701
  1839  0014' EF00' F000'        	goto	u700
  1840  0018'                    u701:
  1841  0018' EF00' F000'        	goto	l1820
  1842  001C'                    u700:
  1843  001C'                    
  1844                           ;dc_motor.c: 81:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  1845  001C' C00E' FFD9         	movff	setMotorPWM@m,fsr2l
  1846  0020' C00F' FFDA         	movff	setMotorPWM@m+1,fsr2h
  1847  0024' 50DF               	movf	indf2,w,c
  1848  0026' 6E00'              	movwf	??_setMotorPWM^0,c
  1849  0028' 5000'              	movf	??_setMotorPWM^0,w,c
  1850  002A' 6E00'              	movwf	___wmul@multiplier^0,c
  1851  002C' 6A00'              	clrf	(___wmul@multiplier+1)^0,c
  1852  002E' EE20 F003          	lfsr	2,3
  1853  0032' 5000'              	movf	setMotorPWM@m^0,w,c
  1854  0034' 26D9               	addwf	fsr2l,f,c
  1855  0036' 5000'              	movf	(setMotorPWM@m+1)^0,w,c
  1856  0038' 22DA               	addwfc	fsr2h,f,c
  1857  003A' CFDE F003'         	movff	postinc2,___wmul@multiplicand
  1858  003E' CFDD F004'         	movff	postdec2,___wmul@multiplicand+1
  1859  0042' EC00' F000'        	call	___wmul	;wreg free
  1860  0046' C001' F007'        	movff	?___wmul,___lwdiv@dividend
  1861  004A' C002' F008'        	movff	?___wmul+1,___lwdiv@dividend+1
  1862  004E' 0E00               	movlw	0
  1863  0050' 6E00'              	movwf	(___lwdiv@divisor+1)^0,c
  1864  0052' 0E64               	movlw	100
  1865  0054' 6E00'              	movwf	___lwdiv@divisor^0,c
  1866  0056' EC00' F000'        	call	___lwdiv	;wreg free
  1867  005A' EE20 F003          	lfsr	2,3
  1868  005E' 5000'              	movf	setMotorPWM@m^0,w,c
  1869  0060' 26D9               	addwf	fsr2l,f,c
  1870  0062' 5000'              	movf	(setMotorPWM@m+1)^0,w,c
  1871  0064' 22DA               	addwfc	fsr2h,f,c
  1872  0066' 50DF               	movf	indf2,w,c
  1873  0068' 6E00'              	movwf	(??_setMotorPWM+1)^0,c
  1874  006A' 5000'              	movf	?___lwdiv^0,w,c
  1875  006C' 5C00'              	subwf	(??_setMotorPWM+1)^0,w,c
  1876  006E' 6E00'              	movwf	setMotorPWM@posDuty^0,c
  1877  0070'                    
  1878                           ;dc_motor.c: 82:         negDuty=m->PWMperiod;
  1879  0070' EE20 F003          	lfsr	2,3
  1880  0074' 5000'              	movf	setMotorPWM@m^0,w,c
  1881  0076' 26D9               	addwf	fsr2l,f,c
  1882  0078' 5000'              	movf	(setMotorPWM@m+1)^0,w,c
  1883  007A' 22DA               	addwfc	fsr2h,f,c
  1884  007C' 50DF               	movf	indf2,w,c
  1885  007E' 6E00'              	movwf	setMotorPWM@negDuty^0,c
  1886                           
  1887                           ;dc_motor.c: 83:     }
  1888  0080' EF00' F000'        	goto	l1824
  1889  0084'                    l1820:
  1890                           
  1891                           ;dc_motor.c: 85:         posDuty=0;
  1892  0084' 0E00               	movlw	0
  1893  0086' 6E00'              	movwf	setMotorPWM@posDuty^0,c
  1894  0088'                    
  1895                           ;dc_motor.c: 86:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  1896  0088' C00E' FFD9         	movff	setMotorPWM@m,fsr2l
  1897  008C' C00F' FFDA         	movff	setMotorPWM@m+1,fsr2h
  1898  0090' 50DF               	movf	indf2,w,c
  1899  0092' 6E00'              	movwf	??_setMotorPWM^0,c
  1900  0094' 5000'              	movf	??_setMotorPWM^0,w,c
  1901  0096' 6E00'              	movwf	___wmul@multiplier^0,c
  1902  0098' 6A00'              	clrf	(___wmul@multiplier+1)^0,c
  1903  009A' EE20 F003          	lfsr	2,3
  1904  009E' 5000'              	movf	setMotorPWM@m^0,w,c
  1905  00A0' 26D9               	addwf	fsr2l,f,c
  1906  00A2' 5000'              	movf	(setMotorPWM@m+1)^0,w,c
  1907  00A4' 22DA               	addwfc	fsr2h,f,c
  1908  00A6' CFDE F003'         	movff	postinc2,___wmul@multiplicand
  1909  00AA' CFDD F004'         	movff	postdec2,___wmul@multiplicand+1
  1910  00AE' EC00' F000'        	call	___wmul	;wreg free
  1911  00B2' C001' F007'        	movff	?___wmul,___lwdiv@dividend
  1912  00B6' C002' F008'        	movff	?___wmul+1,___lwdiv@dividend+1
  1913  00BA' 0E00               	movlw	0
  1914  00BC' 6E00'              	movwf	(___lwdiv@divisor+1)^0,c
  1915  00BE' 0E64               	movlw	100
  1916  00C0' 6E00'              	movwf	___lwdiv@divisor^0,c
  1917  00C2' EC00' F000'        	call	___lwdiv	;wreg free
  1918  00C6' 5000'              	movf	?___lwdiv^0,w,c
  1919  00C8' 6E00'              	movwf	setMotorPWM@negDuty^0,c
  1920  00CA'                    l1824:
  1921                           
  1922                           ;dc_motor.c: 89:     if (m->direction) {
  1923  00CA' EE20 F001          	lfsr	2,1
  1924  00CE' 5000'              	movf	setMotorPWM@m^0,w,c
  1925  00D0' 26D9               	addwf	fsr2l,f,c
  1926  00D2' 5000'              	movf	(setMotorPWM@m+1)^0,w,c
  1927  00D4' 22DA               	addwfc	fsr2h,f,c
  1928  00D6' 50DF               	movf	indf2,w,c
  1929  00D8' B4D8               	btfsc	status,2,c
  1930  00DA' EF00' F000'        	goto	u711
  1931  00DE' EF00' F000'        	goto	u710
  1932  00E2'                    u711:
  1933  00E2' EF00' F000'        	goto	l1828
  1934  00E6'                    u710:
  1935  00E6'                    
  1936                           ;dc_motor.c: 90:         *(m->posDutyHighByte)=posDuty;
  1937  00E6' EE20 F005          	lfsr	2,5
  1938  00EA' 5000'              	movf	setMotorPWM@m^0,w,c
  1939  00EC' 26D9               	addwf	fsr2l,f,c
  1940  00EE' 5000'              	movf	(setMotorPWM@m+1)^0,w,c
  1941  00F0' 22DA               	addwfc	fsr2h,f,c
  1942  00F2' CFDE F010'         	movff	postinc2,??_setMotorPWM
  1943  00F6' CFDD F011'         	movff	postdec2,??_setMotorPWM+1
  1944  00FA' C010' FFD9         	movff	??_setMotorPWM,fsr2l
  1945  00FE' C011' FFDA         	movff	??_setMotorPWM+1,fsr2h
  1946  0102' C012' FFDF         	movff	setMotorPWM@posDuty,indf2
  1947                           
  1948                           ;dc_motor.c: 91:         *(m->negDutyHighByte)=negDuty;
  1949  0106' EE20 F007          	lfsr	2,7
  1950  010A' 5000'              	movf	setMotorPWM@m^0,w,c
  1951  010C' 26D9               	addwf	fsr2l,f,c
  1952  010E' 5000'              	movf	(setMotorPWM@m+1)^0,w,c
  1953  0110' 22DA               	addwfc	fsr2h,f,c
  1954  0112' CFDE F010'         	movff	postinc2,??_setMotorPWM
  1955  0116' CFDD F011'         	movff	postdec2,??_setMotorPWM+1
  1956  011A' C010' FFD9         	movff	??_setMotorPWM,fsr2l
  1957  011E' C011' FFDA         	movff	??_setMotorPWM+1,fsr2h
  1958  0122' C013' FFDF         	movff	setMotorPWM@negDuty,indf2
  1959                           
  1960                           ;dc_motor.c: 92:     } else {
  1961  0126' EF00' F000'        	goto	l166
  1962  012A'                    l1828:
  1963                           
  1964                           ;dc_motor.c: 93:         *(m->posDutyHighByte)=negDuty;
  1965  012A' EE20 F005          	lfsr	2,5
  1966  012E' 5000'              	movf	setMotorPWM@m^0,w,c
  1967  0130' 26D9               	addwf	fsr2l,f,c
  1968  0132' 5000'              	movf	(setMotorPWM@m+1)^0,w,c
  1969  0134' 22DA               	addwfc	fsr2h,f,c
  1970  0136' CFDE F010'         	movff	postinc2,??_setMotorPWM
  1971  013A' CFDD F011'         	movff	postdec2,??_setMotorPWM+1
  1972  013E' C010' FFD9         	movff	??_setMotorPWM,fsr2l
  1973  0142' C011' FFDA         	movff	??_setMotorPWM+1,fsr2h
  1974  0146' C013' FFDF         	movff	setMotorPWM@negDuty,indf2
  1975                           
  1976                           ;dc_motor.c: 94:         *(m->negDutyHighByte)=posDuty;
  1977  014A' EE20 F007          	lfsr	2,7
  1978  014E' 5000'              	movf	setMotorPWM@m^0,w,c
  1979  0150' 26D9               	addwf	fsr2l,f,c
  1980  0152' 5000'              	movf	(setMotorPWM@m+1)^0,w,c
  1981  0154' 22DA               	addwfc	fsr2h,f,c
  1982  0156' CFDE F010'         	movff	postinc2,??_setMotorPWM
  1983  015A' CFDD F011'         	movff	postdec2,??_setMotorPWM+1
  1984  015E' C010' FFD9         	movff	??_setMotorPWM,fsr2l
  1985  0162' C011' FFDA         	movff	??_setMotorPWM+1,fsr2h
  1986  0166' C012' FFDF         	movff	setMotorPWM@posDuty,indf2
  1987  016A'                    l166:
  1988  016A' 0012               	return		;funcret
  1989  016C'                    __end_of_setMotorPWM:
  1990                           	callstack 0
  1991                           
  1992 ;; *************** function ___wmul *****************
  1993 ;; Defined at:
  1994 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  1995 ;; Parameters:    Size  Location     Type
  1996 ;;  multiplier      2    1[COMRAM] unsigned int 
  1997 ;;  multiplicand    2    3[COMRAM] unsigned int 
  1998 ;; Auto vars:     Size  Location     Type
  1999 ;;  product         2    5[COMRAM] unsigned int 
  2000 ;; Return value:  Size  Location     Type
  2001 ;;                  2    1[COMRAM] unsigned int 
  2002 ;; Registers used:
  2003 ;;		wreg, status,2, status,0, prodl, prodh
  2004 ;; Tracked objects:
  2005 ;;		On entry : 0/0
  2006 ;;		On exit  : 0/0
  2007 ;;		Unchanged: 0/0
  2008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2009 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2010 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2012 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2013 ;;Total ram usage:        6 bytes
  2014 ;; Hardware stack levels used: 1
  2015 ;; Hardware stack levels required when called: 2
  2016 ;; This function calls:
  2017 ;;		Nothing
  2018 ;; This function is called by:
  2019 ;;		_setMotorPWM
  2020 ;; This function uses a non-reentrant model
  2021 ;;
  2022                           
  2023                           	psect	text8
  2024  0000'                    __ptext8:
  2025                           	callstack 0
  2026  0000'                    ___wmul:
  2027                           	callstack 26
  2028  0000' 5000'              	movf	___wmul@multiplier^0,w,c
  2029  0002' 0200'              	mulwf	___wmul@multiplicand^0,c
  2030  0004' CFF3 F005'         	movff	prodl,___wmul@product
  2031  0008' CFF4 F006'         	movff	prodh,___wmul@product+1
  2032  000C' 5000'              	movf	___wmul@multiplier^0,w,c
  2033  000E' 0200'              	mulwf	(___wmul@multiplicand+1)^0,c
  2034  0010' 50F3               	movf	243,w,c
  2035  0012' 2600'              	addwf	(___wmul@product+1)^0,f,c
  2036  0014' 5000'              	movf	(___wmul@multiplier+1)^0,w,c
  2037  0016' 0200'              	mulwf	___wmul@multiplicand^0,c
  2038  0018' 50F3               	movf	243,w,c
  2039  001A' 2600'              	addwf	(___wmul@product+1)^0,f,c
  2040  001C' C005' F001'        	movff	___wmul@product,?___wmul
  2041  0020' C006' F002'        	movff	___wmul@product+1,?___wmul+1
  2042  0024' 0012               	return		;funcret
  2043  0026'                    __end_of___wmul:
  2044                           	callstack 0
  2045                           
  2046 ;; *************** function ___lwdiv *****************
  2047 ;; Defined at:
  2048 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  2049 ;; Parameters:    Size  Location     Type
  2050 ;;  dividend        2    7[COMRAM] unsigned int 
  2051 ;;  divisor         2    9[COMRAM] unsigned int 
  2052 ;; Auto vars:     Size  Location     Type
  2053 ;;  quotient        2   11[COMRAM] unsigned int 
  2054 ;;  counter         1   13[COMRAM] unsigned char 
  2055 ;; Return value:  Size  Location     Type
  2056 ;;                  2    7[COMRAM] unsigned int 
  2057 ;; Registers used:
  2058 ;;		wreg, status,2, status,0
  2059 ;; Tracked objects:
  2060 ;;		On entry : 0/0
  2061 ;;		On exit  : 0/0
  2062 ;;		Unchanged: 0/0
  2063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2064 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2065 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2067 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2068 ;;Total ram usage:        7 bytes
  2069 ;; Hardware stack levels used: 1
  2070 ;; Hardware stack levels required when called: 2
  2071 ;; This function calls:
  2072 ;;		Nothing
  2073 ;; This function is called by:
  2074 ;;		_setMotorPWM
  2075 ;; This function uses a non-reentrant model
  2076 ;;
  2077                           
  2078                           	psect	text9
  2079  0000'                    __ptext9:
  2080                           	callstack 0
  2081  0000'                    ___lwdiv:
  2082                           	callstack 26
  2083  0000' 0E00               	movlw	0
  2084  0002' 6E00'              	movwf	(___lwdiv@quotient+1)^0,c
  2085  0004' 0E00               	movlw	0
  2086  0006' 6E00'              	movwf	___lwdiv@quotient^0,c
  2087  0008' 5000'              	movf	___lwdiv@divisor^0,w,c
  2088  000A' 1000'              	iorwf	(___lwdiv@divisor+1)^0,w,c
  2089  000C' B4D8               	btfsc	status,2,c
  2090  000E' EF00' F000'        	goto	u671
  2091  0012' EF00' F000'        	goto	u670
  2092  0016'                    u671:
  2093  0016' EF00' F000'        	goto	l964
  2094  001A'                    u670:
  2095  001A' 0E01               	movlw	1
  2096  001C' 6E00'              	movwf	___lwdiv@counter^0,c
  2097  001E' EF00' F000'        	goto	l1762
  2098  0022'                    l1760:
  2099  0022' 90D8               	bcf	status,0,c
  2100  0024' 3600'              	rlcf	___lwdiv@divisor^0,f,c
  2101  0026' 3600'              	rlcf	(___lwdiv@divisor+1)^0,f,c
  2102  0028' 2A00'              	incf	___lwdiv@counter^0,f,c
  2103  002A'                    l1762:
  2104  002A' AE00'              	btfss	(___lwdiv@divisor+1)^0,7,c
  2105  002C' EF00' F000'        	goto	u681
  2106  0030' EF00' F000'        	goto	u680
  2107  0034'                    u681:
  2108  0034' EF00' F000'        	goto	l1760
  2109  0038'                    u680:
  2110  0038'                    l1764:
  2111  0038' 90D8               	bcf	status,0,c
  2112  003A' 3600'              	rlcf	___lwdiv@quotient^0,f,c
  2113  003C' 3600'              	rlcf	(___lwdiv@quotient+1)^0,f,c
  2114  003E' 5000'              	movf	___lwdiv@divisor^0,w,c
  2115  0040' 5C00'              	subwf	___lwdiv@dividend^0,w,c
  2116  0042' 5000'              	movf	(___lwdiv@divisor+1)^0,w,c
  2117  0044' 5800'              	subwfb	(___lwdiv@dividend+1)^0,w,c
  2118  0046' A0D8               	btfss	status,0,c
  2119  0048' EF00' F000'        	goto	u691
  2120  004C' EF00' F000'        	goto	u690
  2121  0050'                    u691:
  2122  0050' EF00' F000'        	goto	l1772
  2123  0054'                    u690:
  2124  0054' 5000'              	movf	___lwdiv@divisor^0,w,c
  2125  0056' 5E00'              	subwf	___lwdiv@dividend^0,f,c
  2126  0058' 5000'              	movf	(___lwdiv@divisor+1)^0,w,c
  2127  005A' 5A00'              	subwfb	(___lwdiv@dividend+1)^0,f,c
  2128  005C' 8000'              	bsf	___lwdiv@quotient^0,0,c
  2129  005E'                    l1772:
  2130  005E' 90D8               	bcf	status,0,c
  2131  0060' 3200'              	rrcf	(___lwdiv@divisor+1)^0,f,c
  2132  0062' 3200'              	rrcf	___lwdiv@divisor^0,f,c
  2133  0064' 2E00'              	decfsz	___lwdiv@counter^0,f,c
  2134  0066' EF00' F000'        	goto	l1764
  2135  006A'                    l964:
  2136  006A' C00B' F007'        	movff	___lwdiv@quotient,?___lwdiv
  2137  006E' C00C' F008'        	movff	___lwdiv@quotient+1,?___lwdiv+1
  2138  0072' 0012               	return		;funcret
  2139  0074'                    __end_of___lwdiv:
  2140                           	callstack 0
  2141                           
  2142 ;; *************** function _color_read *****************
  2143 ;; Defined at:
  2144 ;;		line 44 in file "color.c"
  2145 ;; Parameters:    Size  Location     Type
  2146 ;;  p               2   12[COMRAM] PTR struct RGBC_val
  2147 ;;		 -> main@RGBC(8), 
  2148 ;; Auto vars:     Size  Location     Type
  2149 ;;		None
  2150 ;; Return value:  Size  Location     Type
  2151 ;;                  1    wreg      void 
  2152 ;; Registers used:
  2153 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2154 ;; Tracked objects:
  2155 ;;		On entry : 0/0
  2156 ;;		On exit  : 0/0
  2157 ;;		Unchanged: 0/0
  2158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2159 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2162 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2163 ;;Total ram usage:        2 bytes
  2164 ;; Hardware stack levels used: 1
  2165 ;; Hardware stack levels required when called: 5
  2166 ;; This function calls:
  2167 ;;		_color_read_Blue
  2168 ;;		_color_read_Clear
  2169 ;;		_color_read_Green
  2170 ;;		_color_read_Red
  2171 ;; This function is called by:
  2172 ;;		_main
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           	psect	text10
  2177  0000'                    __ptext10:
  2178                           	callstack 0
  2179  0000'                    _color_read:
  2180                           	callstack 25
  2181  0000'                    
  2182                           ;color.c: 45:     (p->R) = color_read_Red();
  2183  0000' EC00' F000'        	call	_color_read_Red	;wreg free
  2184  0004' C00C' FFD9         	movff	color_read@p,fsr2l
  2185  0008' C00D' FFDA         	movff	color_read@p+1,fsr2h
  2186  000C' C005' FFDE         	movff	?_color_read_Red,postinc2
  2187  0010' C006' FFDD         	movff	?_color_read_Red+1,postdec2
  2188                           
  2189                           ;color.c: 46:     (p->G) = color_read_Green();
  2190  0014' EC00' F000'        	call	_color_read_Green	;wreg free
  2191  0018' EE20 F002          	lfsr	2,2
  2192  001C' 5000'              	movf	color_read@p^0,w,c
  2193  001E' 26D9               	addwf	fsr2l,f,c
  2194  0020' 5000'              	movf	(color_read@p+1)^0,w,c
  2195  0022' 22DA               	addwfc	fsr2h,f,c
  2196  0024' C005' FFDE         	movff	?_color_read_Green,postinc2
  2197  0028' C006' FFDD         	movff	?_color_read_Green+1,postdec2
  2198                           
  2199                           ;color.c: 47:     (p->B) = color_read_Blue();
  2200  002C' EC00' F000'        	call	_color_read_Blue	;wreg free
  2201  0030' EE20 F004          	lfsr	2,4
  2202  0034' 5000'              	movf	color_read@p^0,w,c
  2203  0036' 26D9               	addwf	fsr2l,f,c
  2204  0038' 5000'              	movf	(color_read@p+1)^0,w,c
  2205  003A' 22DA               	addwfc	fsr2h,f,c
  2206  003C' C005' FFDE         	movff	?_color_read_Blue,postinc2
  2207  0040' C006' FFDD         	movff	?_color_read_Blue+1,postdec2
  2208                           
  2209                           ;color.c: 48:     (p->C) = color_read_Clear();
  2210  0044' EC00' F000'        	call	_color_read_Clear	;wreg free
  2211  0048' EE20 F006          	lfsr	2,6
  2212  004C' 5000'              	movf	color_read@p^0,w,c
  2213  004E' 26D9               	addwf	fsr2l,f,c
  2214  0050' 5000'              	movf	(color_read@p+1)^0,w,c
  2215  0052' 22DA               	addwfc	fsr2h,f,c
  2216  0054' C005' FFDE         	movff	?_color_read_Clear,postinc2
  2217  0058' C006' FFDD         	movff	?_color_read_Clear+1,postdec2
  2218  005C' 0012               	return		;funcret
  2219  005E'                    __end_of_color_read:
  2220                           	callstack 0
  2221                           
  2222 ;; *************** function _color_read_Red *****************
  2223 ;; Defined at:
  2224 ;;		line 64 in file "color.c"
  2225 ;; Parameters:    Size  Location     Type
  2226 ;;		None
  2227 ;; Auto vars:     Size  Location     Type
  2228 ;;  tmp             2   10[COMRAM] unsigned int 
  2229 ;; Return value:  Size  Location     Type
  2230 ;;                  2    5[COMRAM] unsigned int 
  2231 ;; Registers used:
  2232 ;;		wreg, status,2, status,0, cstack
  2233 ;; Tracked objects:
  2234 ;;		On entry : 0/0
  2235 ;;		On exit  : 0/0
  2236 ;;		Unchanged: 0/0
  2237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2238 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2239 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2240 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2241 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2242 ;;Total ram usage:        7 bytes
  2243 ;; Hardware stack levels used: 1
  2244 ;; Hardware stack levels required when called: 4
  2245 ;; This function calls:
  2246 ;;		_I2C_2_Master_Read
  2247 ;;		_I2C_2_Master_RepStart
  2248 ;;		_I2C_2_Master_Start
  2249 ;;		_I2C_2_Master_Stop
  2250 ;;		_I2C_2_Master_Write
  2251 ;; This function is called by:
  2252 ;;		_color_read
  2253 ;; This function uses a non-reentrant model
  2254 ;;
  2255                           
  2256                           	psect	text11
  2257  0000'                    __ptext11:
  2258                           	callstack 0
  2259  0000'                    _color_read_Red:
  2260                           	callstack 25
  2261  0000'                    
  2262                           ;color.c: 65:  unsigned int tmp;;color.c: 66:  I2C_2_Master_Start();
  2263  0000' EC00' F000'        	call	_I2C_2_Master_Start	;wreg free
  2264                           
  2265                           ;color.c: 67:  I2C_2_Master_Write(0x52 | 0x00);
  2266  0004' 0E52               	movlw	82
  2267  0006' EC00' F000'        	call	_I2C_2_Master_Write
  2268                           
  2269                           ;color.c: 68:  I2C_2_Master_Write(0xA0 | 0x16);
  2270  000A' 0EB6               	movlw	182
  2271  000C' EC00' F000'        	call	_I2C_2_Master_Write
  2272                           
  2273                           ;color.c: 69:  I2C_2_Master_RepStart();
  2274  0010' EC00' F000'        	call	_I2C_2_Master_RepStart	;wreg free
  2275                           
  2276                           ;color.c: 70:  I2C_2_Master_Write(0x52 | 0x01);
  2277  0014' 0E53               	movlw	83
  2278  0016' EC00' F000'        	call	_I2C_2_Master_Write
  2279                           
  2280                           ;color.c: 71:  tmp=I2C_2_Master_Read(1);
  2281  001A' 0E01               	movlw	1
  2282  001C' EC00' F000'        	call	_I2C_2_Master_Read
  2283  0020' 6E00'              	movwf	??_color_read_Red^0,c
  2284  0022' 5000'              	movf	??_color_read_Red^0,w,c
  2285  0024' 6E00'              	movwf	color_read_Red@tmp^0,c
  2286  0026' 6A00'              	clrf	(color_read_Red@tmp+1)^0,c
  2287                           
  2288                           ;color.c: 72:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  2289  0028' 0E00               	movlw	0
  2290  002A' EC00' F000'        	call	_I2C_2_Master_Read
  2291  002E' 6E00'              	movwf	??_color_read_Red^0,c
  2292  0030' 5000'              	movf	??_color_read_Red^0,w,c
  2293  0032' 6E00'              	movwf	(??_color_read_Red+2)^0,c
  2294  0034' 6A00'              	clrf	(??_color_read_Red+1)^0,c
  2295  0036' 5000'              	movf	color_read_Red@tmp^0,w,c
  2296  0038' 1000'              	iorwf	(??_color_read_Red+1)^0,w,c
  2297  003A' 6E00'              	movwf	color_read_Red@tmp^0,c
  2298  003C' 5000'              	movf	(color_read_Red@tmp+1)^0,w,c
  2299  003E' 1000'              	iorwf	(??_color_read_Red+2)^0,w,c
  2300  0040' 6E00'              	movwf	(color_read_Red@tmp+1)^0,c
  2301                           
  2302                           ;color.c: 73:  I2C_2_Master_Stop();
  2303  0042' EC00' F000'        	call	_I2C_2_Master_Stop	;wreg free
  2304  0046'                    
  2305                           ;color.c: 74:  return tmp;
  2306  0046' C00A' F005'        	movff	color_read_Red@tmp,?_color_read_Red
  2307  004A' C00B' F006'        	movff	color_read_Red@tmp+1,?_color_read_Red+1
  2308  004E' 0012               	return		;funcret
  2309  0050'                    __end_of_color_read_Red:
  2310                           	callstack 0
  2311                           
  2312 ;; *************** function _color_read_Green *****************
  2313 ;; Defined at:
  2314 ;;		line 77 in file "color.c"
  2315 ;; Parameters:    Size  Location     Type
  2316 ;;		None
  2317 ;; Auto vars:     Size  Location     Type
  2318 ;;  tmp             2   10[COMRAM] unsigned int 
  2319 ;; Return value:  Size  Location     Type
  2320 ;;                  2    5[COMRAM] unsigned int 
  2321 ;; Registers used:
  2322 ;;		wreg, status,2, status,0, cstack
  2323 ;; Tracked objects:
  2324 ;;		On entry : 0/0
  2325 ;;		On exit  : 0/0
  2326 ;;		Unchanged: 0/0
  2327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2328 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2329 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2330 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2331 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2332 ;;Total ram usage:        7 bytes
  2333 ;; Hardware stack levels used: 1
  2334 ;; Hardware stack levels required when called: 4
  2335 ;; This function calls:
  2336 ;;		_I2C_2_Master_Read
  2337 ;;		_I2C_2_Master_RepStart
  2338 ;;		_I2C_2_Master_Start
  2339 ;;		_I2C_2_Master_Stop
  2340 ;;		_I2C_2_Master_Write
  2341 ;; This function is called by:
  2342 ;;		_color_read
  2343 ;; This function uses a non-reentrant model
  2344 ;;
  2345                           
  2346                           	psect	text12
  2347  0000'                    __ptext12:
  2348                           	callstack 0
  2349  0000'                    _color_read_Green:
  2350                           	callstack 25
  2351  0000'                    
  2352                           ;color.c: 78:  unsigned int tmp;;color.c: 79:  I2C_2_Master_Start();
  2353  0000' EC00' F000'        	call	_I2C_2_Master_Start	;wreg free
  2354                           
  2355                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
  2356  0004' 0E52               	movlw	82
  2357  0006' EC00' F000'        	call	_I2C_2_Master_Write
  2358                           
  2359                           ;color.c: 81:  I2C_2_Master_Write(0xA0 | 0x18);
  2360  000A' 0EB8               	movlw	184
  2361  000C' EC00' F000'        	call	_I2C_2_Master_Write
  2362                           
  2363                           ;color.c: 82:  I2C_2_Master_RepStart();
  2364  0010' EC00' F000'        	call	_I2C_2_Master_RepStart	;wreg free
  2365                           
  2366                           ;color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
  2367  0014' 0E53               	movlw	83
  2368  0016' EC00' F000'        	call	_I2C_2_Master_Write
  2369                           
  2370                           ;color.c: 84:  tmp=I2C_2_Master_Read(1);
  2371  001A' 0E01               	movlw	1
  2372  001C' EC00' F000'        	call	_I2C_2_Master_Read
  2373  0020' 6E00'              	movwf	??_color_read_Green^0,c
  2374  0022' 5000'              	movf	??_color_read_Green^0,w,c
  2375  0024' 6E00'              	movwf	color_read_Green@tmp^0,c
  2376  0026' 6A00'              	clrf	(color_read_Green@tmp+1)^0,c
  2377                           
  2378                           ;color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  2379  0028' 0E00               	movlw	0
  2380  002A' EC00' F000'        	call	_I2C_2_Master_Read
  2381  002E' 6E00'              	movwf	??_color_read_Green^0,c
  2382  0030' 5000'              	movf	??_color_read_Green^0,w,c
  2383  0032' 6E00'              	movwf	(??_color_read_Green+2)^0,c
  2384  0034' 6A00'              	clrf	(??_color_read_Green+1)^0,c
  2385  0036' 5000'              	movf	color_read_Green@tmp^0,w,c
  2386  0038' 1000'              	iorwf	(??_color_read_Green+1)^0,w,c
  2387  003A' 6E00'              	movwf	color_read_Green@tmp^0,c
  2388  003C' 5000'              	movf	(color_read_Green@tmp+1)^0,w,c
  2389  003E' 1000'              	iorwf	(??_color_read_Green+2)^0,w,c
  2390  0040' 6E00'              	movwf	(color_read_Green@tmp+1)^0,c
  2391                           
  2392                           ;color.c: 86:  I2C_2_Master_Stop();
  2393  0042' EC00' F000'        	call	_I2C_2_Master_Stop	;wreg free
  2394  0046'                    
  2395                           ;color.c: 87:  return tmp;
  2396  0046' C00A' F005'        	movff	color_read_Green@tmp,?_color_read_Green
  2397  004A' C00B' F006'        	movff	color_read_Green@tmp+1,?_color_read_Green+1
  2398  004E' 0012               	return		;funcret
  2399  0050'                    __end_of_color_read_Green:
  2400                           	callstack 0
  2401                           
  2402 ;; *************** function _color_read_Clear *****************
  2403 ;; Defined at:
  2404 ;;		line 51 in file "color.c"
  2405 ;; Parameters:    Size  Location     Type
  2406 ;;		None
  2407 ;; Auto vars:     Size  Location     Type
  2408 ;;  tmp             2   10[COMRAM] unsigned int 
  2409 ;; Return value:  Size  Location     Type
  2410 ;;                  2    5[COMRAM] unsigned int 
  2411 ;; Registers used:
  2412 ;;		wreg, status,2, status,0, cstack
  2413 ;; Tracked objects:
  2414 ;;		On entry : 0/0
  2415 ;;		On exit  : 0/0
  2416 ;;		Unchanged: 0/0
  2417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2418 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2419 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2420 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2421 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2422 ;;Total ram usage:        7 bytes
  2423 ;; Hardware stack levels used: 1
  2424 ;; Hardware stack levels required when called: 4
  2425 ;; This function calls:
  2426 ;;		_I2C_2_Master_Read
  2427 ;;		_I2C_2_Master_RepStart
  2428 ;;		_I2C_2_Master_Start
  2429 ;;		_I2C_2_Master_Stop
  2430 ;;		_I2C_2_Master_Write
  2431 ;; This function is called by:
  2432 ;;		_color_read
  2433 ;;		_main
  2434 ;; This function uses a non-reentrant model
  2435 ;;
  2436                           
  2437                           	psect	text13
  2438  0000'                    __ptext13:
  2439                           	callstack 0
  2440  0000'                    _color_read_Clear:
  2441                           	callstack 26
  2442  0000'                    
  2443                           ;color.c: 52:  unsigned int tmp;;color.c: 53:  I2C_2_Master_Start();
  2444  0000' EC00' F000'        	call	_I2C_2_Master_Start	;wreg free
  2445                           
  2446                           ;color.c: 54:  I2C_2_Master_Write(0x52 | 0x00);
  2447  0004' 0E52               	movlw	82
  2448  0006' EC00' F000'        	call	_I2C_2_Master_Write
  2449                           
  2450                           ;color.c: 55:  I2C_2_Master_Write(0xA0 | 0x14);
  2451  000A' 0EB4               	movlw	180
  2452  000C' EC00' F000'        	call	_I2C_2_Master_Write
  2453                           
  2454                           ;color.c: 56:  I2C_2_Master_RepStart();
  2455  0010' EC00' F000'        	call	_I2C_2_Master_RepStart	;wreg free
  2456                           
  2457                           ;color.c: 57:  I2C_2_Master_Write(0x52 | 0x01);
  2458  0014' 0E53               	movlw	83
  2459  0016' EC00' F000'        	call	_I2C_2_Master_Write
  2460                           
  2461                           ;color.c: 58:  tmp=I2C_2_Master_Read(1);
  2462  001A' 0E01               	movlw	1
  2463  001C' EC00' F000'        	call	_I2C_2_Master_Read
  2464  0020' 6E00'              	movwf	??_color_read_Clear^0,c
  2465  0022' 5000'              	movf	??_color_read_Clear^0,w,c
  2466  0024' 6E00'              	movwf	color_read_Clear@tmp^0,c
  2467  0026' 6A00'              	clrf	(color_read_Clear@tmp+1)^0,c
  2468                           
  2469                           ;color.c: 59:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  2470  0028' 0E00               	movlw	0
  2471  002A' EC00' F000'        	call	_I2C_2_Master_Read
  2472  002E' 6E00'              	movwf	??_color_read_Clear^0,c
  2473  0030' 5000'              	movf	??_color_read_Clear^0,w,c
  2474  0032' 6E00'              	movwf	(??_color_read_Clear+2)^0,c
  2475  0034' 6A00'              	clrf	(??_color_read_Clear+1)^0,c
  2476  0036' 5000'              	movf	color_read_Clear@tmp^0,w,c
  2477  0038' 1000'              	iorwf	(??_color_read_Clear+1)^0,w,c
  2478  003A' 6E00'              	movwf	color_read_Clear@tmp^0,c
  2479  003C' 5000'              	movf	(color_read_Clear@tmp+1)^0,w,c
  2480  003E' 1000'              	iorwf	(??_color_read_Clear+2)^0,w,c
  2481  0040' 6E00'              	movwf	(color_read_Clear@tmp+1)^0,c
  2482                           
  2483                           ;color.c: 60:  I2C_2_Master_Stop();
  2484  0042' EC00' F000'        	call	_I2C_2_Master_Stop	;wreg free
  2485  0046'                    
  2486                           ;color.c: 61:  return tmp;
  2487  0046' C00A' F005'        	movff	color_read_Clear@tmp,?_color_read_Clear
  2488  004A' C00B' F006'        	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  2489  004E' 0012               	return		;funcret
  2490  0050'                    __end_of_color_read_Clear:
  2491                           	callstack 0
  2492                           
  2493 ;; *************** function _color_read_Blue *****************
  2494 ;; Defined at:
  2495 ;;		line 90 in file "color.c"
  2496 ;; Parameters:    Size  Location     Type
  2497 ;;		None
  2498 ;; Auto vars:     Size  Location     Type
  2499 ;;  tmp             2   10[COMRAM] unsigned int 
  2500 ;; Return value:  Size  Location     Type
  2501 ;;                  2    5[COMRAM] unsigned int 
  2502 ;; Registers used:
  2503 ;;		wreg, status,2, status,0, cstack
  2504 ;; Tracked objects:
  2505 ;;		On entry : 0/0
  2506 ;;		On exit  : 0/0
  2507 ;;		Unchanged: 0/0
  2508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2509 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2510 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2511 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2512 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2513 ;;Total ram usage:        7 bytes
  2514 ;; Hardware stack levels used: 1
  2515 ;; Hardware stack levels required when called: 4
  2516 ;; This function calls:
  2517 ;;		_I2C_2_Master_Read
  2518 ;;		_I2C_2_Master_RepStart
  2519 ;;		_I2C_2_Master_Start
  2520 ;;		_I2C_2_Master_Stop
  2521 ;;		_I2C_2_Master_Write
  2522 ;; This function is called by:
  2523 ;;		_color_read
  2524 ;; This function uses a non-reentrant model
  2525 ;;
  2526                           
  2527                           	psect	text14
  2528  0000'                    __ptext14:
  2529                           	callstack 0
  2530  0000'                    _color_read_Blue:
  2531                           	callstack 25
  2532  0000'                    
  2533                           ;color.c: 91:  unsigned int tmp;;color.c: 92:  I2C_2_Master_Start();
  2534  0000' EC00' F000'        	call	_I2C_2_Master_Start	;wreg free
  2535                           
  2536                           ;color.c: 93:  I2C_2_Master_Write(0x52 | 0x00);
  2537  0004' 0E52               	movlw	82
  2538  0006' EC00' F000'        	call	_I2C_2_Master_Write
  2539                           
  2540                           ;color.c: 94:  I2C_2_Master_Write(0xA0 | 0x1A);
  2541  000A' 0EBA               	movlw	186
  2542  000C' EC00' F000'        	call	_I2C_2_Master_Write
  2543                           
  2544                           ;color.c: 95:  I2C_2_Master_RepStart();
  2545  0010' EC00' F000'        	call	_I2C_2_Master_RepStart	;wreg free
  2546                           
  2547                           ;color.c: 96:  I2C_2_Master_Write(0x52 | 0x01);
  2548  0014' 0E53               	movlw	83
  2549  0016' EC00' F000'        	call	_I2C_2_Master_Write
  2550                           
  2551                           ;color.c: 97:  tmp=I2C_2_Master_Read(1);
  2552  001A' 0E01               	movlw	1
  2553  001C' EC00' F000'        	call	_I2C_2_Master_Read
  2554  0020' 6E00'              	movwf	??_color_read_Blue^0,c
  2555  0022' 5000'              	movf	??_color_read_Blue^0,w,c
  2556  0024' 6E00'              	movwf	color_read_Blue@tmp^0,c
  2557  0026' 6A00'              	clrf	(color_read_Blue@tmp+1)^0,c
  2558                           
  2559                           ;color.c: 98:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  2560  0028' 0E00               	movlw	0
  2561  002A' EC00' F000'        	call	_I2C_2_Master_Read
  2562  002E' 6E00'              	movwf	??_color_read_Blue^0,c
  2563  0030' 5000'              	movf	??_color_read_Blue^0,w,c
  2564  0032' 6E00'              	movwf	(??_color_read_Blue+2)^0,c
  2565  0034' 6A00'              	clrf	(??_color_read_Blue+1)^0,c
  2566  0036' 5000'              	movf	color_read_Blue@tmp^0,w,c
  2567  0038' 1000'              	iorwf	(??_color_read_Blue+1)^0,w,c
  2568  003A' 6E00'              	movwf	color_read_Blue@tmp^0,c
  2569  003C' 5000'              	movf	(color_read_Blue@tmp+1)^0,w,c
  2570  003E' 1000'              	iorwf	(??_color_read_Blue+2)^0,w,c
  2571  0040' 6E00'              	movwf	(color_read_Blue@tmp+1)^0,c
  2572                           
  2573                           ;color.c: 99:  I2C_2_Master_Stop();
  2574  0042' EC00' F000'        	call	_I2C_2_Master_Stop	;wreg free
  2575  0046'                    
  2576                           ;color.c: 100:  return tmp;
  2577  0046' C00A' F005'        	movff	color_read_Blue@tmp,?_color_read_Blue
  2578  004A' C00B' F006'        	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  2579  004E' 0012               	return		;funcret
  2580  0050'                    __end_of_color_read_Blue:
  2581                           	callstack 0
  2582                           
  2583 ;; *************** function _I2C_2_Master_RepStart *****************
  2584 ;; Defined at:
  2585 ;;		line 30 in file "i2c.c"
  2586 ;; Parameters:    Size  Location     Type
  2587 ;;		None
  2588 ;; Auto vars:     Size  Location     Type
  2589 ;;		None
  2590 ;; Return value:  Size  Location     Type
  2591 ;;                  1    wreg      void 
  2592 ;; Registers used:
  2593 ;;		wreg, status,2, status,0, cstack
  2594 ;; Tracked objects:
  2595 ;;		On entry : 0/0
  2596 ;;		On exit  : 0/0
  2597 ;;		Unchanged: 0/0
  2598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2603 ;;Total ram usage:        0 bytes
  2604 ;; Hardware stack levels used: 1
  2605 ;; Hardware stack levels required when called: 3
  2606 ;; This function calls:
  2607 ;;		_I2C_2_Master_Idle
  2608 ;; This function is called by:
  2609 ;;		_color_read_Clear
  2610 ;;		_color_read_Red
  2611 ;;		_color_read_Green
  2612 ;;		_color_read_Blue
  2613 ;; This function uses a non-reentrant model
  2614 ;;
  2615                           
  2616                           	psect	text15
  2617  0000'                    __ptext15:
  2618                           	callstack 0
  2619  0000'                    _I2C_2_Master_RepStart:
  2620                           	callstack 26
  2621  0000'                    
  2622                           ;i2c.c: 31:   I2C_2_Master_Idle();
  2623  0000' EC00' F000'        	call	_I2C_2_Master_Idle	;wreg free
  2624  0004'                    
  2625                           ;i2c.c: 32:   SSP2CON2bits.RSEN = 1;
  2626  0004' 010E               	movlb	14	; () banked
  2627  0006' 83DA               	bsf	218,1,b	;volatile
  2628  0008'                    
  2629                           ; BSR set to: 14
  2630  0008' 0012               	return		;funcret
  2631  000A'                    __end_of_I2C_2_Master_RepStart:
  2632                           	callstack 0
  2633                           
  2634 ;; *************** function _I2C_2_Master_Read *****************
  2635 ;; Defined at:
  2636 ;;		line 45 in file "i2c.c"
  2637 ;; Parameters:    Size  Location     Type
  2638 ;;  ack             1    wreg     unsigned char 
  2639 ;; Auto vars:     Size  Location     Type
  2640 ;;  ack             1    3[COMRAM] unsigned char 
  2641 ;;  tmp             1    4[COMRAM] unsigned char 
  2642 ;; Return value:  Size  Location     Type
  2643 ;;                  1    wreg      unsigned char 
  2644 ;; Registers used:
  2645 ;;		wreg, status,2, status,0, cstack
  2646 ;; Tracked objects:
  2647 ;;		On entry : 0/0
  2648 ;;		On exit  : 0/0
  2649 ;;		Unchanged: 0/0
  2650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2652 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2653 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2654 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2655 ;;Total ram usage:        3 bytes
  2656 ;; Hardware stack levels used: 1
  2657 ;; Hardware stack levels required when called: 3
  2658 ;; This function calls:
  2659 ;;		_I2C_2_Master_Idle
  2660 ;; This function is called by:
  2661 ;;		_color_read_Clear
  2662 ;;		_color_read_Red
  2663 ;;		_color_read_Green
  2664 ;;		_color_read_Blue
  2665 ;; This function uses a non-reentrant model
  2666 ;;
  2667                           
  2668                           	psect	text16
  2669  0000'                    __ptext16:
  2670                           	callstack 0
  2671  0000'                    _I2C_2_Master_Read:
  2672                           	callstack 26
  2673                           
  2674                           ; BSR set to: 14
  2675                           ;incstack = 0
  2676                           ;I2C_2_Master_Read@ack stored from wreg
  2677  0000' 6E00'              	movwf	I2C_2_Master_Read@ack^0,c
  2678  0002'                    
  2679                           ;i2c.c: 46:   unsigned char tmp;;i2c.c: 47:   I2C_2_Master_Idle();
  2680  0002' EC00' F000'        	call	_I2C_2_Master_Idle	;wreg free
  2681  0006'                    
  2682                           ;i2c.c: 48:   SSP2CON2bits.RCEN = 1;
  2683  0006' 010E               	movlb	14	; () banked
  2684  0008' 87DA               	bsf	218,3,b	;volatile
  2685                           
  2686                           ;i2c.c: 49:   I2C_2_Master_Idle();
  2687  000A' EC00' F000'        	call	_I2C_2_Master_Idle	;wreg free
  2688  000E'                    
  2689                           ;i2c.c: 50:   tmp = SSP2BUF;
  2690  000E' CED5 F004'         	movff	3797,I2C_2_Master_Read@tmp	;volatile
  2691                           
  2692                           ;i2c.c: 51:   I2C_2_Master_Idle();
  2693  0012' EC00' F000'        	call	_I2C_2_Master_Idle	;wreg free
  2694  0016'                    
  2695                           ;i2c.c: 52:   SSP2CON2bits.ACKDT = !ack;
  2696  0016' 5000'              	movf	I2C_2_Master_Read@ack^0,w,c
  2697  0018' B4D8               	btfsc	status,2,c
  2698  001A' EF00' F000'        	goto	u651
  2699  001E' EF00' F000'        	goto	u650
  2700  0022'                    u651:
  2701  0022' 6A00'              	clrf	??_I2C_2_Master_Read^0,c
  2702  0024' 2A00'              	incf	??_I2C_2_Master_Read^0,f,c
  2703  0026' EF00' F000'        	goto	u668
  2704  002A'                    u650:
  2705  002A' 6A00'              	clrf	??_I2C_2_Master_Read^0,c
  2706  002C'                    u668:
  2707  002C' 3A00'              	swapf	??_I2C_2_Master_Read^0,f,c
  2708  002E' 4600'              	rlncf	??_I2C_2_Master_Read^0,f,c
  2709  0030' 010E               	movlb	14	; () banked
  2710  0032' 51DA               	movf	218,w,b	;volatile
  2711  0034' 1800'              	xorwf	??_I2C_2_Master_Read^0,w,c
  2712  0036' 0BDF               	andlw	-33
  2713  0038' 1800'              	xorwf	??_I2C_2_Master_Read^0,w,c
  2714  003A' 6FDA               	movwf	218,b	;volatile
  2715  003C'                    
  2716                           ; BSR set to: 14
  2717                           ;i2c.c: 53:   SSP2CON2bits.ACKEN = 1;
  2718  003C' 89DA               	bsf	218,4,b	;volatile
  2719  003E'                    
  2720                           ; BSR set to: 14
  2721                           ;i2c.c: 54:   return tmp;
  2722  003E' 5000'              	movf	I2C_2_Master_Read@tmp^0,w,c
  2723  0040'                    
  2724                           ; BSR set to: 14
  2725  0040' 0012               	return		;funcret
  2726  0042'                    __end_of_I2C_2_Master_Read:
  2727                           	callstack 0
  2728                           
  2729 ;; *************** function _color_click_toggleLED *****************
  2730 ;; Defined at:
  2731 ;;		line 106 in file "color.c"
  2732 ;; Parameters:    Size  Location     Type
  2733 ;;		None
  2734 ;; Auto vars:     Size  Location     Type
  2735 ;;		None
  2736 ;; Return value:  Size  Location     Type
  2737 ;;                  1    wreg      void 
  2738 ;; Registers used:
  2739 ;;		wreg, status,2, status,0
  2740 ;; Tracked objects:
  2741 ;;		On entry : 0/0
  2742 ;;		On exit  : 0/0
  2743 ;;		Unchanged: 0/0
  2744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2747 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2748 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2749 ;;Total ram usage:        1 bytes
  2750 ;; Hardware stack levels used: 1
  2751 ;; Hardware stack levels required when called: 2
  2752 ;; This function calls:
  2753 ;;		Nothing
  2754 ;; This function is called by:
  2755 ;;		_main
  2756 ;; This function uses a non-reentrant model
  2757 ;;
  2758                           
  2759                           	psect	text17
  2760  0000'                    __ptext17:
  2761                           	callstack 0
  2762  0000'                    _color_click_toggleLED:
  2763                           	callstack 28
  2764  0000'                    
  2765                           ;color.c: 107:     LATGbits.LATG0 = !LATGbits.LATG0;
  2766  0000' A07F               	btfss	127,0,c	;volatile
  2767  0002' EF00' F000'        	goto	u721
  2768  0006' EF00' F000'        	goto	u720
  2769  000A'                    u721:
  2770  000A' 6A00'              	clrf	??_color_click_toggleLED^0,c
  2771  000C' 2A00'              	incf	??_color_click_toggleLED^0,f,c
  2772  000E' EF00' F000'        	goto	u738
  2773  0012'                    u720:
  2774  0012' 6A00'              	clrf	??_color_click_toggleLED^0,c
  2775  0014'                    u738:
  2776  0014' 507F               	movf	127,w,c	;volatile
  2777  0016' 1800'              	xorwf	??_color_click_toggleLED^0,w,c
  2778  0018' 0BFE               	andlw	-2
  2779  001A' 1800'              	xorwf	??_color_click_toggleLED^0,w,c
  2780  001C' 6E7F               	movwf	127,c	;volatile
  2781                           
  2782                           ;color.c: 108:     LATAbits.LATA3 = !LATAbits.LATA3;
  2783  001E' A679               	btfss	121,3,c	;volatile
  2784  0020' EF00' F000'        	goto	u741
  2785  0024' EF00' F000'        	goto	u740
  2786  0028'                    u741:
  2787  0028' 6A00'              	clrf	??_color_click_toggleLED^0,c
  2788  002A' 2A00'              	incf	??_color_click_toggleLED^0,f,c
  2789  002C' EF00' F000'        	goto	u758
  2790  0030'                    u740:
  2791  0030' 6A00'              	clrf	??_color_click_toggleLED^0,c
  2792  0032'                    u758:
  2793  0032' 4600'              	rlncf	??_color_click_toggleLED^0,f,c
  2794  0034' 4600'              	rlncf	??_color_click_toggleLED^0,f,c
  2795  0036' 4600'              	rlncf	??_color_click_toggleLED^0,f,c
  2796  0038' 5079               	movf	121,w,c	;volatile
  2797  003A' 1800'              	xorwf	??_color_click_toggleLED^0,w,c
  2798  003C' 0BF7               	andlw	-9
  2799  003E' 1800'              	xorwf	??_color_click_toggleLED^0,w,c
  2800  0040' 6E79               	movwf	121,c	;volatile
  2801                           
  2802                           ;color.c: 109:     LATEbits.LATE7 = !LATEbits.LATE7;
  2803  0042' AE7D               	btfss	125,7,c	;volatile
  2804  0044' EF00' F000'        	goto	u761
  2805  0048' EF00' F000'        	goto	u760
  2806  004C'                    u761:
  2807  004C' 6A00'              	clrf	??_color_click_toggleLED^0,c
  2808  004E' 2A00'              	incf	??_color_click_toggleLED^0,f,c
  2809  0050' EF00' F000'        	goto	u778
  2810  0054'                    u760:
  2811  0054' 6A00'              	clrf	??_color_click_toggleLED^0,c
  2812  0056'                    u778:
  2813  0056' 3200'              	rrcf	??_color_click_toggleLED^0,f,c
  2814  0058' 3200'              	rrcf	??_color_click_toggleLED^0,f,c
  2815  005A' 507D               	movf	125,w,c	;volatile
  2816  005C' 1800'              	xorwf	??_color_click_toggleLED^0,w,c
  2817  005E' 0B7F               	andlw	-129
  2818  0060' 1800'              	xorwf	??_color_click_toggleLED^0,w,c
  2819  0062' 6E7D               	movwf	125,c	;volatile
  2820  0064' 0012               	return		;funcret
  2821  0066'                    __end_of_color_click_toggleLED:
  2822                           	callstack 0
  2823                           
  2824 ;; *************** function _color_click_init *****************
  2825 ;; Defined at:
  2826 ;;		line 5 in file "color.c"
  2827 ;; Parameters:    Size  Location     Type
  2828 ;;		None
  2829 ;; Auto vars:     Size  Location     Type
  2830 ;;		None
  2831 ;; Return value:  Size  Location     Type
  2832 ;;                  1    wreg      void 
  2833 ;; Registers used:
  2834 ;;		wreg, status,2, status,0, cstack
  2835 ;; Tracked objects:
  2836 ;;		On entry : 0/0
  2837 ;;		On exit  : 0/0
  2838 ;;		Unchanged: 0/0
  2839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2842 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2843 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2844 ;;Total ram usage:        1 bytes
  2845 ;; Hardware stack levels used: 1
  2846 ;; Hardware stack levels required when called: 5
  2847 ;; This function calls:
  2848 ;;		_I2C_2_Master_Init
  2849 ;;		_color_writetoaddr
  2850 ;; This function is called by:
  2851 ;;		_main
  2852 ;; This function uses a non-reentrant model
  2853 ;;
  2854                           
  2855                           	psect	text18
  2856  0000'                    __ptext18:
  2857                           	callstack 0
  2858  0000'                    _color_click_init:
  2859                           	callstack 25
  2860  0000'                    
  2861                           ;color.c: 7:     I2C_2_Master_Init();
  2862  0000' EC00' F000'        	call	_I2C_2_Master_Init	;wreg free
  2863  0004'                    
  2864                           ;color.c: 8:  color_writetoaddr(0x00, 0x01);
  2865  0004' 0E01               	movlw	1
  2866  0006' 6E00'              	movwf	color_writetoaddr@value^0,c
  2867  0008' 0E00               	movlw	0
  2868  000A' EC00' F000'        	call	_color_writetoaddr
  2869  000E'                    
  2870                           ;color.c: 9:     _delay((unsigned long)((3)*(64000000/4000.0)));
  2871  000E' 0E3F               	movlw	63
  2872  0010' 6E00'              	movwf	??_color_click_init^0,c
  2873  0012' 0E55               	movlw	85
  2874  0014'                    u1187:
  2875  0014' 2EE8               	decfsz	wreg,f,c
  2876  0016' D7FE               	bra	u1187
  2877  0018' 2E00'              	decfsz	??_color_click_init^0,f,c
  2878  001A' D7FC               	bra	u1187
  2879  001C' 0000               	nop	
  2880  001E'                    
  2881                           ;color.c: 10:  color_writetoaddr(0x00, 0x03);
  2882  001E' 0E03               	movlw	3
  2883  0020' 6E00'              	movwf	color_writetoaddr@value^0,c
  2884  0022' 0E00               	movlw	0
  2885  0024' EC00' F000'        	call	_color_writetoaddr
  2886  0028'                    
  2887                           ;color.c: 11:  color_writetoaddr(0x01, 0xD5);
  2888  0028' 0ED5               	movlw	213
  2889  002A' 6E00'              	movwf	color_writetoaddr@value^0,c
  2890  002C' 0E01               	movlw	1
  2891  002E' EC00' F000'        	call	_color_writetoaddr
  2892  0032'                    
  2893                           ;color.c: 12:     color_writetoaddr(0x03, 0xFF);
  2894  0032' 0EFF               	movlw	255
  2895  0034' 6E00'              	movwf	color_writetoaddr@value^0,c
  2896  0036' 0E03               	movlw	3
  2897  0038' EC00' F000'        	call	_color_writetoaddr
  2898  003C'                    
  2899                           ;color.c: 24:     LATGbits.LATG0=0;
  2900  003C' 907F               	bcf	127,0,c	;volatile
  2901  003E'                    
  2902                           ;color.c: 25:     LATAbits.LATA3=0;
  2903  003E' 9679               	bcf	121,3,c	;volatile
  2904  0040'                    
  2905                           ;color.c: 26:     LATEbits.LATE7=0;
  2906  0040' 9E7D               	bcf	125,7,c	;volatile
  2907  0042'                    
  2908                           ;color.c: 29:     TRISGbits.TRISG0=0;
  2909  0042' 9087               	bcf	135,0,c	;volatile
  2910  0044'                    
  2911                           ;color.c: 30:     TRISAbits.TRISA3=0;
  2912  0044' 9681               	bcf	129,3,c	;volatile
  2913  0046'                    
  2914                           ;color.c: 31:     TRISEbits.TRISE7=0;
  2915  0046' 9E85               	bcf	133,7,c	;volatile
  2916  0048' 0012               	return		;funcret
  2917  004A'                    __end_of_color_click_init:
  2918                           	callstack 0
  2919                           
  2920 ;; *************** function _color_writetoaddr *****************
  2921 ;; Defined at:
  2922 ;;		line 35 in file "color.c"
  2923 ;; Parameters:    Size  Location     Type
  2924 ;;  address         1    wreg     unsigned char 
  2925 ;;  value           1    3[COMRAM] unsigned char 
  2926 ;; Auto vars:     Size  Location     Type
  2927 ;;  address         1    4[COMRAM] unsigned char 
  2928 ;; Return value:  Size  Location     Type
  2929 ;;                  1    wreg      void 
  2930 ;; Registers used:
  2931 ;;		wreg, status,2, status,0, cstack
  2932 ;; Tracked objects:
  2933 ;;		On entry : 0/0
  2934 ;;		On exit  : 0/0
  2935 ;;		Unchanged: 0/0
  2936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2937 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2938 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2940 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2941 ;;Total ram usage:        2 bytes
  2942 ;; Hardware stack levels used: 1
  2943 ;; Hardware stack levels required when called: 4
  2944 ;; This function calls:
  2945 ;;		_I2C_2_Master_Start
  2946 ;;		_I2C_2_Master_Stop
  2947 ;;		_I2C_2_Master_Write
  2948 ;; This function is called by:
  2949 ;;		_color_click_init
  2950 ;; This function uses a non-reentrant model
  2951 ;;
  2952                           
  2953                           	psect	text19
  2954  0000'                    __ptext19:
  2955                           	callstack 0
  2956  0000'                    _color_writetoaddr:
  2957                           	callstack 25
  2958                           
  2959                           ;incstack = 0
  2960                           ;color_writetoaddr@address stored from wreg
  2961  0000' 6E00'              	movwf	color_writetoaddr@address^0,c
  2962  0002'                    
  2963                           ;color.c: 36:     I2C_2_Master_Start();
  2964  0002' EC00' F000'        	call	_I2C_2_Master_Start	;wreg free
  2965                           
  2966                           ;color.c: 37:     I2C_2_Master_Write(0x52 | 0x00);
  2967  0006' 0E52               	movlw	82
  2968  0008' EC00' F000'        	call	_I2C_2_Master_Write
  2969                           
  2970                           ;color.c: 38:     I2C_2_Master_Write(0x80 | address);
  2971  000C' 5000'              	movf	color_writetoaddr@address^0,w,c
  2972  000E' 0980               	iorlw	128
  2973  0010' EC00' F000'        	call	_I2C_2_Master_Write
  2974                           
  2975                           ;color.c: 39:     I2C_2_Master_Write(value);
  2976  0014' 5000'              	movf	color_writetoaddr@value^0,w,c
  2977  0016' EC00' F000'        	call	_I2C_2_Master_Write
  2978                           
  2979                           ;color.c: 40:     I2C_2_Master_Stop();
  2980  001A' EC00' F000'        	call	_I2C_2_Master_Stop	;wreg free
  2981  001E' 0012               	return		;funcret
  2982  0020'                    __end_of_color_writetoaddr:
  2983                           	callstack 0
  2984                           
  2985 ;; *************** function _I2C_2_Master_Write *****************
  2986 ;; Defined at:
  2987 ;;		line 40 in file "i2c.c"
  2988 ;; Parameters:    Size  Location     Type
  2989 ;;  data_byte       1    wreg     unsigned char 
  2990 ;; Auto vars:     Size  Location     Type
  2991 ;;  data_byte       1    2[COMRAM] unsigned char 
  2992 ;; Return value:  Size  Location     Type
  2993 ;;                  1    wreg      void 
  2994 ;; Registers used:
  2995 ;;		wreg, status,2, status,0, cstack
  2996 ;; Tracked objects:
  2997 ;;		On entry : 0/0
  2998 ;;		On exit  : 0/0
  2999 ;;		Unchanged: 0/0
  3000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3002 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3004 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3005 ;;Total ram usage:        1 bytes
  3006 ;; Hardware stack levels used: 1
  3007 ;; Hardware stack levels required when called: 3
  3008 ;; This function calls:
  3009 ;;		_I2C_2_Master_Idle
  3010 ;; This function is called by:
  3011 ;;		_color_writetoaddr
  3012 ;;		_color_read_Clear
  3013 ;;		_color_read_Red
  3014 ;;		_color_read_Green
  3015 ;;		_color_read_Blue
  3016 ;; This function uses a non-reentrant model
  3017 ;;
  3018                           
  3019                           	psect	text20
  3020  0000'                    __ptext20:
  3021                           	callstack 0
  3022  0000'                    _I2C_2_Master_Write:
  3023                           	callstack 26
  3024                           
  3025                           ;incstack = 0
  3026                           ;I2C_2_Master_Write@data_byte stored from wreg
  3027  0000' 6E00'              	movwf	I2C_2_Master_Write@data_byte^0,c
  3028  0002'                    
  3029                           ;i2c.c: 41:   I2C_2_Master_Idle();
  3030  0002' EC00' F000'        	call	_I2C_2_Master_Idle	;wreg free
  3031  0006'                    
  3032                           ;i2c.c: 42:   SSP2BUF = data_byte;
  3033  0006' C002' FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  3034  000A' 0012               	return		;funcret
  3035  000C'                    __end_of_I2C_2_Master_Write:
  3036                           	callstack 0
  3037                           
  3038 ;; *************** function _I2C_2_Master_Stop *****************
  3039 ;; Defined at:
  3040 ;;		line 35 in file "i2c.c"
  3041 ;; Parameters:    Size  Location     Type
  3042 ;;		None
  3043 ;; Auto vars:     Size  Location     Type
  3044 ;;		None
  3045 ;; Return value:  Size  Location     Type
  3046 ;;                  1    wreg      void 
  3047 ;; Registers used:
  3048 ;;		wreg, status,2, status,0, cstack
  3049 ;; Tracked objects:
  3050 ;;		On entry : 0/0
  3051 ;;		On exit  : 0/0
  3052 ;;		Unchanged: 0/0
  3053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3057 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3058 ;;Total ram usage:        0 bytes
  3059 ;; Hardware stack levels used: 1
  3060 ;; Hardware stack levels required when called: 3
  3061 ;; This function calls:
  3062 ;;		_I2C_2_Master_Idle
  3063 ;; This function is called by:
  3064 ;;		_color_writetoaddr
  3065 ;;		_color_read_Clear
  3066 ;;		_color_read_Red
  3067 ;;		_color_read_Green
  3068 ;;		_color_read_Blue
  3069 ;; This function uses a non-reentrant model
  3070 ;;
  3071                           
  3072                           	psect	text21
  3073  0000'                    __ptext21:
  3074                           	callstack 0
  3075  0000'                    _I2C_2_Master_Stop:
  3076                           	callstack 26
  3077  0000'                    
  3078                           ;i2c.c: 36:   I2C_2_Master_Idle();
  3079  0000' EC00' F000'        	call	_I2C_2_Master_Idle	;wreg free
  3080  0004'                    
  3081                           ;i2c.c: 37:   SSP2CON2bits.PEN = 1;
  3082  0004' 010E               	movlb	14	; () banked
  3083  0006' 85DA               	bsf	218,2,b	;volatile
  3084  0008'                    
  3085                           ; BSR set to: 14
  3086  0008' 0012               	return		;funcret
  3087  000A'                    __end_of_I2C_2_Master_Stop:
  3088                           	callstack 0
  3089                           
  3090 ;; *************** function _I2C_2_Master_Start *****************
  3091 ;; Defined at:
  3092 ;;		line 25 in file "i2c.c"
  3093 ;; Parameters:    Size  Location     Type
  3094 ;;		None
  3095 ;; Auto vars:     Size  Location     Type
  3096 ;;		None
  3097 ;; Return value:  Size  Location     Type
  3098 ;;                  1    wreg      void 
  3099 ;; Registers used:
  3100 ;;		wreg, status,2, status,0, cstack
  3101 ;; Tracked objects:
  3102 ;;		On entry : 0/0
  3103 ;;		On exit  : 0/0
  3104 ;;		Unchanged: 0/0
  3105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3109 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3110 ;;Total ram usage:        0 bytes
  3111 ;; Hardware stack levels used: 1
  3112 ;; Hardware stack levels required when called: 3
  3113 ;; This function calls:
  3114 ;;		_I2C_2_Master_Idle
  3115 ;; This function is called by:
  3116 ;;		_color_writetoaddr
  3117 ;;		_color_read_Clear
  3118 ;;		_color_read_Red
  3119 ;;		_color_read_Green
  3120 ;;		_color_read_Blue
  3121 ;; This function uses a non-reentrant model
  3122 ;;
  3123                           
  3124                           	psect	text22
  3125  0000'                    __ptext22:
  3126                           	callstack 0
  3127  0000'                    _I2C_2_Master_Start:
  3128                           	callstack 26
  3129  0000'                    
  3130                           ;i2c.c: 26:   I2C_2_Master_Idle();
  3131  0000' EC00' F000'        	call	_I2C_2_Master_Idle	;wreg free
  3132  0004'                    
  3133                           ;i2c.c: 27:   SSP2CON2bits.SEN = 1;
  3134  0004' 010E               	movlb	14	; () banked
  3135  0006' 81DA               	bsf	218,0,b	;volatile
  3136  0008'                    
  3137                           ; BSR set to: 14
  3138  0008' 0012               	return		;funcret
  3139  000A'                    __end_of_I2C_2_Master_Start:
  3140                           	callstack 0
  3141                           
  3142 ;; *************** function _I2C_2_Master_Idle *****************
  3143 ;; Defined at:
  3144 ;;		line 21 in file "i2c.c"
  3145 ;; Parameters:    Size  Location     Type
  3146 ;;		None
  3147 ;; Auto vars:     Size  Location     Type
  3148 ;;		None
  3149 ;; Return value:  Size  Location     Type
  3150 ;;                  1    wreg      void 
  3151 ;; Registers used:
  3152 ;;		wreg, status,2, status,0
  3153 ;; Tracked objects:
  3154 ;;		On entry : 0/0
  3155 ;;		On exit  : 0/0
  3156 ;;		Unchanged: 0/0
  3157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3160 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3161 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3162 ;;Total ram usage:        1 bytes
  3163 ;; Hardware stack levels used: 1
  3164 ;; Hardware stack levels required when called: 2
  3165 ;; This function calls:
  3166 ;;		Nothing
  3167 ;; This function is called by:
  3168 ;;		_I2C_2_Master_Start
  3169 ;;		_I2C_2_Master_RepStart
  3170 ;;		_I2C_2_Master_Stop
  3171 ;;		_I2C_2_Master_Write
  3172 ;;		_I2C_2_Master_Read
  3173 ;; This function uses a non-reentrant model
  3174 ;;
  3175                           
  3176                           	psect	text23
  3177  0000'                    __ptext23:
  3178                           	callstack 0
  3179  0000'                    _I2C_2_Master_Idle:
  3180                           	callstack 26
  3181  0000'                    l90:
  3182  0000' 010E               	movlb	14	; () banked
  3183  0002' B5D8               	btfsc	216,2,b	;volatile
  3184  0004' EF00' F000'        	goto	u631
  3185  0008' EF00' F000'        	goto	u630
  3186  000C'                    u631:
  3187  000C' EF00' F000'        	goto	l90
  3188  0010'                    u630:
  3189  0010'                    
  3190                           ; BSR set to: 14
  3191  0010' CEDA F001'         	movff	3802,??_I2C_2_Master_Idle	;volatile
  3192  0014' 0E1F               	movlw	31
  3193  0016' 1600'              	andwf	??_I2C_2_Master_Idle^0,f,c
  3194  0018' A4D8               	btfss	status,2,c
  3195  001A' EF00' F000'        	goto	u641
  3196  001E' EF00' F000'        	goto	u640
  3197  0022'                    u641:
  3198  0022' EF00' F000'        	goto	l90
  3199  0026'                    u640:
  3200  0026'                    
  3201                           ; BSR set to: 14
  3202  0026' 0012               	return		;funcret
  3203  0028'                    __end_of_I2C_2_Master_Idle:
  3204                           	callstack 0
  3205                           
  3206 ;; *************** function _I2C_2_Master_Init *****************
  3207 ;; Defined at:
  3208 ;;		line 4 in file "i2c.c"
  3209 ;; Parameters:    Size  Location     Type
  3210 ;;		None
  3211 ;; Auto vars:     Size  Location     Type
  3212 ;;		None
  3213 ;; Return value:  Size  Location     Type
  3214 ;;                  1    wreg      void 
  3215 ;; Registers used:
  3216 ;;		wreg, status,2
  3217 ;; Tracked objects:
  3218 ;;		On entry : 0/0
  3219 ;;		On exit  : 0/0
  3220 ;;		Unchanged: 0/0
  3221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3225 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3226 ;;Total ram usage:        0 bytes
  3227 ;; Hardware stack levels used: 1
  3228 ;; Hardware stack levels required when called: 2
  3229 ;; This function calls:
  3230 ;;		Nothing
  3231 ;; This function is called by:
  3232 ;;		_color_click_init
  3233 ;;		_main
  3234 ;; This function uses a non-reentrant model
  3235 ;;
  3236                           
  3237                           	psect	text24
  3238  0000'                    __ptext24:
  3239                           	callstack 0
  3240  0000'                    _I2C_2_Master_Init:
  3241                           	callstack 27
  3242  0000'                    
  3243                           ;i2c.c: 6:   SSP2CON1bits.SSPM= 0b1000;
  3244  0000' 010E               	movlb	14	; () banked
  3245  0002' 51D9               	movf	217,w,b	;volatile
  3246  0004' 0BF0               	andlw	-16
  3247  0006' 0908               	iorlw	8
  3248  0008' 6FD9               	movwf	217,b	;volatile
  3249  000A'                    
  3250                           ; BSR set to: 14
  3251                           ;i2c.c: 7:   SSP2CON1bits.SSPEN = 1;
  3252  000A' 8BD9               	bsf	217,5,b	;volatile
  3253                           
  3254                           ;i2c.c: 8:   SSP2ADD = (64000000/(4*100000))-1;
  3255  000C' 0E9F               	movlw	159
  3256  000E' 6FD6               	movwf	214,b	;volatile
  3257  0010'                    
  3258                           ; BSR set to: 14
  3259                           ;i2c.c: 11:   TRISDbits.TRISD5 = 1;
  3260  0010' 8A84               	bsf	132,5,c	;volatile
  3261  0012'                    
  3262                           ; BSR set to: 14
  3263                           ;i2c.c: 12:   TRISDbits.TRISD6 = 1;
  3264  0012' 8C84               	bsf	132,6,c	;volatile
  3265  0014'                    
  3266                           ; BSR set to: 14
  3267                           ;i2c.c: 13:   ANSELDbits.ANSELD5=0;
  3268  0014' 9BA7               	bcf	167,5,b	;volatile
  3269  0016'                    
  3270                           ; BSR set to: 14
  3271                           ;i2c.c: 14:   ANSELDbits.ANSELD6=0;
  3272  0016' 9DA7               	bcf	167,6,b	;volatile
  3273                           
  3274                           ;i2c.c: 15:   SSP2DATPPS=0x1D;
  3275  0018' 0E1D               	movlw	29
  3276  001A' 6F1D               	movwf	29,b	;volatile
  3277                           
  3278                           ;i2c.c: 16:   SSP2CLKPPS=0x1E;
  3279  001C' 0E1E               	movlw	30
  3280  001E' 6F1C               	movwf	28,b	;volatile
  3281                           
  3282                           ;i2c.c: 17:   RD5PPS=0x1C;
  3283  0020' 0E1C               	movlw	28
  3284  0022' 6F6F               	movwf	111,b	;volatile
  3285                           
  3286                           ;i2c.c: 18:   RD6PPS=0x1B;
  3287  0024' 0E1B               	movlw	27
  3288  0026' 6F70               	movwf	112,b	;volatile
  3289  0028'                    
  3290                           ; BSR set to: 14
  3291  0028' 0012               	return		;funcret
  3292  002A'                    __end_of_I2C_2_Master_Init:
  3293                           	callstack 0
  3294                           
  3295 ;; *************** function _Timer0_init *****************
  3296 ;; Defined at:
  3297 ;;		line 7 in file "timers.c"
  3298 ;; Parameters:    Size  Location     Type
  3299 ;;		None
  3300 ;; Auto vars:     Size  Location     Type
  3301 ;;		None
  3302 ;; Return value:  Size  Location     Type
  3303 ;;                  1    wreg      void 
  3304 ;; Registers used:
  3305 ;;		wreg, status,2
  3306 ;; Tracked objects:
  3307 ;;		On entry : 0/0
  3308 ;;		On exit  : 0/0
  3309 ;;		Unchanged: 0/0
  3310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3315 ;;Total ram usage:        0 bytes
  3316 ;; Hardware stack levels used: 1
  3317 ;; Hardware stack levels required when called: 2
  3318 ;; This function calls:
  3319 ;;		Nothing
  3320 ;; This function is called by:
  3321 ;;		_main
  3322 ;; This function uses a non-reentrant model
  3323 ;;
  3324                           
  3325                           	psect	text25
  3326  0000'                    __ptext25:
  3327                           	callstack 0
  3328  0000'                    _Timer0_init:
  3329                           	callstack 28
  3330  0000'                    
  3331                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  3332  0000' 50D6               	movf	214,w,c	;volatile
  3333  0002' 0B1F               	andlw	-225
  3334  0004' 0940               	iorlw	64
  3335  0006' 6ED6               	movwf	214,c	;volatile
  3336  0008'                    
  3337                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  3338  0008' 88D6               	bsf	214,4,c	;volatile
  3339                           
  3340                           ;timers.c: 11:     T0CON1bits.T0CKPS=0b1111;
  3341  000A' 0E0F               	movlw	15
  3342  000C' 12D6               	iorwf	214,f,c	;volatile
  3343                           
  3344                           ;timers.c: 12:     T0CON0bits.T0OUTPS=0b000;
  3345  000E' 0EF0               	movlw	-16
  3346  0010' 16D5               	andwf	213,f,c	;volatile
  3347  0012'                    
  3348                           ;timers.c: 14:     T0CON0bits.T016BIT=1;
  3349  0012' 88D5               	bsf	213,4,c	;volatile
  3350                           
  3351                           ;timers.c: 17:     TMR0H=0b00001011;
  3352  0014' 0E0B               	movlw	11
  3353  0016' 6ED4               	movwf	212,c	;volatile
  3354                           
  3355                           ;timers.c: 18:     TMR0L=0b11011011;
  3356  0018' 0EDB               	movlw	219
  3357  001A' 6ED3               	movwf	211,c	;volatile
  3358  001C'                    
  3359                           ;timers.c: 20:     T0CON0bits.T0EN=1;
  3360  001C' 8ED5               	bsf	213,7,c	;volatile
  3361  001E' 0012               	return		;funcret
  3362  0020'                    __end_of_Timer0_init:
  3363                           	callstack 0
  3364                           
  3365 ;; *************** function _Interrupts_init *****************
  3366 ;; Defined at:
  3367 ;;		line 7 in file "interrupts.c"
  3368 ;; Parameters:    Size  Location     Type
  3369 ;;		None
  3370 ;; Auto vars:     Size  Location     Type
  3371 ;;		None
  3372 ;; Return value:  Size  Location     Type
  3373 ;;                  1    wreg      void 
  3374 ;; Registers used:
  3375 ;;		None
  3376 ;; Tracked objects:
  3377 ;;		On entry : 0/0
  3378 ;;		On exit  : 0/0
  3379 ;;		Unchanged: 0/0
  3380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3385 ;;Total ram usage:        0 bytes
  3386 ;; Hardware stack levels used: 1
  3387 ;; Hardware stack levels required when called: 2
  3388 ;; This function calls:
  3389 ;;		Nothing
  3390 ;; This function is called by:
  3391 ;;		_main
  3392 ;; This function uses a non-reentrant model
  3393 ;;
  3394                           
  3395                           	psect	text26
  3396  0000'                    __ptext26:
  3397                           	callstack 0
  3398  0000'                    _Interrupts_init:
  3399                           	callstack 28
  3400  0000'                    
  3401                           ;interrupts.c: 9:     INTCONbits.PEIE=1;
  3402  0000' 8CF2               	bsf	242,6,c	;volatile
  3403                           
  3404                           ;interrupts.c: 10:     PIE2bits.C1IE=1;
  3405  0002' 010E               	movlb	14	; () banked
  3406  0004' 812B               	bsf	43,0,b	;volatile
  3407                           
  3408                           ;interrupts.c: 14:     PIE0bits.IOCIE=1;
  3409  0006' 8929               	bsf	41,4,b	;volatile
  3410                           
  3411                           ;interrupts.c: 15:     INTCONbits.GIE=1;
  3412  0008' 8EF2               	bsf	242,7,c	;volatile
  3413  000A'                    
  3414                           ; BSR set to: 14
  3415  000A' 0012               	return		;funcret
  3416  000C'                    __end_of_Interrupts_init:
  3417                           	callstack 0
  3418                           
  3419 ;; *************** function _HighISR *****************
  3420 ;; Defined at:
  3421 ;;		line 23 in file "interrupts.c"
  3422 ;; Parameters:    Size  Location     Type
  3423 ;;		None
  3424 ;; Auto vars:     Size  Location     Type
  3425 ;;		None
  3426 ;; Return value:  Size  Location     Type
  3427 ;;                  1    wreg      void 
  3428 ;; Registers used:
  3429 ;;		wreg, cstack
  3430 ;; Tracked objects:
  3431 ;;		On entry : 0/0
  3432 ;;		On exit  : 0/0
  3433 ;;		Unchanged: 0/0
  3434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3439 ;;Total ram usage:        0 bytes
  3440 ;; Hardware stack levels used: 1
  3441 ;; Hardware stack levels required when called: 1
  3442 ;; This function calls:
  3443 ;;		_sendCharSerial4
  3444 ;; This function is called by:
  3445 ;;		Interrupt level 2
  3446 ;; This function uses a non-reentrant model
  3447 ;;
  3448                           
  3449                           	psect	intcode
  3450  0000'                    __pintcode:
  3451                           	callstack 0
  3452  0000'                    _HighISR:
  3453                           	callstack 25
  3454                           
  3455                           ; BSR set to: 14
  3456                           ;incstack = 0
  3457  0000' 8200'              	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3458  0002'                    
  3459                           ;interrupts.c: 48:     if (PORTBbits.RB0){
  3460  0002' A08A               	btfss	138,0,c	;volatile
  3461  0004' EF00' F000'        	goto	i2u54_41
  3462  0008' EF00' F000'        	goto	i2u54_40
  3463  000C'                    i2u54_41:
  3464  000C' EF00' F000'        	goto	i2l362
  3465  0010'                    i2u54_40:
  3466  0010'                    
  3467                           ;interrupts.c: 49:         LATHbits.LATH3 = 0;
  3468  0010' 9680               	bcf	128,3,c	;volatile
  3469  0012'                    
  3470                           ;interrupts.c: 50:         sendCharSerial4('a');
  3471  0012' 0E61               	movlw	97
  3472  0014' EC00' F000'        	call	_sendCharSerial4
  3473  0018'                    i2l362:
  3474  0018' 9200'              	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3475  001A' 0011               	retfie		f
  3476  001C'                    __end_of_HighISR:
  3477                           	callstack 0
  3478                           
  3479 ;; *************** function _sendCharSerial4 *****************
  3480 ;; Defined at:
  3481 ;;		line 31 in file "serial.c"
  3482 ;; Parameters:    Size  Location     Type
  3483 ;;  charToSend      1    wreg     unsigned char 
  3484 ;; Auto vars:     Size  Location     Type
  3485 ;;  charToSend      1    0[COMRAM] unsigned char 
  3486 ;; Return value:  Size  Location     Type
  3487 ;;                  1    wreg      void 
  3488 ;; Registers used:
  3489 ;;		wreg
  3490 ;; Tracked objects:
  3491 ;;		On entry : 0/0
  3492 ;;		On exit  : 0/0
  3493 ;;		Unchanged: 0/0
  3494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3496 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3498 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3499 ;;Total ram usage:        1 bytes
  3500 ;; Hardware stack levels used: 1
  3501 ;; This function calls:
  3502 ;;		Nothing
  3503 ;; This function is called by:
  3504 ;;		_HighISR
  3505 ;;		_sendStringSerial4
  3506 ;; This function uses a non-reentrant model
  3507 ;;
  3508                           
  3509                           	psect	text28
  3510  0000'                    __ptext28:
  3511                           	callstack 0
  3512  0000'                    _sendCharSerial4:
  3513                           	callstack 25
  3514                           
  3515                           ;incstack = 0
  3516                           ;sendCharSerial4@charToSend stored from wreg
  3517  0000' 6E00'              	movwf	sendCharSerial4@charToSend^0,c
  3518  0002'                    i2l408:
  3519  0002' 010E               	movlb	14	; () banked
  3520  0004' A537               	btfss	55,2,b	;volatile
  3521  0006' EF00' F000'        	goto	i2u24_41
  3522  000A' EF00' F000'        	goto	i2u24_40
  3523  000E'                    i2u24_41:
  3524  000E' EF00' F000'        	goto	i2l408
  3525  0012'                    i2u24_40:
  3526  0012'                    
  3527                           ; BSR set to: 14
  3528                           ;serial.c: 33:     TX4REG = charToSend;
  3529  0012' C000' FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  3530  0016'                    
  3531                           ; BSR set to: 14
  3532  0016' 0012               	return		;funcret
  3533  0018'                    __end_of_sendCharSerial4:
  3534                           	callstack 0
  3535                           
  3536                           	psect	smallconst
  3537  0000'                    __psmallconst:
  3538                           	callstack 0
  3539  0000' 00                 	db	0
  3540  0001' 00                 	db	0	; dummy byte at the end
  3541  0000                     
  3542                           	psect	rparam
  3543  0000                     
  3544                           	psect	temp
  3545  0000'                    btemp:
  3546                           	callstack 0
  3547  0000'                    	ds	1
  3548  0000                     int$flags	set	btemp
  3549  0000                     wtemp8	set	btemp+1
  3550  0000                     ttemp5	set	btemp+1
  3551  0000                     ttemp6	set	btemp+4
  3552  0000                     ttemp7	set	btemp+8
  3553                           
  3554                           	psect	config
  3555                           
  3556                           ;Config register CONFIG1L @ 0x300000
  3557                           ;	External Oscillator mode Selection bits
  3558                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  3559                           ;	Power-up default value for COSC bits
  3560                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  3561  300000                     	org	3145728
  3562  300000  AA                 	db	170
  3563                           
  3564                           ;Config register CONFIG1H @ 0x300001
  3565                           ;	unspecified, using default values
  3566                           ;	Clock Out Enable bit
  3567                           ;	CLKOUTEN = 0x1, unprogrammed default
  3568                           ;	Clock Switch Enable bit
  3569                           ;	CSWEN = 0x1, unprogrammed default
  3570                           ;	Fail-Safe Clock Monitor Enable bit
  3571                           ;	FCMEN = 0x1, unprogrammed default
  3572  300001                     	org	3145729
  3573  300001  FF                 	db	255
  3574                           
  3575                           ;Config register CONFIG3L @ 0x300004
  3576                           ;	WDT Period Select bits
  3577                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  3578                           ;	WDT operating mode
  3579                           ;	WDTE = OFF, WDT Disabled
  3580  300004                     	org	3145732
  3581  300004  9F                 	db	159
  3582                           
  3583                           ;Config register CONFIG3H @ 0x300005
  3584                           ;	unspecified, using default values
  3585                           ;	WDT Window Select bits
  3586                           ;	WDTCWS = 0x7, unprogrammed default
  3587                           ;	WDT input clock selector
  3588                           ;	WDTCCS = 0x7, unprogrammed default
  3589  300005                     	org	3145733
  3590  300005  FF                 	db	255
  3591                           tosu	equ	0xFFF
  3592                           tosh	equ	0xFFE
  3593                           tosl	equ	0xFFD
  3594                           stkptr	equ	0xFFC
  3595                           pclatu	equ	0xFFB
  3596                           pclath	equ	0xFFA
  3597                           pcl	equ	0xFF9
  3598                           tblptru	equ	0xFF8
  3599                           tblptrh	equ	0xFF7
  3600                           tblptrl	equ	0xFF6
  3601                           tablat	equ	0xFF5
  3602                           prodh	equ	0xFF4
  3603                           prodl	equ	0xFF3
  3604                           indf0	equ	0xFEF
  3605                           postinc0	equ	0xFEE
  3606                           postdec0	equ	0xFED
  3607                           preinc0	equ	0xFEC
  3608                           plusw0	equ	0xFEB
  3609                           fsr0h	equ	0xFEA
  3610                           fsr0l	equ	0xFE9
  3611                           wreg	equ	0xFE8
  3612                           indf1	equ	0xFE7
  3613                           postinc1	equ	0xFE6
  3614                           postdec1	equ	0xFE5
  3615                           preinc1	equ	0xFE4
  3616                           plusw1	equ	0xFE3
  3617                           fsr1h	equ	0xFE2
  3618                           fsr1l	equ	0xFE1
  3619                           bsr	equ	0xFE0
  3620                           indf2	equ	0xFDF
  3621                           postinc2	equ	0xFDE
  3622                           postdec2	equ	0xFDD
  3623                           preinc2	equ	0xFDC
  3624                           plusw2	equ	0xFDB
  3625                           fsr2h	equ	0xFDA
  3626                           fsr2l	equ	0xFD9
  3627                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         84
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     29      53
    BANK0           160      0      60
    BANK1           256    203     203
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    color_read@p	PTR struct RGBC_val size(2) Largest target is 8
		 -> main@RGBC(BANK1[8]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    main@pblue_val	PTR unsigned char  size(2) Largest target is 20
		 -> main@blue_val(BANK1[20]), 

    main@pclear_val	PTR unsigned char  size(2) Largest target is 20
		 -> main@clear_val(BANK1[20]), 

    main@pgreen_val	PTR unsigned char  size(2) Largest target is 20
		 -> main@green_val(BANK1[20]), 

    main@pmL	PTR unsigned char  size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    main@pmL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    main@pmL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    main@pmR	PTR unsigned char  size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    main@pmR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    main@pmR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    main@pred_val	PTR unsigned char  size(2) Largest target is 20
		 -> main@red_val(BANK1[20]), 

    main@pRGBC	PTR unsigned char  size(2) Largest target is 8
		 -> main@RGBC(BANK1[8]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    S1053DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    S1053DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), main@motorR(BANK1[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    turnLeft@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    turnLeft@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    turnLeft@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    turnLeft@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    turnRight@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    turnRight@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    turnRight@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhlllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    turnRight@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhlllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 


Critical Paths under _main in COMRAM

    _main->_fullSpeedAhead
    _main->_stop
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_read->_color_read_Blue
    _color_read->_color_read_Clear
    _color_read->_color_read_Green
    _color_read->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    _HighISR->_sendCharSerial4

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               219   219      0    7458
                                             25 COMRAM     4     4      0
                                              0 BANK1    203   203      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                        _Timer0_init
                   _color_click_init
              _color_click_toggleLED
                         _color_read
                   _color_read_Clear
                      _decide_action
                     _fullSpeedAhead
                    _get16bitTMR0val
                    _initDCmotorsPWM
                         _initUSART4
                 _invert_instruction
                        _resetTimer0
                               _stop
                           _turn_180
                       _turn_left_90
                          _turn_r_90
                      _turn_right_90
 ---------------------------------------------------------------------------------
 (1) _turn_right_90                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _turn_r_90                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _turn_left_90                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _turn_180                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _stop                                                 5     1      4    2613
                                             20 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _resetTimer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _invert_instruction                                   2     0      2       0
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get16bitTMR0val                                      6     4      2      24
                                              1 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       5     1      4    2201
                                             20 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    1677
                                             14 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     358
                                              7 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _decide_action                                        2     0      2       0
 ---------------------------------------------------------------------------------
 (1) _color_read                                           2     0      2     616
                                             12 COMRAM     2     0      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_read_Clear                                     7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      45
                                              2 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _color_click_toggleLED                                1     1      0       0
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     370
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     370
                                              3 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      22
                                              2 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _HighISR                                              0     0      0      15
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (6) _sendCharSerial4                                      1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
   _Timer0_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _color_click_toggleLED
   _color_read
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Clear
   _decide_action
   _fullSpeedAhead
     _setMotorPWM
       ___lwdiv
         ___wmul (ARG)
       ___wmul
   _get16bitTMR0val
   _initDCmotorsPWM
   _initUSART4
   _invert_instruction
   _resetTimer0
   _stop
     _setMotorPWM
   _turn_180
   _turn_left_90
   _turn_r_90
   _turn_right_90

 _HighISR (ROOT)
   _sendCharSerial4

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      70        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     CB      CB       7       79.3%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      3C       5       37.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1D      35       1       56.4%
BITBIGSFRllhllh     37      0       0      50        0.0%
BITBIGSFRllhhl      31      0       0      48        0.0%
BITBIGSFRlllllh     2A      0       0      62        0.0%
BITBIGSFRllllll     26      0       0      68        0.0%
BITBIGSFRllllhh     20      0       0      53        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRhhlllh     17      0       0      38        0.0%
BITBIGSFRllhhhh     14      0       0      45        0.0%
BITBIGSFRlllllh     14      0       0      55        0.0%
BITBIGSFRhhhl       13      0       0      34        0.0%
BITBIGSFRlllllh     11      0       0      57        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRllllhl      C      0       0      54        0.0%
BITBIGSFRlllllh      B      0       0      66        0.0%
BITBIGSFRlllllh      9      0       0      63        0.0%
BITBIGSFRlllllh      9      0       0      56        0.0%
BITBIGSFRllhlll      8      0       0      51        0.0%
BITBIGSFRllhhhl      6      0       0      47        0.0%
BITBIGSFRllllll      6      0       0      67        0.0%
BITBIGSFRlllllh      6      0       0      61        0.0%
BITBIGSFRlllllh      5      0       0      60        0.0%
BITBIGSFRllhhhh      3      0       0      46        0.0%
BITBIGSFRhhllll      3      0       0      39        0.0%
BITBIGSFRlllllh      3      0       0      59        0.0%
BITBIGSFRllhlh       2      0       0      49        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllllh      1      0       0      65        0.0%
BITBIGSFRlllllh      1      0       0      64        0.0%
BITBIGSFRlhlh        1      0       0      43        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllllh      1      0       0      58        0.0%
BITBIGSFRlllh        1      0       0      52        0.0%
BITBIGSFRhlhl        1      0       0      41        0.0%
BITBIGSFRhhllll      1      0       0      40        0.0%
BITBIGSFRlhh         1      0       0      42        0.0%
BITBIGSFRlhll        1      0       0      44        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     13C      69        0.0%
DATA                 0      0     13C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Mar 13 15:47:08 2024

               _color_read_Red 0000                _color_read_Blue 0000                             l42 001E  
                           l51 004E                             l60 0064                             l45 005C  
                           l54 004E                             l39 0048                             l48 004E  
                           l57 004E                             l90 0000                             l93 0026  
                           l87 0028                             l96 0008                             l99 0008  
          ___wmul@multiplicand 0003               _color_read_Clear 0000               _color_read_Green 0000  
            ??_Interrupts_init 0001                            l102 0008                            l105 000A  
                          l108 0040                            l312 03B0                            l323 001E  
                          l166 016A                            l326 001C                            l174 00A0  
                          l159 00A0                            l193 0090                            l329 0008  
                          l275 00AE                            l356 000A                            l198 00C0  
                          l294 038C                            l473 0024                            l399 001C  
                          l971 0072                            l964 006A                            u700 001C  
                          u701 0018                            u630 0010                            u710 00E6  
                          u631 000C                            u711 00E2                            u640 0026  
                          u720 0012                            u800 0088                            u641 0022  
                          u721 000A                            u801 0084                            u650 002A  
                          u810 00A0                            u651 0022                            u811 009C  
                          u740 0030                            u820 003C                            u741 0028  
                          u821 0038                            u670 001A                            u830 005E  
                          u671 0016                            u831 005A                            u760 0054  
                          u680 0038                            u840 00A8                            u761 004C  
                          u681 0034                            u841 00A4                            u738 0014  
                          u690 0054                            u850 00C0                            u691 0050  
                          u851 00BC                            u668 002C                            u780 001C  
                          u781 0018                            u758 0032                            u790 003E  
                          u950 00AA                            u791 003A                            u951 00A6  
                          u960 00C0                            u961 00BC                            u778 0056  
                          u970 0102                            u971 00FE                            u980 0194  
                          u981 0190                            u990 01AE                            u991 01AA  
                          wreg 0FE8                    main@actions 0078                           l2100 010E  
                         l2020 0008                           l2110 0162                           l2102 0122  
                         l2030 0024                           l2022 000C                           l2120 01AE  
                         l2112 017E                           l2104 0128                           l2040 002E  
                         l2032 0026                           l2024 0010                           l2016 0000  
                         l2130 01EC                           l2122 01B2                           l2114 0182  
                         l2106 0142                           l2050 004C                           l2042 0034  
                         l2034 0028                           l2026 001C                           l2018 0004  
                         l2140 0234                           l2132 0200                           l2124 01C8  
                         l2116 0194                           l2108 014E                           l2060 0068  
                         l2052 0054                           l2044 0038                           l2036 002A  
                         l2028 0020                           l2150 0262                           l2142 0238  
                         l2134 0208                           l2126 01D0                           l2118 019C  
                         l2070 0090                           l2062 0070                           l2054 0058  
                         l2046 003C                           l2038 002E                           l2160 02D6  
                         l2152 0276                           l2144 0246                           l2128 01E4  
                         l2080 0094                           l2072 0090                           l2064 0078  
                         l2056 005C                           l2048 0044                           l2162 02DC  
                         l2154 027C                           l2146 024E                           l2138 0220  
                         l2090 00C4                           l2082 009C                           l2074 0090  
                         l2066 0080                           l2058 0060                           l2180 0360  
                         l2172 0330                           l2164 0302                           l2156 0288  
                         l2148 025E                           l2092 00D8                           l2076 0090  
                         l2068 0088                           l2190 0378                           l2158 02C2  
                         l2094 00DE                           l2086 00AE                           l2078 0090  
                         l1720 0004                           l2184 0378                           l2176 0348  
                         l2168 031A                           l2192 037E                           l2096 00EA  
                         l2088 00C0                           l1714 0000                           l1722 0002  
                         l1730 0000                           l1802 0000                           l1810 0046  
                         l2194 039C                           l2098 0102                           l1716 0010  
                         l1724 0006                           l1740 0016                           l1732 0004  
                         l1804 0046                           l1820 0084                           l1900 0026  
                         l1718 0000                           l1726 0000                           l1830 0000  
                         l1742 003C                           l1734 0002                           l1750 001C  
                         l1822 0088                           l1814 0000                           l1902 003E  
                         l1910 0070                           l1728 0004                           l1840 0032  
                         l1832 0004                           l1744 003E                           l1736 0006  
                         l1808 0000                           l1760 0022                           l1824 00CA  
                         l1816 001C                           l1920 0046                           l1912 0088  
                         l1904 0048                           l1850 0044                           l1842 003C  
                         l1834 000E                           l1738 000E                           l1770 005C  
                         l1762 002A                           l1754 0000                           l1826 00E6  
                         l1818 0070                           l1930 00A8                           l1922 005E  
                         l1914 0000                           l1906 0054                           l1940 0000  
                         l1932 0000                           l1780 0010                           l1852 0046  
                         l1844 003E                           l1836 001E                           l1772 005E  
                         l1764 0038                           l1756 0008                           l1748 0000  
                         l1828 012A                           l1924 0068                           l1916 0024  
                         l1860 002A                           l1908 0060                           l1934 0008  
                         l1782 0012                           l1846 0040                           l1838 0028  
                         l1790 0000                           l1854 0000                           l1774 0064  
                         l1766 003E                           l1758 001A                           l1926 0074  
                         l1918 003C                           l1870 0066                           l1862 004E  
                         l1950 0018                           l1942 0000                           l1936 0012  
                         l1784 0014                           l1776 0000                           l1848 0042  
                         l1856 0000                           l1792 0046                           l1768 0054  
                         l1928 0080                           l1960 0014                           l1880 0092  
                         l1872 0070                           l1864 0058                           l1952 001A  
                         l1944 000A                           l1938 001C                           l1786 0016  
                         l1778 000A                           l1890 009C                           l1882 0094  
                         l1874 0072                           l1866 005A                           l1858 0000  
                         l1946 000C                           l1954 0000                           l1788 0002  
                         l1796 0000                           l1956 0000                           l1892 009E  
                         l1884 0096                           l1876 007C                           l1868 0064  
                         l1948 0016                           l1798 0046                           l1958 0006  
                         l1886 0098                           l1878 0090                           l1894 0000  
                         l1888 009A                           l1896 0004                           l1898 001C  
                         u1000 01C8                           u1001 01C4                           u1010 01E4  
                         u1011 01E0                           u1100 035C                           u1020 0200  
                         u1101 0358                           u1021 01FC                           u1110 0374  
                         u1030 021C                           u1111 0370                           u1031 0218  
                         u1120 039C                           u1040 0234                           u1121 0398  
                         u1041 0230                           u1050 025E                           u1051 025A  
                         u1060 02C2                           u1061 02BE                           u1070 0316  
                         u1071 0312                           u1080 032C                           u1081 0328  
                         u1090 0344                           u1091 0340                           u1157 0384  
                         u1167 0066                   _BAUD4CONbits 0EE9                           u1177 0086  
                         u1187 0014                           _T2PR 0FBC                    main@red_val 0014  
                         _main 0000                           fsr2h 0FDA                           indf2 0FDF  
                         fsr2l 0FD9                           btemp 0000                           _stop 0000  
                  main@timings 0050                           prodh 0FF4                           prodl 0FF3  
                         start 0000*        __end_of_color_read_Red 0050                __end_of_HighISR 001C  
                  color_read@p 000C                   ___param_bank 0000                   main@blue_val 003C  
                        ?_main 0000                          _ADPCH 0F5F                          ?_stop 0014  
              __end_of___lwdiv 0074                          i2l411 0016                          i2l408 0002  
                        i2l362 0018                          _TMR0H 0FD4                          _TMR0L 0FD3  
      __end_of_sendCharSerial4 0018     __end_of_I2C_2_Master_Start 000A     __end_of_I2C_2_Master_Write 000C  
__end_of_color_click_toggleLED 0066                          ttemp5 0001                          ttemp6 0004  
                        ttemp7 0008                          status 0FD8                          wtemp8 0001  
      __end_of_color_read_Blue 0050          _I2C_2_Master_RepStart 0000                ?_color_read_Red 0005  
              __initialization 0000                   __end_of_main 03B4                   __end_of_stop 00A2  
             main@action_to_do 00C9                  main@clear_val 0000                _get16bitTMR0val 0000  
                       ??_main 0019                         ??_stop 0018                  __activetblptr 0000  
                 ?_setMotorPWM 000E                         _ADRESH 0F64                         _CCPR1H 0FAA  
                       _CCPR2H 0FA6                         _CCPR3H 0F25                         _CCPR4H 0F21  
                       _RC0PPS 0E62                         _RC4REG 0EE3                         _RE2PPS 0E74  
                       _RD5PPS 0E6F                         _RC7PPS 0E69                         _RE4PPS 0E76  
                       _RD6PPS 0E70                         i2l1640 0012                         i2l1396 0002  
                       i2l1636 0002                         i2l1398 0012                         i2l1638 0010  
                main@green_val 0028                         _RG6PPS 0E88                      ??_HighISR 0001  
     __end_of_color_click_init 004A                         _RX4PPS 0E15                         _TX4REG 0EE4  
                 ?_resetTimer0 0000                   _turn_left_90 0000*                 ??_Timer0_init 0001  
                 _CCPTMRS0bits 0FAD                         ___wmul 0000                      ??___lwdiv 000B  
                       clear_0 0006                         clear_1 0012                         isa$std 0001  
                 __mediumconst 0000*              ?_sendCharSerial4 0000                         stop@mL 0014  
                       stop@mR 0016              ??_initDCmotorsPWM 0003                     __accesstop 0000* 
      __end_of__initialization 0018       __end_of_color_read_Clear 0050       __end_of_color_read_Green 0050  
       ?_I2C_2_Master_RepStart 0000                  ___rparam_used 0001               ?_color_read_Blue 0005  
              _Interrupts_init 0000                 __pcstackCOMRAM 0000        __end_of_get16bitTMR0val 001E  
     get16bitTMR0val@timer_val 0005            __end_of_Timer0_init 0020                     __pbssBANK0 0000  
          main@upcoming_action 00B0              _color_writetoaddr 0000                   _T2CLKCONbits 0FBF  
           ?_color_writetoaddr 0003                        ?___wmul 0001            ??_color_writetoaddr 0004  
                      _SP4BRGH 0EE6                        _SP4BRGL 0EE5                        i2u24_40 0012  
                      i2u24_41 000E                        i2u54_40 0010                        i2u54_41 000C  
                      _SSP2ADD 0ED6                        _SSP2BUF 0ED5                     _color_read 0000  
      __end_of_Interrupts_init 000C         color_writetoaddr@value 0003               ??_color_read_Red 0007  
                      _HighISR 0000      __end_of_color_writetoaddr 0020                      _ADREFbits 0F58  
           _I2C_2_Master_Start 0000                     _initUSART4 0000             _I2C_2_Master_Write 0000  
                      __Hparam 0000                        __Lparam 0000              color_read_Red@tmp 000A  
                  _Timer0_init 0000                  _turn_right_90 0000*              ?_get16bitTMR0val 0001  
          ?_I2C_2_Master_Start 0000                        ___lwdiv 0000            ?_I2C_2_Master_Write 0000  
                 __psmallconst 0000                      ?_turn_180 0000                        __pcinit 0000  
                      __ramtop 0000*                       __ptext0 0000                        __ptext1 0000  
                      __ptext2 0000                        __ptext3 0000                        __ptext4 0000  
                      __ptext5 0000                        __ptext6 0000                        __ptext7 0000  
                      __ptext8 0000                        __ptext9 0000                      _T2CONbits 0FBD  
                    _T2HLTbits 0FBE                  _RxBufWriteCnt 0017                        main@pmL 00B3  
                      main@pmR 00B5                        main@lum 00A0           ??_I2C_2_Master_Start 0002  
         ??_I2C_2_Master_Write 0002           end_of_initialization 0018          _color_click_toggleLED 0000  
            ?_color_click_init 0000             ??_color_click_init 0005                  _decide_action 0000* 
               ?_turn_right_90 0000                        postdec2 0FDD                        postinc0 0FEE  
                      postinc2 0FDE                     ??_turn_180 0000                _initDCmotorsPWM 0000  
                    _PORTBbits 0F8A                      _PORTFbits 0F8E             setMotorPWM@negDuty 0013  
                    _TRISAbits 0F81             setMotorPWM@posDuty 0012                      _TRISCbits 0F83  
                    _TRISDbits 0F84                      _TRISEbits 0F85                      _TRISFbits 0F86  
                    _TRISGbits 0F87                      _TRISHbits 0F88               fullSpeedAhead@mL 0014  
             fullSpeedAhead@mR 0016                    ?_color_read 000C       color_writetoaddr@address 0004  
      ??_I2C_2_Master_RepStart 0002               ?_Interrupts_init 0000                    _CCP1CONbits 0FAB  
            ?_color_read_Clear 0005                   _EUSART4RXbuf 0000                   _EUSART4TXbuf 0000  
                  _CCP2CONbits 0FA7              ?_color_read_Green 0005                    _CCP3CONbits 0F26  
                  ?_initUSART4 0000                    _CCP4CONbits 0F22      sendCharSerial4@charToSend 0000  
               ?_decide_action 0000                     main@motorL 00B7                     main@motorR 00C0  
           ??_color_read_Clear 0007             ??_color_read_Green 0007                 _fullSpeedAhead 0000  
               __end_of___wmul 0026            color_read_Clear@tmp 000A            start_initialization 0000  
                _TxBufWriteCnt 0015         ?_color_click_toggleLED 0000                ??_turn_right_90 0000  
          color_read_Green@tmp 000A        __end_of_initDCmotorsPWM 00A2         __end_of_fullSpeedAhead 00C2  
                     ??___wmul 0005                    __pbssCOMRAM 0000                  __pcstackBANK1 0000  
                     ?_HighISR 0000                ??_decide_action 0000               ___lwdiv@dividend 0007  
                 ?_Timer0_init 0000                ?_fullSpeedAhead 0014                      __pintcode 0000  
                     ?___lwdiv 0007           I2C_2_Master_Read@ack 0003           I2C_2_Master_Read@tmp 0004  
                  __smallconst 0000*             _I2C_2_Master_Idle 0000              _I2C_2_Master_Init 0000  
            _I2C_2_Master_Read 0000              _I2C_2_Master_Stop 0000                   _RxBufReadCnt 0016  
           ?_I2C_2_Master_Idle 0000             ?_I2C_2_Master_Init 0000             ?_I2C_2_Master_Read 0000  
                ??_setMotorPWM 0010             ?_I2C_2_Master_Stop 0000               ___lwdiv@quotient 000B  
     initDCmotorsPWM@PWMperiod 0001            ??_I2C_2_Master_Idle 0001            ??_I2C_2_Master_Init 0001  
          ??_I2C_2_Master_Read 0002                 ___wmul@product 0005                       _LATAbits 0F79  
                ??_resetTimer0 0001            ??_I2C_2_Master_Stop 0002                       _LATCbits 0F7B  
                     _LATEbits 0F7D                       _LATGbits 0F7F                       _LATHbits 0F80  
                ?_turn_left_90 0000                       _PIE0bits 0E29                       _PIE2bits 0E2B  
                     _PIE4bits 0E2D                       _PIR4bits 0E37               ?_initDCmotorsPWM 0001  
            ??_sendCharSerial4 0000                       _SSP2CON2 0EDA                       _SSP2STAT 0ED8  
                   _ADCON0bits 0F60      __end_of_I2C_2_Master_Idle 0028      __end_of_I2C_2_Master_Init 002A  
    __end_of_I2C_2_Master_Read 0042              ___wmul@multiplier 0001      __end_of_I2C_2_Master_Stop 000A  
                    main@pRGBC 00A2                   setMotorPWM@m 000E    I2C_2_Master_Write@data_byte 0002  
        main@actions_completed 00AE              ??_color_read_Blue 0007                   _TxBufReadCnt 0014  
                    _turn_r_90 0000*                  ??_color_read 000E  __end_of_I2C_2_Master_RepStart 000A  
           color_read_Blue@tmp 000A                 ??_turn_left_90 0000            __end_of_setMotorPWM 016C  
                 ??_initUSART4 0001                       __Hrparam 0000*                      __Lrparam 0000* 
          __end_of_resetTimer0 000A             _invert_instruction 0000*            __end_of_color_read 005E  
                   _ANSELAbits 0E92                     _ANSELDbits 0EA7                     _ANSELFbits 0EB4  
                   _T0CON0bits 0FD5                     _T0CON1bits 0FD6        ??_color_click_toggleLED 0001  
          ?_invert_instruction 0000                ___lwdiv@divisor 0009             __end_of_initUSART4 001E  
              ___lwdiv@counter 000D                       __ptext10 0000                       __ptext11 0000  
                     __ptext20 0000                       __ptext12 0000                       __ptext21 0000  
                     __ptext13 0000                       __ptext22 0000                       __ptext14 0000  
                     __ptext23 0000                       __ptext15 0000                       __ptext24 0000  
                     __ptext16 0000                       __ptext25 0000                       __ptext17 0000  
                     __ptext26 0000                       __ptext18 0000                       __ptext19 0000  
                     __ptext28 0000                     ?_turn_r_90 0000                   _SSP2CON1bits 0ED9  
                 _SSP2CON2bits 0EDA           ??_invert_instruction 0000                       isa$xinst 0000  
                   _RC4STAbits 0EE7                       main@RGBC 00A6                       int$flags 0000  
                     _turn_180 0000*                    _INTCONbits 0FF2              main@going_forward 00B2  
                  _setMotorPWM 0000              ??_get16bitTMR0val 0003                       intlevel2 0000* 
             ??_fullSpeedAhead 0018                    _resetTimer0 0000               _color_click_init 0000  
                   _SSP2DATPPS 0E1D                     _SSP2CLKPPS 0E1C              main@measured_time 00A4  
                  ??_turn_r_90 0000                     _TX4STAbits 0EE8                _sendCharSerial4 0000  
