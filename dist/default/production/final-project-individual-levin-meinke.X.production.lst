

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Mar 13 18:33:35 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=3
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    59                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    60   000000                     
    61                           ; Generated 21/07/2023 GMT
    62                           ; 
    63                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution. Publication is not required when
    77                           ;        this file is used in an embedded application.
    78                           ; 
    79                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    80                           ;        software without specific prior written permission.
    81                           ; 
    82                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    83                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    84                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    85                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    86                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    87                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    88                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    89                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    90                           ; 
    91                           ; 
    92                           ; Code-generator required, PIC18F67K40 Definitions
    93                           ; 
    94                           ; SFR Addresses
    95   000000                     _TX4REG	set	3812
    96   000000                     _RC4STAbits	set	3815
    97   000000                     _SP4BRGH	set	3814
    98   000000                     _TRISFbits	set	3974
    99   000000                     _LATHbits	set	3968
   100   000000                     _TRISAbits	set	3969
   101   000000                     _TRISGbits	set	3975
   102   000000                     _SSP2CON2bits	set	3802
   103   000000                     _RX4PPS	set	3605
   104   000000                     _SSP2CLKPPS	set	3612
   105   000000                     _SSP2DATPPS	set	3613
   106   000000                     _ANSELDbits	set	3751
   107   000000                     _SSP2ADD	set	3798
   108   000000                     _SSP2CON1bits	set	3801
   109   000000                     _LATAbits	set	3961
   110   000000                     _LATGbits	set	3967
   111   000000                     _LATCbits	set	3963
   112   000000                     _LATEbits	set	3965
   113   000000                     _PORTBbits	set	3978
   114   000000                     _TRISHbits	set	3976
   115   000000                     _T2PR	set	4028
   116   000000                     _T2CONbits	set	4029
   117   000000                     _CCPR2H	set	4006
   118   000000                     _CCPR1H	set	4010
   119   000000                     _TRISCbits	set	3971
   120   000000                     _TRISDbits	set	3972
   121   000000                     _TRISEbits	set	3973
   122   000000                     _RC4REG	set	3811
   123   000000                     _SP4BRGL	set	3813
   124   000000                     _TX4STAbits	set	3816
   125   000000                     _BAUD4CONbits	set	3817
   126   000000                     _SSP2CON2	set	3802
   127   000000                     _CCPR4H	set	3873
   128   000000                     _CCPR3H	set	3877
   129   000000                     _SSP2STAT	set	3800
   130   000000                     _ANSELFbits	set	3764
   131   000000                     _SSP2BUF	set	3797
   132   000000                     _PIE0bits	set	3625
   133   000000                     _PIE2bits	set	3627
   134   000000                     _RC7PPS	set	3689
   135   000000                     _RD5PPS	set	3695
   136   000000                     _RE2PPS	set	3700
   137   000000                     _RD6PPS	set	3696
   138   000000                     _RE4PPS	set	3702
   139   000000                     _RG6PPS	set	3720
   140   000000                     _ANSELAbits	set	3730
   141   000000                     _TMR0L	set	4051
   142   000000                     _TMR0H	set	4052
   143   000000                     _T0CON0bits	set	4053
   144   000000                     _T0CON1bits	set	4054
   145   000000                     _T2CLKCONbits	set	4031
   146   000000                     _T2HLTbits	set	4030
   147   000000                     _CCP1CONbits	set	4011
   148   000000                     _CCPTMRS0bits	set	4013
   149   000000                     _CCP2CONbits	set	4007
   150   000000                     _ADREFbits	set	3928
   151   000000                     _CCP3CONbits	set	3878
   152   000000                     _CCP4CONbits	set	3874
   153   000000                     _INTCONbits	set	4082
   154   000000                     _PIE4bits	set	3629
   155   000000                     _PIR4bits	set	3639
   156   000000                     _RC0PPS	set	3682
   157   000000                     _ADPCH	set	3935
   158   000000                     _ADRESH	set	3940
   159   000000                     _ADCON0bits	set	3936
   160                           
   161                           	psect	smallconst
   162   000E00                     __psmallconst:
   163                           	callstack 0
   164   000E00  00                 	db	0
   165   000E01                     STR_2:
   166                           
   167                           ; BSR set to: 14
   168   000E01  67                 	db	103	;'g'
   169   000E02  72                 	db	114	;'r'
   170   000E03  65                 	db	101	;'e'
   171   000E04  65                 	db	101	;'e'
   172   000E05  6E                 	db	110	;'n'
   173   000E06  20                 	db	32
   174   000E07  3D                 	db	61	;'='
   175   000E08  20                 	db	32
   176   000E09  25                 	db	37
   177   000E0A  64                 	db	100	;'d'
   178   000E0B  20                 	db	32
   179   000E0C  0D                 	db	13
   180   000E0D  0A                 	db	10
   181   000E0E  00                 	db	0
   182   000E0F                     STR_4:
   183                           
   184                           ; BSR set to: 14
   185   000E0F  63                 	db	99	;'c'
   186   000E10  6C                 	db	108	;'l'
   187   000E11  65                 	db	101	;'e'
   188   000E12  61                 	db	97	;'a'
   189   000E13  72                 	db	114	;'r'
   190   000E14  20                 	db	32
   191   000E15  3D                 	db	61	;'='
   192   000E16  20                 	db	32
   193   000E17  25                 	db	37
   194   000E18  64                 	db	100	;'d'
   195   000E19  20                 	db	32
   196   000E1A  0D                 	db	13
   197   000E1B  0A                 	db	10
   198   000E1C  00                 	db	0
   199   000E1D                     STR_3:
   200                           
   201                           ; BSR set to: 14
   202   000E1D  62                 	db	98	;'b'
   203   000E1E  6C                 	db	108	;'l'
   204   000E1F  75                 	db	117	;'u'
   205   000E20  65                 	db	101	;'e'
   206   000E21  20                 	db	32
   207   000E22  3D                 	db	61	;'='
   208   000E23  20                 	db	32
   209   000E24  25                 	db	37
   210   000E25  64                 	db	100	;'d'
   211   000E26  20                 	db	32
   212   000E27  0D                 	db	13
   213   000E28  0A                 	db	10
   214   000E29  00                 	db	0
   215   000E2A                     STR_1:
   216                           
   217                           ; BSR set to: 14
   218   000E2A  72                 	db	114	;'r'
   219   000E2B  65                 	db	101	;'e'
   220   000E2C  64                 	db	100	;'d'
   221   000E2D  20                 	db	32
   222   000E2E  3D                 	db	61	;'='
   223   000E2F  20                 	db	32
   224   000E30  25                 	db	37
   225   000E31  64                 	db	100	;'d'
   226   000E32  20                 	db	32
   227   000E33  0D                 	db	13
   228   000E34  0A                 	db	10
   229   000E35  00                 	db	0
   230   000E36  00                 	db	0	; dummy byte at the end
   231   000000                     
   232                           ; #config settings
   233                           
   234                           	psect	cinit
   235   0021AA                     __pcinit:
   236                           	callstack 0
   237   0021AA                     start_initialization:
   238                           	callstack 0
   239   0021AA                     __initialization:
   240                           	callstack 0
   241                           
   242                           ; Clear objects allocated to BANK0 (92 bytes)
   243   0021AA  EE00  F060         	lfsr	0,__pbssBANK0
   244   0021AE  0E5C               	movlw	92
   245   0021B0                     clear_0:
   246   0021B0  6AEE               	clrf	postinc0,c
   247   0021B2  06E8               	decf	wreg,f,c
   248   0021B4  E1FD               	bnz	clear_0
   249                           
   250                           ; Clear objects allocated to COMRAM (29 bytes)
   251   0021B6  EE00  F02F         	lfsr	0,__pbssCOMRAM
   252   0021BA  0E1D               	movlw	29
   253   0021BC                     clear_1:
   254   0021BC  6AEE               	clrf	postinc0,c
   255   0021BE  06E8               	decf	wreg,f,c
   256   0021C0  E1FD               	bnz	clear_1
   257   0021C2                     end_of_initialization:
   258                           	callstack 0
   259   0021C2                     __end_of__initialization:
   260                           	callstack 0
   261   0021C2  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   262   0021C4  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   263   0021C6  0E00               	movlw	low (__Lsmallconst shr (0+16))
   264   0021C8  6EF8               	movwf	tblptru,c
   265   0021CA  0E0E               	movlw	high __Lsmallconst
   266   0021CC  6EF7               	movwf	tblptrh,c
   267   0021CE  0100               	movlb	0
   268   0021D0  EF1C  F007         	goto	_main	;jump to C main() function
   269                           
   270                           	psect	bssCOMRAM
   271   00002F                     __pbssCOMRAM:
   272                           	callstack 0
   273   00002F                     _EUSART4RXbuf:
   274                           	callstack 0
   275   00002F                     	ds	20
   276   000043                     _width:
   277                           	callstack 0
   278   000043                     	ds	2
   279   000045                     _prec:
   280                           	callstack 0
   281   000045                     	ds	2
   282   000047                     _flags:
   283                           	callstack 0
   284   000047                     	ds	1
   285   000048                     _TxBufReadCnt:
   286                           	callstack 0
   287   000048                     	ds	1
   288   000049                     _TxBufWriteCnt:
   289                           	callstack 0
   290   000049                     	ds	1
   291   00004A                     _RxBufReadCnt:
   292                           	callstack 0
   293   00004A                     	ds	1
   294   00004B                     _RxBufWriteCnt:
   295                           	callstack 0
   296   00004B                     	ds	1
   297                           
   298                           	psect	bssBANK0
   299   000060                     __pbssBANK0:
   300                           	callstack 0
   301   000060                     _EUSART4TXbuf:
   302                           	callstack 0
   303   000060                     	ds	60
   304   00009C                     _dbuf:
   305                           	callstack 0
   306   00009C                     	ds	32
   307                           
   308                           	psect	cstackBANK1
   309   000100                     __pcstackBANK1:
   310                           	callstack 0
   311   000100                     main@actions:
   312                           	callstack 0
   313                           
   314                           ; 40 bytes @ 0x0
   315   000100                     	ds	40
   316   000128                     main@clear_val:
   317                           	callstack 0
   318                           
   319                           ; 20 bytes @ 0x28
   320   000128                     	ds	20
   321   00013C                     main@red_val:
   322                           	callstack 0
   323                           
   324                           ; 20 bytes @ 0x3C
   325   00013C                     	ds	20
   326   000150                     main@green_val:
   327                           	callstack 0
   328                           
   329                           ; 20 bytes @ 0x50
   330   000150                     	ds	20
   331   000164                     main@blue_val:
   332                           	callstack 0
   333                           
   334                           ; 20 bytes @ 0x64
   335   000164                     	ds	20
   336   000178                     main@timings:
   337                           	callstack 0
   338                           
   339                           ; 40 bytes @ 0x78
   340   000178                     	ds	40
   341   0001A0                     main@pclear_val:
   342                           	callstack 0
   343                           
   344                           ; 2 bytes @ 0xA0
   345   0001A0                     	ds	2
   346   0001A2                     main@pred_val:
   347                           	callstack 0
   348                           
   349                           ; 2 bytes @ 0xA2
   350   0001A2                     	ds	2
   351   0001A4                     main@pblue_val:
   352                           	callstack 0
   353                           
   354                           ; 2 bytes @ 0xA4
   355   0001A4                     	ds	2
   356   0001A6                     main@pgreen_val:
   357                           	callstack 0
   358                           
   359                           ; 2 bytes @ 0xA6
   360   0001A6                     	ds	2
   361   0001A8                     main@pRGBC:
   362                           	callstack 0
   363                           
   364                           ; 2 bytes @ 0xA8
   365   0001A8                     	ds	2
   366   0001AA                     main@lum:
   367                           	callstack 0
   368                           
   369                           ; 2 bytes @ 0xAA
   370   0001AA                     	ds	2
   371   0001AC                     main@measured_time:
   372                           	callstack 0
   373                           
   374                           ; 2 bytes @ 0xAC
   375   0001AC                     	ds	2
   376   0001AE                     main@actions_completed:
   377                           	callstack 0
   378                           
   379                           ; 2 bytes @ 0xAE
   380   0001AE                     	ds	2
   381   0001B0                     main@going_forward:
   382                           	callstack 0
   383                           
   384                           ; 1 bytes @ 0xB0
   385   0001B0                     	ds	1
   386   0001B1                     main@RGBC:
   387                           	callstack 0
   388                           
   389                           ; 8 bytes @ 0xB1
   390   0001B1                     	ds	8
   391   0001B9                     main@motorL:
   392                           	callstack 0
   393                           
   394                           ; 9 bytes @ 0xB9
   395   0001B9                     	ds	9
   396   0001C2                     main@motorR:
   397                           	callstack 0
   398                           
   399                           ; 9 bytes @ 0xC2
   400   0001C2                     	ds	9
   401   0001CB                     main@pmL:
   402                           	callstack 0
   403                           
   404                           ; 2 bytes @ 0xCB
   405   0001CB                     	ds	2
   406   0001CD                     main@pmR:
   407                           	callstack 0
   408                           
   409                           ; 2 bytes @ 0xCD
   410   0001CD                     	ds	2
   411                           
   412                           	psect	cstackCOMRAM
   413   000001                     __pcstackCOMRAM:
   414                           	callstack 0
   415   000001                     i2sendCharSerial4@charToSend:
   416                           	callstack 0
   417                           
   418                           ; 1 bytes @ 0x0
   419   000001                     	ds	1
   420   000002                     ??_color_click_toggleLED:
   421   000002                     ??_I2C_2_Master_Idle:
   422   000002                     ?_get16bitTMR0val:
   423                           	callstack 0
   424   000002                     ?___wmul:
   425                           	callstack 0
   426   000002                     ?___awdiv:
   427                           	callstack 0
   428   000002                     ?___awmod:
   429                           	callstack 0
   430   000002                     sendCharSerial4@charToSend:
   431                           	callstack 0
   432   000002                     initDCmotorsPWM@PWMperiod:
   433                           	callstack 0
   434   000002                     ___wmul@multiplier:
   435                           	callstack 0
   436   000002                     ___awdiv@dividend:
   437                           	callstack 0
   438   000002                     ___awmod@dividend:
   439                           	callstack 0
   440   000002                     fputc@c:
   441                           	callstack 0
   442                           
   443                           ; 2 bytes @ 0x1
   444   000002                     	ds	1
   445   000003                     ??_I2C_2_Master_Read:
   446   000003                     I2C_2_Master_Write@data_byte:
   447                           	callstack 0
   448   000003                     sendStringSerial4@string:
   449                           	callstack 0
   450                           
   451                           ; 2 bytes @ 0x2
   452   000003                     	ds	1
   453   000004                     ??_get16bitTMR0val:
   454   000004                     color_writetoaddr@value:
   455                           	callstack 0
   456   000004                     I2C_2_Master_Read@ack:
   457                           	callstack 0
   458   000004                     fputc@fp:
   459                           	callstack 0
   460   000004                     ___wmul@multiplicand:
   461                           	callstack 0
   462   000004                     ___awdiv@divisor:
   463                           	callstack 0
   464   000004                     ___awmod@divisor:
   465                           	callstack 0
   466                           
   467                           ; 2 bytes @ 0x3
   468   000004                     	ds	1
   469   000005                     ??_fputc:
   470   000005                     color_writetoaddr@address:
   471                           	callstack 0
   472   000005                     I2C_2_Master_Read@tmp:
   473                           	callstack 0
   474                           
   475                           ; 1 bytes @ 0x4
   476   000005                     	ds	1
   477   000006                     ??_color_click_init:
   478   000006                     ?_color_read_Red:
   479                           	callstack 0
   480   000006                     ?_color_read_Green:
   481                           	callstack 0
   482   000006                     ?_color_read_Blue:
   483                           	callstack 0
   484   000006                     ?_color_read_Clear:
   485                           	callstack 0
   486   000006                     ___awdiv@counter:
   487                           	callstack 0
   488   000006                     ___awmod@counter:
   489                           	callstack 0
   490   000006                     get16bitTMR0val@timer_val:
   491                           	callstack 0
   492   000006                     ___wmul@product:
   493                           	callstack 0
   494                           
   495                           ; 2 bytes @ 0x5
   496   000006                     	ds	1
   497   000007                     ___awdiv@sign:
   498                           	callstack 0
   499   000007                     ___awmod@sign:
   500                           	callstack 0
   501                           
   502                           ; 1 bytes @ 0x6
   503   000007                     	ds	1
   504   000008                     ??_color_read_Red:
   505   000008                     ??_color_read_Green:
   506   000008                     ??_color_read_Blue:
   507   000008                     ??_color_read_Clear:
   508   000008                     ?_abs:
   509                           	callstack 0
   510   000008                     ?___lwdiv:
   511                           	callstack 0
   512   000008                     ___awdiv@quotient:
   513                           	callstack 0
   514   000008                     ___lwdiv@dividend:
   515                           	callstack 0
   516   000008                     abs@a:
   517                           	callstack 0
   518                           
   519                           ; 2 bytes @ 0x7
   520   000008                     	ds	2
   521   00000A                     ??_abs:
   522   00000A                     ___lwdiv@divisor:
   523                           	callstack 0
   524                           
   525                           ; 2 bytes @ 0x9
   526   00000A                     	ds	1
   527   00000B                     color_read_Clear@tmp:
   528                           	callstack 0
   529   00000B                     color_read_Red@tmp:
   530                           	callstack 0
   531   00000B                     color_read_Green@tmp:
   532                           	callstack 0
   533   00000B                     color_read_Blue@tmp:
   534                           	callstack 0
   535                           
   536                           ; 2 bytes @ 0xA
   537   00000B                     	ds	1
   538   00000C                     vfpfcnvrt@fp:
   539                           	callstack 0
   540   00000C                     ___lwdiv@quotient:
   541                           	callstack 0
   542                           
   543                           ; 2 bytes @ 0xB
   544   00000C                     	ds	1
   545   00000D                     vfpfcnvrt@fmt:
   546                           	callstack 0
   547   00000D                     color_read@p:
   548                           	callstack 0
   549                           
   550                           ; 2 bytes @ 0xC
   551   00000D                     	ds	1
   552   00000E                     ___lwdiv@counter:
   553                           	callstack 0
   554   00000E                     vfpfcnvrt@ap:
   555                           	callstack 0
   556                           
   557                           ; 1 bytes @ 0xD
   558   00000E                     	ds	1
   559   00000F                     ??_vfpfcnvrt:
   560   00000F                     setMotorPWM@m:
   561                           	callstack 0
   562                           
   563                           ; 2 bytes @ 0xE
   564   00000F                     	ds	1
   565   000010                     vfpfcnvrt@done:
   566                           	callstack 0
   567                           
   568                           ; 1 bytes @ 0xF
   569   000010                     	ds	1
   570   000011                     ??_setMotorPWM:
   571   000011                     vfpfcnvrt@cp:
   572                           	callstack 0
   573                           
   574                           ; 1 bytes @ 0x10
   575   000011                     	ds	1
   576   000012                     vfpfcnvrt@convarg:
   577                           	callstack 0
   578                           
   579                           ; 4 bytes @ 0x11
   580   000012                     	ds	1
   581   000013                     setMotorPWM@posDuty:
   582                           	callstack 0
   583                           
   584                           ; 1 bytes @ 0x12
   585   000013                     	ds	1
   586   000014                     setMotorPWM@negDuty:
   587                           	callstack 0
   588                           
   589                           ; 1 bytes @ 0x13
   590   000014                     	ds	1
   591   000015                     fullSpeedAhead@mL:
   592                           	callstack 0
   593   000015                     stop@mL:
   594                           	callstack 0
   595                           
   596                           ; 2 bytes @ 0x14
   597   000015                     	ds	1
   598   000016                     vfpfcnvrt@c:
   599                           	callstack 0
   600                           
   601                           ; 1 bytes @ 0x15
   602   000016                     	ds	1
   603   000017                     ?_vfprintf:
   604                           	callstack 0
   605   000017                     vfprintf@fp:
   606                           	callstack 0
   607   000017                     fullSpeedAhead@mR:
   608                           	callstack 0
   609   000017                     stop@mR:
   610                           	callstack 0
   611                           
   612                           ; 2 bytes @ 0x16
   613   000017                     	ds	1
   614   000018                     vfprintf@fmt:
   615                           	callstack 0
   616                           
   617                           ; 1 bytes @ 0x17
   618   000018                     	ds	1
   619   000019                     ??_fullSpeedAhead:
   620   000019                     vfprintf@ap:
   621                           	callstack 0
   622   000019                     turn_left_90@mL:
   623                           	callstack 0
   624   000019                     turn_right_90@mL:
   625                           	callstack 0
   626   000019                     turn_left_135@mL:
   627                           	callstack 0
   628   000019                     turn_right_135@mL:
   629                           	callstack 0
   630   000019                     reverse_after_read@mL:
   631                           	callstack 0
   632   000019                     reverse_one_square@mL:
   633                           	callstack 0
   634                           
   635                           ; 2 bytes @ 0x18
   636   000019                     	ds	1
   637   00001A                     vfprintf@cfmt:
   638                           	callstack 0
   639                           
   640                           ; 1 bytes @ 0x19
   641   00001A                     	ds	1
   642   00001B                     ?_sprintf:
   643                           	callstack 0
   644   00001B                     turn_left_90@mR:
   645                           	callstack 0
   646   00001B                     turn_right_90@mR:
   647                           	callstack 0
   648   00001B                     turn_left_135@mR:
   649                           	callstack 0
   650   00001B                     turn_right_135@mR:
   651                           	callstack 0
   652   00001B                     reverse_after_read@mR:
   653                           	callstack 0
   654   00001B                     reverse_one_square@mR:
   655                           	callstack 0
   656   00001B                     sprintf@s:
   657                           	callstack 0
   658                           
   659                           ; 2 bytes @ 0x1A
   660   00001B                     	ds	2
   661   00001D                     ??_turn_left_90:
   662   00001D                     ??_turn_right_90:
   663   00001D                     ??_turn_left_135:
   664   00001D                     ??_turn_right_135:
   665   00001D                     ??_reverse_after_read:
   666   00001D                     ??_reverse_one_square:
   667   00001D                     sprintf@fmt:
   668                           	callstack 0
   669                           
   670                           ; 1 bytes @ 0x1C
   671   00001D                     	ds	3
   672   000020                     sprintf@ap:
   673                           	callstack 0
   674                           
   675                           ; 1 bytes @ 0x1F
   676   000020                     	ds	1
   677   000021                     sprintf@f:
   678                           	callstack 0
   679                           
   680                           ; 12 bytes @ 0x20
   681   000021                     	ds	12
   682   00002D                     ??_main:
   683                           
   684                           ; 1 bytes @ 0x2C
   685   00002D                     	ds	2
   686                           
   687 ;;
   688 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   689 ;;
   690 ;; *************** function _main *****************
   691 ;; Defined at:
   692 ;;		line 23 in file "main.c"
   693 ;; Parameters:    Size  Location     Type
   694 ;;		None
   695 ;; Auto vars:     Size  Location     Type
   696 ;;  timings        40  120[BANK1 ] unsigned int [20]
   697 ;;  actions        40    0[BANK1 ] int [20]
   698 ;;  blue_val       20  100[BANK1 ] unsigned char [20]
   699 ;;  green_val      20   80[BANK1 ] unsigned char [20]
   700 ;;  red_val        20   60[BANK1 ] unsigned char [20]
   701 ;;  clear_val      20   40[BANK1 ] unsigned char [20]
   702 ;;  motorR          9  194[BANK1 ] struct DC_motor
   703 ;;  motorL          9  185[BANK1 ] struct DC_motor
   704 ;;  RGBC            8  177[BANK1 ] struct RGBC_val
   705 ;;  pmR             2  205[BANK1 ] PTR struct DC_motor
   706 ;;		 -> main@motorR(9), 
   707 ;;  pmL             2  203[BANK1 ] PTR struct DC_motor
   708 ;;		 -> main@motorL(9), 
   709 ;;  action_to_do    2    0        int 
   710 ;;  actions_comp    2  174[BANK1 ] int 
   711 ;;  measured_tim    2  172[BANK1 ] unsigned int 
   712 ;;  upcoming_act    2    0        int 
   713 ;;  lum             2  170[BANK1 ] unsigned int 
   714 ;;  pRGBC           2  168[BANK1 ] PTR struct RGBC_val
   715 ;;		 -> main@RGBC(8), 
   716 ;;  PWMcycle        2    0        unsigned int 
   717 ;;  pgreen_val      2  166[BANK1 ] PTR unsigned char 
   718 ;;		 -> main@green_val(20), 
   719 ;;  pblue_val       2  164[BANK1 ] PTR unsigned char 
   720 ;;		 -> main@blue_val(20), 
   721 ;;  pred_val        2  162[BANK1 ] PTR unsigned char 
   722 ;;		 -> main@red_val(20), 
   723 ;;  pclear_val      2  160[BANK1 ] PTR unsigned char 
   724 ;;		 -> main@clear_val(20), 
   725 ;;  previously_m    2    0        unsigned int 
   726 ;;  going_forwar    1  176[BANK1 ] _Bool 
   727 ;; Return value:  Size  Location     Type
   728 ;;                  1    wreg      void 
   729 ;; Registers used:
   730 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   731 ;; Tracked objects:
   732 ;;		On entry : 0/0
   733 ;;		On exit  : 0/0
   734 ;;		Unchanged: 0/0
   735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   737 ;;      Locals:         0       0     207       0       0       0       0       0       0       0       0       0       
      +0       0       0
   738 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   739 ;;      Totals:         2       0     207       0       0       0       0       0       0       0       0       0       
      +0       0       0
   740 ;;Total ram usage:      209 bytes
   741 ;; Hardware stack levels required when called: 7
   742 ;; This function calls:
   743 ;;		_I2C_2_Master_Init
   744 ;;		_Interrupts_init
   745 ;;		_Timer0_init
   746 ;;		_color_click_init
   747 ;;		_color_click_toggleLED
   748 ;;		_color_read
   749 ;;		_color_read_Blue
   750 ;;		_color_read_Clear
   751 ;;		_color_read_Green
   752 ;;		_color_read_Red
   753 ;;		_color_writetoaddr
   754 ;;		_fullSpeedAhead
   755 ;;		_get16bitTMR0val
   756 ;;		_initDCmotorsPWM
   757 ;;		_initUSART4
   758 ;;		_resetTimer0
   759 ;;		_reverse_after_read
   760 ;;		_reverse_one_square
   761 ;;		_sendStringSerial4
   762 ;;		_sprintf
   763 ;;		_stop
   764 ;;		_turn_left_135
   765 ;;		_turn_left_90
   766 ;;		_turn_right_135
   767 ;;		_turn_right_90
   768 ;; This function is called by:
   769 ;;		Startup code after reset
   770 ;; This function uses a non-reentrant model
   771 ;;
   772                           
   773                           	psect	text0
   774   000E38                     __ptext0:
   775                           	callstack 0
   776   000E38                     _main:
   777                           	callstack 24
   778   000E38                     
   779                           ;main.c: 25:     Timer0_init();
   780   000E38  EC36  F011         	call	_Timer0_init	;wreg free
   781   000E3C                     
   782                           ;main.c: 26:     Interrupts_init();
   783   000E3C  EC82  F011         	call	_Interrupts_init	;wreg free
   784   000E40                     
   785                           ;main.c: 27:     I2C_2_Master_Init();
   786   000E40  ECEA  F010         	call	_I2C_2_Master_Init	;wreg free
   787   000E44                     
   788                           ;main.c: 28:     color_click_init();
   789   000E44  EC22  F010         	call	_color_click_init	;wreg free
   790   000E48                     
   791                           ;main.c: 29:     initDCmotorsPWM(99);
   792   000E48  0E00               	movlw	0
   793   000E4A  6E03               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   794   000E4C  0E63               	movlw	99
   795   000E4E  6E02               	movwf	initDCmotorsPWM@PWMperiod^0,c
   796   000E50  EC48  F00E         	call	_initDCmotorsPWM	;wreg free
   797   000E54                     
   798                           ;main.c: 30:     initUSART4();
   799   000E54  EC46  F011         	call	_initUSART4	;wreg free
   800   000E58                     
   801                           ;main.c: 33:     color_click_toggleLED();
   802   000E58  EC20  F00F         	call	_color_click_toggleLED	;wreg free
   803   000E5C                     
   804                           ;main.c: 36:     LATHbits.LATH3=1;
   805   000E5C  8680               	bsf	128,3,c	;volatile
   806   000E5E                     
   807                           ;main.c: 37:     TRISHbits.TRISH3=0;
   808   000E5E  9688               	bcf	136,3,c	;volatile
   809   000E60                     
   810                           ;main.c: 40:     TRISFbits.TRISF2=1;
   811   000E60  8486               	bsf	134,2,c	;volatile
   812   000E62                     
   813                           ;main.c: 41:     ANSELFbits.ANSELF2=0;
   814   000E62  010E               	movlb	14	; () banked
   815   000E64  95B4               	bcf	180,2,b	;volatile
   816   000E66                     
   817                           ; BSR set to: 14
   818                           ;main.c: 49:     motorL.power=0;
   819   000E66  0E00               	movlw	0
   820   000E68  0101               	movlb	1	; () banked
   821   000E6A  6FB9               	movwf	main@motorL& (0+255),b
   822   000E6C                     
   823                           ; BSR set to: 1
   824                           ;main.c: 50:     motorL.direction=1;
   825   000E6C  0E01               	movlw	1
   826   000E6E  6FBA               	movwf	(main@motorL+1)& (0+255),b
   827   000E70                     
   828                           ; BSR set to: 1
   829                           ;main.c: 51:     motorL.brakemode=1;
   830   000E70  0E01               	movlw	1
   831   000E72  6FBB               	movwf	(main@motorL+2)& (0+255),b
   832   000E74                     
   833                           ; BSR set to: 1
   834                           ;main.c: 52:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   835   000E74  0EAA               	movlw	170
   836   000E76  6FBE               	movwf	(main@motorL+5)& (0+255),b
   837   000E78  0E0F               	movlw	15
   838   000E7A  6FBF               	movwf	(main@motorL+6)& (0+255),b
   839   000E7C                     
   840                           ; BSR set to: 1
   841                           ;main.c: 53:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   842   000E7C  0EA6               	movlw	166
   843   000E7E  6FC0               	movwf	(main@motorL+7)& (0+255),b
   844   000E80  0E0F               	movlw	15
   845   000E82  6FC1               	movwf	(main@motorL+8)& (0+255),b
   846   000E84                     
   847                           ; BSR set to: 1
   848                           ;main.c: 54:     motorL.PWMperiod=PWMcycle;
   849   000E84  0E00               	movlw	0
   850   000E86  6FBD               	movwf	(main@motorL+4)& (0+255),b
   851   000E88  0E63               	movlw	99
   852   000E8A  6FBC               	movwf	(main@motorL+3)& (0+255),b
   853   000E8C                     
   854                           ; BSR set to: 1
   855                           ;main.c: 56:     motorR.power=0;
   856   000E8C  0E00               	movlw	0
   857   000E8E  6FC2               	movwf	main@motorR& (0+255),b
   858   000E90                     
   859                           ; BSR set to: 1
   860                           ;main.c: 57:     motorR.direction=1;
   861   000E90  0E01               	movlw	1
   862   000E92  6FC3               	movwf	(main@motorR+1)& (0+255),b
   863   000E94                     
   864                           ; BSR set to: 1
   865                           ;main.c: 58:     motorR.brakemode=1;
   866   000E94  0E01               	movlw	1
   867   000E96  6FC4               	movwf	(main@motorR+2)& (0+255),b
   868   000E98                     
   869                           ; BSR set to: 1
   870                           ;main.c: 59:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   871   000E98  0E25               	movlw	37
   872   000E9A  6FC7               	movwf	(main@motorR+5)& (0+255),b
   873   000E9C  0E0F               	movlw	15
   874   000E9E  6FC8               	movwf	(main@motorR+6)& (0+255),b
   875   000EA0                     
   876                           ; BSR set to: 1
   877                           ;main.c: 60:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   878   000EA0  0E21               	movlw	33
   879   000EA2  6FC9               	movwf	(main@motorR+7)& (0+255),b
   880   000EA4  0E0F               	movlw	15
   881   000EA6  6FCA               	movwf	(main@motorR+8)& (0+255),b
   882   000EA8                     
   883                           ; BSR set to: 1
   884                           ;main.c: 61:     motorR.PWMperiod=PWMcycle;
   885   000EA8  0E00               	movlw	0
   886   000EAA  6FC6               	movwf	(main@motorR+4)& (0+255),b
   887   000EAC  0E63               	movlw	99
   888   000EAE  6FC5               	movwf	(main@motorR+3)& (0+255),b
   889   000EB0                     
   890                           ; BSR set to: 1
   891                           ;main.c: 64:     struct DC_motor *pmL= &motorL;
   892   000EB0  0EB9               	movlw	low main@motorL
   893   000EB2  6FCB               	movwf	main@pmL& (0+255),b
   894   000EB4  0E01               	movlw	high main@motorL
   895   000EB6  6FCC               	movwf	(main@pmL+1)& (0+255),b
   896   000EB8                     
   897                           ; BSR set to: 1
   898                           ;main.c: 65:     struct DC_motor *pmR= &motorR;
   899   000EB8  0EC2               	movlw	low main@motorR
   900   000EBA  6FCD               	movwf	main@pmR& (0+255),b
   901   000EBC  0E01               	movlw	high main@motorR
   902   000EBE  6FCE               	movwf	(main@pmR+1)& (0+255),b
   903   000EC0                     
   904                           ; BSR set to: 1
   905                           ;main.c: 68:     struct RGBC_val RGBC;;main.c: 69:     RGBC.R = 0;
   906   000EC0  0E00               	movlw	0
   907   000EC2  6FB2               	movwf	(main@RGBC+1)& (0+255),b
   908   000EC4  0E00               	movlw	0
   909   000EC6  6FB1               	movwf	main@RGBC& (0+255),b
   910   000EC8                     
   911                           ; BSR set to: 1
   912                           ;main.c: 70:     RGBC.B = 0;
   913   000EC8  0E00               	movlw	0
   914   000ECA  6FB6               	movwf	(main@RGBC+5)& (0+255),b
   915   000ECC  0E00               	movlw	0
   916   000ECE  6FB5               	movwf	(main@RGBC+4)& (0+255),b
   917   000ED0                     
   918                           ; BSR set to: 1
   919                           ;main.c: 71:     RGBC.G = 0;
   920   000ED0  0E00               	movlw	0
   921   000ED2  6FB4               	movwf	(main@RGBC+3)& (0+255),b
   922   000ED4  0E00               	movlw	0
   923   000ED6  6FB3               	movwf	(main@RGBC+2)& (0+255),b
   924   000ED8                     
   925                           ; BSR set to: 1
   926                           ;main.c: 72:     RGBC.C = 0;
   927   000ED8  0E00               	movlw	0
   928   000EDA  6FB8               	movwf	(main@RGBC+7)& (0+255),b
   929   000EDC  0E00               	movlw	0
   930   000EDE  6FB7               	movwf	(main@RGBC+6)& (0+255),b
   931   000EE0                     
   932                           ; BSR set to: 1
   933                           ;main.c: 75:     struct RGBC_val *pRGBC= &RGBC;
   934   000EE0  0EB1               	movlw	low main@RGBC
   935   000EE2  6FA8               	movwf	main@pRGBC& (0+255),b
   936   000EE4  0E01               	movlw	high main@RGBC
   937   000EE6  6FA9               	movwf	(main@pRGBC+1)& (0+255),b
   938   000EE8                     
   939                           ; BSR set to: 1
   940                           ;main.c: 78:     char clear_val[20];;main.c: 79:     char red_val[20];;main.c: 80:     c
      +                          har green_val[20];;main.c: 81:     char blue_val[20];;main.c: 82:     char *pclear_val;;
      +                          main.c: 83:     char *pred_val;;main.c: 84:     char *pblue_val;;main.c: 85:     char *p
      +                          green_val;;main.c: 86:     pclear_val = &clear_val[0];
   941   000EE8  0E28               	movlw	low main@clear_val
   942   000EEA  6FA0               	movwf	main@pclear_val& (0+255),b
   943   000EEC  0E01               	movlw	high main@clear_val
   944   000EEE  6FA1               	movwf	(main@pclear_val+1)& (0+255),b
   945   000EF0                     
   946                           ; BSR set to: 1
   947                           ;main.c: 87:     pred_val = &red_val[0];
   948   000EF0  0E3C               	movlw	low main@red_val
   949   000EF2  6FA2               	movwf	main@pred_val& (0+255),b
   950   000EF4  0E01               	movlw	high main@red_val
   951   000EF6  6FA3               	movwf	(main@pred_val+1)& (0+255),b
   952   000EF8                     
   953                           ; BSR set to: 1
   954                           ;main.c: 88:     pgreen_val = &green_val[0];
   955   000EF8  0E50               	movlw	low main@green_val
   956   000EFA  6FA6               	movwf	main@pgreen_val& (0+255),b
   957   000EFC  0E01               	movlw	high main@green_val
   958   000EFE  6FA7               	movwf	(main@pgreen_val+1)& (0+255),b
   959   000F00                     
   960                           ; BSR set to: 1
   961                           ;main.c: 89:     pblue_val = &blue_val[0];
   962   000F00  0E64               	movlw	low main@blue_val
   963   000F02  6FA4               	movwf	main@pblue_val& (0+255),b
   964   000F04  0E01               	movlw	high main@blue_val
   965   000F06  6FA5               	movwf	(main@pblue_val+1)& (0+255),b
   966   000F08                     
   967                           ; BSR set to: 1
   968                           ;main.c: 91:     unsigned int lum;;main.c: 92:     _Bool going_forward = 0;
   969   000F08  0E00               	movlw	0
   970   000F0A  6FB0               	movwf	main@going_forward& (0+255),b
   971   000F0C                     
   972                           ; BSR set to: 1
   973                           ;main.c: 93:     unsigned int previously_measured_time, measured_time;;main.c: 94:     i
      +                          nt action_to_do;;main.c: 95:     unsigned int timings[20];;main.c: 96:     int actions[2
      +                          0];;main.c: 97:     int actions_completed = 0;
   974   000F0C  0E00               	movlw	0
   975   000F0E  6FAF               	movwf	(main@actions_completed+1)& (0+255),b
   976   000F10  0E00               	movlw	0
   977   000F12  6FAE               	movwf	main@actions_completed& (0+255),b
   978   000F14                     l2817:
   979                           
   980                           ;main.c: 134:         if(!going_forward){
   981   000F14  0101               	movlb	1	; () banked
   982   000F16  51B0               	movf	main@going_forward& (0+255),w,b
   983   000F18  A4D8               	btfss	status,2,c
   984   000F1A  EF91  F007         	goto	u1711
   985   000F1E  EF93  F007         	goto	u1710
   986   000F22                     u1711:
   987   000F22  EFA2  F007         	goto	l2825
   988   000F26                     u1710:
   989   000F26                     
   990                           ; BSR set to: 1
   991                           ;main.c: 137:             resetTimer0();
   992   000F26  EC88  F011         	call	_resetTimer0	;wreg free
   993   000F2A                     
   994                           ;main.c: 138:             fullSpeedAhead(pmL, pmR);
   995   000F2A  C1CB  F015         	movff	main@pmL,fullSpeedAhead@mL
   996   000F2E  C1CC  F016         	movff	main@pmL+1,fullSpeedAhead@mL+1
   997   000F32  C1CD  F017         	movff	main@pmR,fullSpeedAhead@mR
   998   000F36  C1CE  F018         	movff	main@pmR+1,fullSpeedAhead@mR+1
   999   000F3A  EC34  F00D         	call	_fullSpeedAhead	;wreg free
  1000   000F3E                     
  1001                           ;main.c: 139:             going_forward = 1;
  1002   000F3E  0E01               	movlw	1
  1003   000F40  0101               	movlb	1	; () banked
  1004   000F42  6FB0               	movwf	main@going_forward& (0+255),b
  1005   000F44                     l2825:
  1006                           
  1007                           ; BSR set to: 1
  1008                           ;main.c: 142:         lum = color_read_Clear();
  1009   000F44  ECD2  F00F         	call	_color_read_Clear	;wreg free
  1010   000F48  C006  F1AA         	movff	?_color_read_Clear,main@lum
  1011   000F4C  C007  F1AB         	movff	?_color_read_Clear+1,main@lum+1
  1012   000F50                     
  1013                           ;main.c: 144:         if (lum > 30){
  1014   000F50  0101               	movlb	1	; () banked
  1015   000F52  51AB               	movf	(main@lum+1)& (0+255),w,b
  1016   000F54  E109               	bnz	u1720
  1017   000F56  0E1F               	movlw	31
  1018   000F58  5DAA               	subwf	main@lum& (0+255),w,b
  1019   000F5A  A0D8               	btfss	status,0,c
  1020   000F5C  EFB2  F007         	goto	u1721
  1021   000F60  EFB4  F007         	goto	u1720
  1022   000F64                     u1721:
  1023   000F64  EF7A  F008         	goto	l2873
  1024   000F68                     u1720:
  1025   000F68                     
  1026                           ; BSR set to: 1
  1027                           ;main.c: 146:             measured_time = get16bitTMR0val();
  1028   000F68  EC55  F011         	call	_get16bitTMR0val	;wreg free
  1029   000F6C  C002  F1AC         	movff	?_get16bitTMR0val,main@measured_time
  1030   000F70  C003  F1AD         	movff	?_get16bitTMR0val+1,main@measured_time+1
  1031   000F74                     
  1032                           ;main.c: 147:             stop(pmL, pmR);
  1033   000F74  C1CB  F015         	movff	main@pmL,stop@mL
  1034   000F78  C1CC  F016         	movff	main@pmL+1,stop@mL+1
  1035   000F7C  C1CD  F017         	movff	main@pmR,stop@mR
  1036   000F80  C1CE  F018         	movff	main@pmR+1,stop@mR+1
  1037   000F84  EC99  F00E         	call	_stop	;wreg free
  1038   000F88                     
  1039                           ;main.c: 149:             going_forward = 0;
  1040   000F88  0E00               	movlw	0
  1041   000F8A  0101               	movlb	1	; () banked
  1042   000F8C  6FB0               	movwf	main@going_forward& (0+255),b
  1043   000F8E                     
  1044                           ; BSR set to: 1
  1045                           ;main.c: 152:             timings[actions_completed] = measured_time;
  1046   000F8E  90D8               	bcf	status,0,c
  1047   000F90  35AE               	rlcf	main@actions_completed& (0+255),w,b
  1048   000F92  6ED9               	movwf	fsr2l,c
  1049   000F94  35AF               	rlcf	(main@actions_completed+1)& (0+255),w,b
  1050   000F96  6EDA               	movwf	fsr2h,c
  1051   000F98  0E78               	movlw	low main@timings
  1052   000F9A  26D9               	addwf	fsr2l,f,c
  1053   000F9C  0E01               	movlw	high main@timings
  1054   000F9E  22DA               	addwfc	fsr2h,f,c
  1055   000FA0  C1AC  FFDE         	movff	main@measured_time,postinc2
  1056   000FA4  C1AD  FFDD         	movff	main@measured_time+1,postdec2
  1057   000FA8                     
  1058                           ; BSR set to: 1
  1059                           ;main.c: 154:             color_read(pRGBC);
  1060   000FA8  C1A8  F00D         	movff	main@pRGBC,color_read@p
  1061   000FAC  C1A9  F00E         	movff	main@pRGBC+1,color_read@p+1
  1062   000FB0  EC53  F00F         	call	_color_read	;wreg free
  1063   000FB4                     
  1064                           ;main.c: 155:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1065   000FB4  0E29               	movlw	41
  1066   000FB6  6E2E               	movwf	(??_main+1)^0,c
  1067   000FB8  0E96               	movlw	150
  1068   000FBA  6E2D               	movwf	??_main^0,c
  1069   000FBC  0E7F               	movlw	127
  1070   000FBE                     u1767:
  1071   000FBE  2EE8               	decfsz	wreg,f,c
  1072   000FC0  D7FE               	bra	u1767
  1073   000FC2  2E2D               	decfsz	??_main^0,f,c
  1074   000FC4  D7FC               	bra	u1767
  1075   000FC6  2E2E               	decfsz	(??_main+1)^0,f,c
  1076   000FC8  D7FA               	bra	u1767
  1077   000FCA  0000               	nop	
  1078   000FCC                     
  1079                           ;main.c: 157:             color_writetoaddr(0x01, 0xD5);
  1080   000FCC  0ED5               	movlw	213
  1081   000FCE  6E04               	movwf	color_writetoaddr@value^0,c
  1082   000FD0  0E01               	movlw	1
  1083   000FD2  EC26  F011         	call	_color_writetoaddr
  1084   000FD6                     
  1085                           ;main.c: 158:             color_writetoaddr(0x03, 0xAB);
  1086   000FD6  0EAB               	movlw	171
  1087   000FD8  6E04               	movwf	color_writetoaddr@value^0,c
  1088   000FDA  0E03               	movlw	3
  1089   000FDC  EC26  F011         	call	_color_writetoaddr
  1090   000FE0                     
  1091                           ;main.c: 159:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1092   000FE0  0E11               	movlw	17
  1093   000FE2  6E2E               	movwf	(??_main+1)^0,c
  1094   000FE4  0E3C               	movlw	60
  1095   000FE6  6E2D               	movwf	??_main^0,c
  1096   000FE8  0ECB               	movlw	203
  1097   000FEA                     u1777:
  1098   000FEA  2EE8               	decfsz	wreg,f,c
  1099   000FEC  D7FE               	bra	u1777
  1100   000FEE  2E2D               	decfsz	??_main^0,f,c
  1101   000FF0  D7FC               	bra	u1777
  1102   000FF2  2E2E               	decfsz	(??_main+1)^0,f,c
  1103   000FF4  D7FA               	bra	u1777
  1104   000FF6  0000               	nop	
  1105   000FF8                     
  1106                           ;main.c: 161:             sprintf(red_val,"red = %d \r\n",color_read_Red());
  1107   000FF8  0E3C               	movlw	low main@red_val
  1108   000FFA  6E1B               	movwf	sprintf@s^0,c
  1109   000FFC  0E01               	movlw	high main@red_val
  1110   000FFE  6E1C               	movwf	(sprintf@s+1)^0,c
  1111   001000  0E2A               	movlw	low STR_1
  1112   001002  6E1D               	movwf	sprintf@fmt^0,c
  1113   001004  EC82  F00F         	call	_color_read_Red	;wreg free
  1114   001008  C006  F01E         	movff	?_color_read_Red,?_sprintf+3
  1115   00100C  C007  F01F         	movff	?_color_read_Red+1,?_sprintf+4
  1116   001010  EC68  F010         	call	_sprintf	;wreg free
  1117   001014                     
  1118                           ;main.c: 162:             sendStringSerial4(pred_val);
  1119   001014  C1A2  F003         	movff	main@pred_val,sendStringSerial4@string
  1120   001018  C1A3  F004         	movff	main@pred_val+1,sendStringSerial4@string+1
  1121   00101C  ECBD  F010         	call	_sendStringSerial4	;wreg free
  1122   001020                     
  1123                           ;main.c: 163:             sprintf(green_val,"green = %d \r\n",color_read_Green());
  1124   001020  0E50               	movlw	low main@green_val
  1125   001022  6E1B               	movwf	sprintf@s^0,c
  1126   001024  0E01               	movlw	high main@green_val
  1127   001026  6E1C               	movwf	(sprintf@s+1)^0,c
  1128   001028  0E01               	movlw	low STR_2
  1129   00102A  6E1D               	movwf	sprintf@fmt^0,c
  1130   00102C  ECAA  F00F         	call	_color_read_Green	;wreg free
  1131   001030  C006  F01E         	movff	?_color_read_Green,?_sprintf+3
  1132   001034  C007  F01F         	movff	?_color_read_Green+1,?_sprintf+4
  1133   001038  EC68  F010         	call	_sprintf	;wreg free
  1134   00103C                     
  1135                           ;main.c: 164:             sendStringSerial4(pgreen_val);
  1136   00103C  C1A6  F003         	movff	main@pgreen_val,sendStringSerial4@string
  1137   001040  C1A7  F004         	movff	main@pgreen_val+1,sendStringSerial4@string+1
  1138   001044  ECBD  F010         	call	_sendStringSerial4	;wreg free
  1139   001048                     
  1140                           ;main.c: 165:             sprintf(blue_val,"blue = %d \r\n",color_read_Blue());
  1141   001048  0E64               	movlw	low main@blue_val
  1142   00104A  6E1B               	movwf	sprintf@s^0,c
  1143   00104C  0E01               	movlw	high main@blue_val
  1144   00104E  6E1C               	movwf	(sprintf@s+1)^0,c
  1145   001050  0E1D               	movlw	low STR_3
  1146   001052  6E1D               	movwf	sprintf@fmt^0,c
  1147   001054  ECFA  F00F         	call	_color_read_Blue	;wreg free
  1148   001058  C006  F01E         	movff	?_color_read_Blue,?_sprintf+3
  1149   00105C  C007  F01F         	movff	?_color_read_Blue+1,?_sprintf+4
  1150   001060  EC68  F010         	call	_sprintf	;wreg free
  1151   001064                     
  1152                           ;main.c: 166:             sendStringSerial4(pblue_val);
  1153   001064  C1A4  F003         	movff	main@pblue_val,sendStringSerial4@string
  1154   001068  C1A5  F004         	movff	main@pblue_val+1,sendStringSerial4@string+1
  1155   00106C  ECBD  F010         	call	_sendStringSerial4	;wreg free
  1156   001070                     
  1157                           ;main.c: 167:             sprintf(clear_val,"clear = %d \r\n",color_read_Clear());
  1158   001070  0E28               	movlw	low main@clear_val
  1159   001072  6E1B               	movwf	sprintf@s^0,c
  1160   001074  0E01               	movlw	high main@clear_val
  1161   001076  6E1C               	movwf	(sprintf@s+1)^0,c
  1162   001078  0E0F               	movlw	low STR_4
  1163   00107A  6E1D               	movwf	sprintf@fmt^0,c
  1164   00107C  ECD2  F00F         	call	_color_read_Clear	;wreg free
  1165   001080  C006  F01E         	movff	?_color_read_Clear,?_sprintf+3
  1166   001084  C007  F01F         	movff	?_color_read_Clear+1,?_sprintf+4
  1167   001088  EC68  F010         	call	_sprintf	;wreg free
  1168   00108C                     
  1169                           ;main.c: 168:             sendStringSerial4(pclear_val);
  1170   00108C  C1A0  F003         	movff	main@pclear_val,sendStringSerial4@string
  1171   001090  C1A1  F004         	movff	main@pclear_val+1,sendStringSerial4@string+1
  1172   001094  ECBD  F010         	call	_sendStringSerial4	;wreg free
  1173   001098                     
  1174                           ;main.c: 169:             _delay((unsigned long)((3000)*(64000000/4000.0)));
  1175   001098  0EF4               	movlw	244
  1176   00109A  6E2E               	movwf	(??_main+1)^0,c
  1177   00109C  0E82               	movlw	130
  1178   00109E  6E2D               	movwf	??_main^0,c
  1179   0010A0  0E05               	movlw	5
  1180   0010A2                     u1787:
  1181   0010A2  2EE8               	decfsz	wreg,f,c
  1182   0010A4  D7FE               	bra	u1787
  1183   0010A6  2E2D               	decfsz	??_main^0,f,c
  1184   0010A8  D7FC               	bra	u1787
  1185   0010AA  2E2E               	decfsz	(??_main+1)^0,f,c
  1186   0010AC  D7FA               	bra	u1787
  1187   0010AE  0000               	nop	
  1188   0010B0                     
  1189                           ;main.c: 170:             _delay((unsigned long)((3000)*(64000000/4000.0)));
  1190   0010B0  0EF4               	movlw	244
  1191   0010B2  6E2E               	movwf	(??_main+1)^0,c
  1192   0010B4  0E82               	movlw	130
  1193   0010B6  6E2D               	movwf	??_main^0,c
  1194   0010B8  0E05               	movlw	5
  1195   0010BA                     u1797:
  1196   0010BA  2EE8               	decfsz	wreg,f,c
  1197   0010BC  D7FE               	bra	u1797
  1198   0010BE  2E2D               	decfsz	??_main^0,f,c
  1199   0010C0  D7FC               	bra	u1797
  1200   0010C2  2E2E               	decfsz	(??_main+1)^0,f,c
  1201   0010C4  D7FA               	bra	u1797
  1202   0010C6  0000               	nop	
  1203   0010C8                     
  1204                           ;main.c: 171:             _delay((unsigned long)((3000)*(64000000/4000.0)));
  1205   0010C8  0EF4               	movlw	244
  1206   0010CA  6E2E               	movwf	(??_main+1)^0,c
  1207   0010CC  0E82               	movlw	130
  1208   0010CE  6E2D               	movwf	??_main^0,c
  1209   0010D0  0E05               	movlw	5
  1210   0010D2                     u1807:
  1211   0010D2  2EE8               	decfsz	wreg,f,c
  1212   0010D4  D7FE               	bra	u1807
  1213   0010D6  2E2D               	decfsz	??_main^0,f,c
  1214   0010D8  D7FC               	bra	u1807
  1215   0010DA  2E2E               	decfsz	(??_main+1)^0,f,c
  1216   0010DC  D7FA               	bra	u1807
  1217   0010DE  0000               	nop	
  1218   0010E0                     
  1219                           ;main.c: 174:             color_writetoaddr(0x01, 0xFF);
  1220   0010E0  0EFF               	movlw	255
  1221   0010E2  6E04               	movwf	color_writetoaddr@value^0,c
  1222   0010E4  0E01               	movlw	1
  1223   0010E6  EC26  F011         	call	_color_writetoaddr
  1224   0010EA                     
  1225                           ;main.c: 175:             color_writetoaddr(0x03, 0xFF);
  1226   0010EA  0EFF               	movlw	255
  1227   0010EC  6E04               	movwf	color_writetoaddr@value^0,c
  1228   0010EE  0E03               	movlw	3
  1229   0010F0  EC26  F011         	call	_color_writetoaddr
  1230   0010F4                     l2873:
  1231                           
  1232                           ;main.c: 178:         _delay((unsigned long)((1)*(64000000/4000.0)));
  1233   0010F4  0E15               	movlw	21
  1234   0010F6  6E2D               	movwf	??_main^0,c
  1235   0010F8  0EC6               	movlw	198
  1236   0010FA                     u1817:
  1237   0010FA  2EE8               	decfsz	wreg,f,c
  1238   0010FC  D7FE               	bra	u1817
  1239   0010FE  2E2D               	decfsz	??_main^0,f,c
  1240   001100  D7FC               	bra	u1817
  1241   001102  D000               	nop2	
  1242   001104  EF8A  F007         	goto	l2817
  1243   001108  EF12  F000         	goto	start
  1244   00110C                     __end_of_main:
  1245                           	callstack 0
  1246                           
  1247 ;; *************** function _turn_right_90 *****************
  1248 ;; Defined at:
  1249 ;;		line 143 in file "dc_motor.c"
  1250 ;; Parameters:    Size  Location     Type
  1251 ;;  mL              2   24[COMRAM] PTR struct DC_motor
  1252 ;;		 -> main@motorL(9), 
  1253 ;;  mR              2   26[COMRAM] PTR struct DC_motor
  1254 ;;		 -> main@motorR(9), 
  1255 ;; Auto vars:     Size  Location     Type
  1256 ;;		None
  1257 ;; Return value:  Size  Location     Type
  1258 ;;                  1    wreg      void 
  1259 ;; Registers used:
  1260 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1261 ;; Tracked objects:
  1262 ;;		On entry : 0/0
  1263 ;;		On exit  : 0/0
  1264 ;;		Unchanged: 0/0
  1265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1266 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1268 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1269 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1270 ;;Total ram usage:        6 bytes
  1271 ;; Hardware stack levels used: 1
  1272 ;; Hardware stack levels required when called: 5
  1273 ;; This function calls:
  1274 ;;		_setMotorPWM
  1275 ;;		_stop
  1276 ;; This function is called by:
  1277 ;;		_main
  1278 ;; This function uses a non-reentrant model
  1279 ;;
  1280                           
  1281                           	psect	text1
  1282   001420                     __ptext1:
  1283                           	callstack 0
  1284   001420                     _turn_right_90:
  1285                           	callstack 25
  1286   001420                     
  1287                           ;dc_motor.c: 144:     mL->direction = 1;
  1288   001420  EE20 F001          	lfsr	2,1
  1289   001424  5019               	movf	turn_right_90@mL^0,w,c
  1290   001426  26D9               	addwf	fsr2l,f,c
  1291   001428  501A               	movf	(turn_right_90@mL+1)^0,w,c
  1292   00142A  22DA               	addwfc	fsr2h,f,c
  1293   00142C  0E01               	movlw	1
  1294   00142E  6EDF               	movwf	indf2,c
  1295                           
  1296                           ;dc_motor.c: 145:     mR->direction = 0;
  1297   001430  EE20 F001          	lfsr	2,1
  1298   001434  501B               	movf	turn_right_90@mR^0,w,c
  1299   001436  26D9               	addwf	fsr2l,f,c
  1300   001438  501C               	movf	(turn_right_90@mR+1)^0,w,c
  1301   00143A  22DA               	addwfc	fsr2h,f,c
  1302   00143C  6ADF               	clrf	indf2,c
  1303                           
  1304                           ;dc_motor.c: 147:     while ((mL->power) < 70 || (mR->power) < 70){
  1305   00143E  EF57  F00A         	goto	l193
  1306   001442                     l2571:
  1307                           
  1308                           ;dc_motor.c: 148:         if ((mL->power) < 70) (mL->power) += 1;
  1309   001442  C019  FFD9         	movff	turn_right_90@mL,fsr2l
  1310   001446  C01A  FFDA         	movff	turn_right_90@mL+1,fsr2h
  1311   00144A  0E46               	movlw	70
  1312   00144C  60DF               	cpfslt	indf2,c
  1313   00144E  EF2B  F00A         	goto	u1481
  1314   001452  EF2D  F00A         	goto	u1480
  1315   001456                     u1481:
  1316   001456  EF32  F00A         	goto	l2575
  1317   00145A                     u1480:
  1318   00145A  C019  FFD9         	movff	turn_right_90@mL,fsr2l
  1319   00145E  C01A  FFDA         	movff	turn_right_90@mL+1,fsr2h
  1320   001462  2ADF               	incf	indf2,f,c
  1321   001464                     l2575:
  1322                           
  1323                           ;dc_motor.c: 149:         if ((mR->power) < 70) (mR->power) += 1;
  1324   001464  C01B  FFD9         	movff	turn_right_90@mR,fsr2l
  1325   001468  C01C  FFDA         	movff	turn_right_90@mR+1,fsr2h
  1326   00146C  0E46               	movlw	70
  1327   00146E  60DF               	cpfslt	indf2,c
  1328   001470  EF3C  F00A         	goto	u1491
  1329   001474  EF3E  F00A         	goto	u1490
  1330   001478                     u1491:
  1331   001478  EF43  F00A         	goto	l2579
  1332   00147C                     u1490:
  1333   00147C  C01B  FFD9         	movff	turn_right_90@mR,fsr2l
  1334   001480  C01C  FFDA         	movff	turn_right_90@mR+1,fsr2h
  1335   001484  2ADF               	incf	indf2,f,c
  1336   001486                     l2579:
  1337                           
  1338                           ;dc_motor.c: 151:         setMotorPWM(mL);
  1339   001486  C019  F00F         	movff	turn_right_90@mL,setMotorPWM@m
  1340   00148A  C01A  F010         	movff	turn_right_90@mL+1,setMotorPWM@m+1
  1341   00148E  EC5A  F009         	call	_setMotorPWM	;wreg free
  1342   001492                     
  1343                           ;dc_motor.c: 152:         setMotorPWM(mR);
  1344   001492  C01B  F00F         	movff	turn_right_90@mR,setMotorPWM@m
  1345   001496  C01C  F010         	movff	turn_right_90@mR+1,setMotorPWM@m+1
  1346   00149A  EC5A  F009         	call	_setMotorPWM	;wreg free
  1347   00149E                     
  1348                           ;dc_motor.c: 153:         _delay((unsigned long)((1)*(64000000/4000.0)));
  1349   00149E  0E15               	movlw	21
  1350   0014A0  6E1D               	movwf	??_turn_right_90^0,c
  1351   0014A2  0EC6               	movlw	198
  1352   0014A4                     u1827:
  1353   0014A4  2EE8               	decfsz	wreg,f,c
  1354   0014A6  D7FE               	bra	u1827
  1355   0014A8  2E1D               	decfsz	??_turn_right_90^0,f,c
  1356   0014AA  D7FC               	bra	u1827
  1357   0014AC  D000               	nop2	
  1358   0014AE                     l193:
  1359                           
  1360                           ;dc_motor.c: 147:     while ((mL->power) < 70 || (mR->power) < 70){
  1361   0014AE  C019  FFD9         	movff	turn_right_90@mL,fsr2l
  1362   0014B2  C01A  FFDA         	movff	turn_right_90@mL+1,fsr2h
  1363   0014B6  0E45               	movlw	69
  1364   0014B8  64DF               	cpfsgt	indf2,c
  1365   0014BA  EF61  F00A         	goto	u1501
  1366   0014BE  EF63  F00A         	goto	u1500
  1367   0014C2                     u1501:
  1368   0014C2  EF21  F00A         	goto	l2571
  1369   0014C6                     u1500:
  1370   0014C6  C01B  FFD9         	movff	turn_right_90@mR,fsr2l
  1371   0014CA  C01C  FFDA         	movff	turn_right_90@mR+1,fsr2h
  1372   0014CE  0E45               	movlw	69
  1373   0014D0  64DF               	cpfsgt	indf2,c
  1374   0014D2  EF6D  F00A         	goto	u1511
  1375   0014D6  EF6F  F00A         	goto	u1510
  1376   0014DA                     u1511:
  1377   0014DA  EF21  F00A         	goto	l2571
  1378   0014DE                     u1510:
  1379   0014DE                     
  1380                           ;dc_motor.c: 155:     _delay((unsigned long)((225)*(64000000/4000.0)));
  1381   0014DE  0E13               	movlw	19
  1382   0014E0  6E1E               	movwf	(??_turn_right_90+1)^0,c
  1383   0014E2  0E44               	movlw	68
  1384   0014E4  6E1D               	movwf	??_turn_right_90^0,c
  1385   0014E6  0E44               	movlw	68
  1386   0014E8                     u1837:
  1387   0014E8  2EE8               	decfsz	wreg,f,c
  1388   0014EA  D7FE               	bra	u1837
  1389   0014EC  2E1D               	decfsz	??_turn_right_90^0,f,c
  1390   0014EE  D7FC               	bra	u1837
  1391   0014F0  2E1E               	decfsz	(??_turn_right_90+1)^0,f,c
  1392   0014F2  D7FA               	bra	u1837
  1393   0014F4  D000               	nop2	
  1394   0014F6                     
  1395                           ;dc_motor.c: 156:     stop(mL, mR);
  1396   0014F6  C019  F015         	movff	turn_right_90@mL,stop@mL
  1397   0014FA  C01A  F016         	movff	turn_right_90@mL+1,stop@mL+1
  1398   0014FE  C01B  F017         	movff	turn_right_90@mR,stop@mR
  1399   001502  C01C  F018         	movff	turn_right_90@mR+1,stop@mR+1
  1400   001506  EC99  F00E         	call	_stop	;wreg free
  1401   00150A  0012               	return		;funcret
  1402   00150C                     __end_of_turn_right_90:
  1403                           	callstack 0
  1404                           
  1405 ;; *************** function _turn_right_135 *****************
  1406 ;; Defined at:
  1407 ;;		line 177 in file "dc_motor.c"
  1408 ;; Parameters:    Size  Location     Type
  1409 ;;  mL              2   24[COMRAM] PTR struct DC_motor
  1410 ;;		 -> main@motorL(9), 
  1411 ;;  mR              2   26[COMRAM] PTR struct DC_motor
  1412 ;;		 -> main@motorR(9), 
  1413 ;; Auto vars:     Size  Location     Type
  1414 ;;		None
  1415 ;; Return value:  Size  Location     Type
  1416 ;;                  1    wreg      void 
  1417 ;; Registers used:
  1418 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1419 ;; Tracked objects:
  1420 ;;		On entry : 0/0
  1421 ;;		On exit  : 0/0
  1422 ;;		Unchanged: 0/0
  1423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1424 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1426 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1427 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1428 ;;Total ram usage:        6 bytes
  1429 ;; Hardware stack levels used: 1
  1430 ;; Hardware stack levels required when called: 5
  1431 ;; This function calls:
  1432 ;;		_setMotorPWM
  1433 ;;		_stop
  1434 ;; This function is called by:
  1435 ;;		_main
  1436 ;; This function uses a non-reentrant model
  1437 ;;
  1438                           
  1439                           	psect	text2
  1440   00150C                     __ptext2:
  1441                           	callstack 0
  1442   00150C                     _turn_right_135:
  1443                           	callstack 25
  1444   00150C                     
  1445                           ;dc_motor.c: 178:     mL->direction = 1;
  1446   00150C  EE20 F001          	lfsr	2,1
  1447   001510  5019               	movf	turn_right_135@mL^0,w,c
  1448   001512  26D9               	addwf	fsr2l,f,c
  1449   001514  501A               	movf	(turn_right_135@mL+1)^0,w,c
  1450   001516  22DA               	addwfc	fsr2h,f,c
  1451   001518  0E01               	movlw	1
  1452   00151A  6EDF               	movwf	indf2,c
  1453                           
  1454                           ;dc_motor.c: 179:     mR->direction = 0;
  1455   00151C  EE20 F001          	lfsr	2,1
  1456   001520  501B               	movf	turn_right_135@mR^0,w,c
  1457   001522  26D9               	addwf	fsr2l,f,c
  1458   001524  501C               	movf	(turn_right_135@mR+1)^0,w,c
  1459   001526  22DA               	addwfc	fsr2h,f,c
  1460   001528  6ADF               	clrf	indf2,c
  1461                           
  1462                           ;dc_motor.c: 181:     while ((mL->power) < 70 || (mR->power) < 70){
  1463   00152A  EFCD  F00A         	goto	l209
  1464   00152E                     l2615:
  1465                           
  1466                           ;dc_motor.c: 182:         if ((mL->power) < 70) (mL->power) += 1;
  1467   00152E  C019  FFD9         	movff	turn_right_135@mL,fsr2l
  1468   001532  C01A  FFDA         	movff	turn_right_135@mL+1,fsr2h
  1469   001536  0E46               	movlw	70
  1470   001538  60DF               	cpfslt	indf2,c
  1471   00153A  EFA1  F00A         	goto	u1561
  1472   00153E  EFA3  F00A         	goto	u1560
  1473   001542                     u1561:
  1474   001542  EFA8  F00A         	goto	l2619
  1475   001546                     u1560:
  1476   001546  C019  FFD9         	movff	turn_right_135@mL,fsr2l
  1477   00154A  C01A  FFDA         	movff	turn_right_135@mL+1,fsr2h
  1478   00154E  2ADF               	incf	indf2,f,c
  1479   001550                     l2619:
  1480                           
  1481                           ;dc_motor.c: 183:         if ((mR->power) < 70) (mR->power) += 1;
  1482   001550  C01B  FFD9         	movff	turn_right_135@mR,fsr2l
  1483   001554  C01C  FFDA         	movff	turn_right_135@mR+1,fsr2h
  1484   001558  0E46               	movlw	70
  1485   00155A  60DF               	cpfslt	indf2,c
  1486   00155C  EFB2  F00A         	goto	u1571
  1487   001560  EFB4  F00A         	goto	u1570
  1488   001564                     u1571:
  1489   001564  EFB9  F00A         	goto	l2623
  1490   001568                     u1570:
  1491   001568  C01B  FFD9         	movff	turn_right_135@mR,fsr2l
  1492   00156C  C01C  FFDA         	movff	turn_right_135@mR+1,fsr2h
  1493   001570  2ADF               	incf	indf2,f,c
  1494   001572                     l2623:
  1495                           
  1496                           ;dc_motor.c: 185:         setMotorPWM(mL);
  1497   001572  C019  F00F         	movff	turn_right_135@mL,setMotorPWM@m
  1498   001576  C01A  F010         	movff	turn_right_135@mL+1,setMotorPWM@m+1
  1499   00157A  EC5A  F009         	call	_setMotorPWM	;wreg free
  1500   00157E                     
  1501                           ;dc_motor.c: 186:         setMotorPWM(mR);
  1502   00157E  C01B  F00F         	movff	turn_right_135@mR,setMotorPWM@m
  1503   001582  C01C  F010         	movff	turn_right_135@mR+1,setMotorPWM@m+1
  1504   001586  EC5A  F009         	call	_setMotorPWM	;wreg free
  1505   00158A                     
  1506                           ;dc_motor.c: 187:         _delay((unsigned long)((1)*(64000000/4000.0)));
  1507   00158A  0E15               	movlw	21
  1508   00158C  6E1D               	movwf	??_turn_right_135^0,c
  1509   00158E  0EC6               	movlw	198
  1510   001590                     u1847:
  1511   001590  2EE8               	decfsz	wreg,f,c
  1512   001592  D7FE               	bra	u1847
  1513   001594  2E1D               	decfsz	??_turn_right_135^0,f,c
  1514   001596  D7FC               	bra	u1847
  1515   001598  D000               	nop2	
  1516   00159A                     l209:
  1517                           
  1518                           ;dc_motor.c: 181:     while ((mL->power) < 70 || (mR->power) < 70){
  1519   00159A  C019  FFD9         	movff	turn_right_135@mL,fsr2l
  1520   00159E  C01A  FFDA         	movff	turn_right_135@mL+1,fsr2h
  1521   0015A2  0E45               	movlw	69
  1522   0015A4  64DF               	cpfsgt	indf2,c
  1523   0015A6  EFD7  F00A         	goto	u1581
  1524   0015AA  EFD9  F00A         	goto	u1580
  1525   0015AE                     u1581:
  1526   0015AE  EF97  F00A         	goto	l2615
  1527   0015B2                     u1580:
  1528   0015B2  C01B  FFD9         	movff	turn_right_135@mR,fsr2l
  1529   0015B6  C01C  FFDA         	movff	turn_right_135@mR+1,fsr2h
  1530   0015BA  0E45               	movlw	69
  1531   0015BC  64DF               	cpfsgt	indf2,c
  1532   0015BE  EFE3  F00A         	goto	u1591
  1533   0015C2  EFE5  F00A         	goto	u1590
  1534   0015C6                     u1591:
  1535   0015C6  EF97  F00A         	goto	l2615
  1536   0015CA                     u1590:
  1537   0015CA                     
  1538                           ;dc_motor.c: 189:     _delay((unsigned long)((500)*(64000000/4000.0)));
  1539   0015CA  0E29               	movlw	41
  1540   0015CC  6E1E               	movwf	(??_turn_right_135+1)^0,c
  1541   0015CE  0E96               	movlw	150
  1542   0015D0  6E1D               	movwf	??_turn_right_135^0,c
  1543   0015D2  0E7F               	movlw	127
  1544   0015D4                     u1857:
  1545   0015D4  2EE8               	decfsz	wreg,f,c
  1546   0015D6  D7FE               	bra	u1857
  1547   0015D8  2E1D               	decfsz	??_turn_right_135^0,f,c
  1548   0015DA  D7FC               	bra	u1857
  1549   0015DC  2E1E               	decfsz	(??_turn_right_135+1)^0,f,c
  1550   0015DE  D7FA               	bra	u1857
  1551   0015E0  0000               	nop	
  1552   0015E2                     
  1553                           ;dc_motor.c: 190:     stop(mL, mR);
  1554   0015E2  C019  F015         	movff	turn_right_135@mL,stop@mL
  1555   0015E6  C01A  F016         	movff	turn_right_135@mL+1,stop@mL+1
  1556   0015EA  C01B  F017         	movff	turn_right_135@mR,stop@mR
  1557   0015EE  C01C  F018         	movff	turn_right_135@mR+1,stop@mR+1
  1558   0015F2  EC99  F00E         	call	_stop	;wreg free
  1559   0015F6  0012               	return		;funcret
  1560   0015F8                     __end_of_turn_right_135:
  1561                           	callstack 0
  1562                           
  1563 ;; *************** function _turn_left_90 *****************
  1564 ;; Defined at:
  1565 ;;		line 126 in file "dc_motor.c"
  1566 ;; Parameters:    Size  Location     Type
  1567 ;;  mL              2   24[COMRAM] PTR struct DC_motor
  1568 ;;		 -> main@motorL(9), 
  1569 ;;  mR              2   26[COMRAM] PTR struct DC_motor
  1570 ;;		 -> main@motorR(9), 
  1571 ;; Auto vars:     Size  Location     Type
  1572 ;;		None
  1573 ;; Return value:  Size  Location     Type
  1574 ;;                  1    wreg      void 
  1575 ;; Registers used:
  1576 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1577 ;; Tracked objects:
  1578 ;;		On entry : 0/0
  1579 ;;		On exit  : 0/0
  1580 ;;		Unchanged: 0/0
  1581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1582 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1584 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1585 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1586 ;;Total ram usage:        6 bytes
  1587 ;; Hardware stack levels used: 1
  1588 ;; Hardware stack levels required when called: 5
  1589 ;; This function calls:
  1590 ;;		_setMotorPWM
  1591 ;;		_stop
  1592 ;; This function is called by:
  1593 ;;		_main
  1594 ;; This function uses a non-reentrant model
  1595 ;;
  1596                           
  1597                           	psect	text3
  1598   0015F8                     __ptext3:
  1599                           	callstack 0
  1600   0015F8                     _turn_left_90:
  1601                           	callstack 25
  1602   0015F8                     
  1603                           ;dc_motor.c: 127:     mL->direction = 0;
  1604   0015F8  EE20 F001          	lfsr	2,1
  1605   0015FC  5019               	movf	turn_left_90@mL^0,w,c
  1606   0015FE  26D9               	addwf	fsr2l,f,c
  1607   001600  501A               	movf	(turn_left_90@mL+1)^0,w,c
  1608   001602  22DA               	addwfc	fsr2h,f,c
  1609   001604  6ADF               	clrf	indf2,c
  1610                           
  1611                           ;dc_motor.c: 128:     mR->direction = 1;
  1612   001606  EE20 F001          	lfsr	2,1
  1613   00160A  501B               	movf	turn_left_90@mR^0,w,c
  1614   00160C  26D9               	addwf	fsr2l,f,c
  1615   00160E  501C               	movf	(turn_left_90@mR+1)^0,w,c
  1616   001610  22DA               	addwfc	fsr2h,f,c
  1617   001612  0E01               	movlw	1
  1618   001614  6EDF               	movwf	indf2,c
  1619                           
  1620                           ;dc_motor.c: 130:     while ((mL->power) < 70 || (mR->power) < 70){
  1621   001616  EF43  F00B         	goto	l185
  1622   00161A                     l2549:
  1623                           
  1624                           ;dc_motor.c: 131:         if ((mL->power) < 70) (mL->power) += 1;
  1625   00161A  C019  FFD9         	movff	turn_left_90@mL,fsr2l
  1626   00161E  C01A  FFDA         	movff	turn_left_90@mL+1,fsr2h
  1627   001622  0E46               	movlw	70
  1628   001624  60DF               	cpfslt	indf2,c
  1629   001626  EF17  F00B         	goto	u1441
  1630   00162A  EF19  F00B         	goto	u1440
  1631   00162E                     u1441:
  1632   00162E  EF1E  F00B         	goto	l2553
  1633   001632                     u1440:
  1634   001632  C019  FFD9         	movff	turn_left_90@mL,fsr2l
  1635   001636  C01A  FFDA         	movff	turn_left_90@mL+1,fsr2h
  1636   00163A  2ADF               	incf	indf2,f,c
  1637   00163C                     l2553:
  1638                           
  1639                           ;dc_motor.c: 132:         if ((mR->power) < 70) (mR->power) += 1;
  1640   00163C  C01B  FFD9         	movff	turn_left_90@mR,fsr2l
  1641   001640  C01C  FFDA         	movff	turn_left_90@mR+1,fsr2h
  1642   001644  0E46               	movlw	70
  1643   001646  60DF               	cpfslt	indf2,c
  1644   001648  EF28  F00B         	goto	u1451
  1645   00164C  EF2A  F00B         	goto	u1450
  1646   001650                     u1451:
  1647   001650  EF2F  F00B         	goto	l2557
  1648   001654                     u1450:
  1649   001654  C01B  FFD9         	movff	turn_left_90@mR,fsr2l
  1650   001658  C01C  FFDA         	movff	turn_left_90@mR+1,fsr2h
  1651   00165C  2ADF               	incf	indf2,f,c
  1652   00165E                     l2557:
  1653                           
  1654                           ;dc_motor.c: 134:         setMotorPWM(mL);
  1655   00165E  C019  F00F         	movff	turn_left_90@mL,setMotorPWM@m
  1656   001662  C01A  F010         	movff	turn_left_90@mL+1,setMotorPWM@m+1
  1657   001666  EC5A  F009         	call	_setMotorPWM	;wreg free
  1658   00166A                     
  1659                           ;dc_motor.c: 135:         setMotorPWM(mR);
  1660   00166A  C01B  F00F         	movff	turn_left_90@mR,setMotorPWM@m
  1661   00166E  C01C  F010         	movff	turn_left_90@mR+1,setMotorPWM@m+1
  1662   001672  EC5A  F009         	call	_setMotorPWM	;wreg free
  1663   001676                     
  1664                           ;dc_motor.c: 136:         _delay((unsigned long)((1)*(64000000/4000.0)));
  1665   001676  0E15               	movlw	21
  1666   001678  6E1D               	movwf	??_turn_left_90^0,c
  1667   00167A  0EC6               	movlw	198
  1668   00167C                     u1867:
  1669   00167C  2EE8               	decfsz	wreg,f,c
  1670   00167E  D7FE               	bra	u1867
  1671   001680  2E1D               	decfsz	??_turn_left_90^0,f,c
  1672   001682  D7FC               	bra	u1867
  1673   001684  D000               	nop2	
  1674   001686                     l185:
  1675                           
  1676                           ;dc_motor.c: 130:     while ((mL->power) < 70 || (mR->power) < 70){
  1677   001686  C019  FFD9         	movff	turn_left_90@mL,fsr2l
  1678   00168A  C01A  FFDA         	movff	turn_left_90@mL+1,fsr2h
  1679   00168E  0E45               	movlw	69
  1680   001690  64DF               	cpfsgt	indf2,c
  1681   001692  EF4D  F00B         	goto	u1461
  1682   001696  EF4F  F00B         	goto	u1460
  1683   00169A                     u1461:
  1684   00169A  EF0D  F00B         	goto	l2549
  1685   00169E                     u1460:
  1686   00169E  C01B  FFD9         	movff	turn_left_90@mR,fsr2l
  1687   0016A2  C01C  FFDA         	movff	turn_left_90@mR+1,fsr2h
  1688   0016A6  0E45               	movlw	69
  1689   0016A8  64DF               	cpfsgt	indf2,c
  1690   0016AA  EF59  F00B         	goto	u1471
  1691   0016AE  EF5B  F00B         	goto	u1470
  1692   0016B2                     u1471:
  1693   0016B2  EF0D  F00B         	goto	l2549
  1694   0016B6                     u1470:
  1695   0016B6                     
  1696                           ;dc_motor.c: 138:     _delay((unsigned long)((225)*(64000000/4000.0)));
  1697   0016B6  0E13               	movlw	19
  1698   0016B8  6E1E               	movwf	(??_turn_left_90+1)^0,c
  1699   0016BA  0E44               	movlw	68
  1700   0016BC  6E1D               	movwf	??_turn_left_90^0,c
  1701   0016BE  0E44               	movlw	68
  1702   0016C0                     u1877:
  1703   0016C0  2EE8               	decfsz	wreg,f,c
  1704   0016C2  D7FE               	bra	u1877
  1705   0016C4  2E1D               	decfsz	??_turn_left_90^0,f,c
  1706   0016C6  D7FC               	bra	u1877
  1707   0016C8  2E1E               	decfsz	(??_turn_left_90+1)^0,f,c
  1708   0016CA  D7FA               	bra	u1877
  1709   0016CC  D000               	nop2	
  1710   0016CE                     
  1711                           ;dc_motor.c: 139:     stop(mL, mR);
  1712   0016CE  C019  F015         	movff	turn_left_90@mL,stop@mL
  1713   0016D2  C01A  F016         	movff	turn_left_90@mL+1,stop@mL+1
  1714   0016D6  C01B  F017         	movff	turn_left_90@mR,stop@mR
  1715   0016DA  C01C  F018         	movff	turn_left_90@mR+1,stop@mR+1
  1716   0016DE  EC99  F00E         	call	_stop	;wreg free
  1717   0016E2  0012               	return		;funcret
  1718   0016E4                     __end_of_turn_left_90:
  1719                           	callstack 0
  1720                           
  1721 ;; *************** function _turn_left_135 *****************
  1722 ;; Defined at:
  1723 ;;		line 160 in file "dc_motor.c"
  1724 ;; Parameters:    Size  Location     Type
  1725 ;;  mL              2   24[COMRAM] PTR struct DC_motor
  1726 ;;		 -> main@motorL(9), 
  1727 ;;  mR              2   26[COMRAM] PTR struct DC_motor
  1728 ;;		 -> main@motorR(9), 
  1729 ;; Auto vars:     Size  Location     Type
  1730 ;;		None
  1731 ;; Return value:  Size  Location     Type
  1732 ;;                  1    wreg      void 
  1733 ;; Registers used:
  1734 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1735 ;; Tracked objects:
  1736 ;;		On entry : 0/0
  1737 ;;		On exit  : 0/0
  1738 ;;		Unchanged: 0/0
  1739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1740 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1742 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1743 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1744 ;;Total ram usage:        6 bytes
  1745 ;; Hardware stack levels used: 1
  1746 ;; Hardware stack levels required when called: 5
  1747 ;; This function calls:
  1748 ;;		_setMotorPWM
  1749 ;;		_stop
  1750 ;; This function is called by:
  1751 ;;		_main
  1752 ;; This function uses a non-reentrant model
  1753 ;;
  1754                           
  1755                           	psect	text4
  1756   0016E4                     __ptext4:
  1757                           	callstack 0
  1758   0016E4                     _turn_left_135:
  1759                           	callstack 25
  1760   0016E4                     
  1761                           ;dc_motor.c: 161:     mL->direction = 0;
  1762   0016E4  EE20 F001          	lfsr	2,1
  1763   0016E8  5019               	movf	turn_left_135@mL^0,w,c
  1764   0016EA  26D9               	addwf	fsr2l,f,c
  1765   0016EC  501A               	movf	(turn_left_135@mL+1)^0,w,c
  1766   0016EE  22DA               	addwfc	fsr2h,f,c
  1767   0016F0  6ADF               	clrf	indf2,c
  1768                           
  1769                           ;dc_motor.c: 162:     mR->direction = 1;
  1770   0016F2  EE20 F001          	lfsr	2,1
  1771   0016F6  501B               	movf	turn_left_135@mR^0,w,c
  1772   0016F8  26D9               	addwf	fsr2l,f,c
  1773   0016FA  501C               	movf	(turn_left_135@mR+1)^0,w,c
  1774   0016FC  22DA               	addwfc	fsr2h,f,c
  1775   0016FE  0E01               	movlw	1
  1776   001700  6EDF               	movwf	indf2,c
  1777                           
  1778                           ;dc_motor.c: 164:     while ((mL->power) < 70 || (mR->power) < 70){
  1779   001702  EFB9  F00B         	goto	l201
  1780   001706                     l2593:
  1781                           
  1782                           ;dc_motor.c: 165:         if ((mL->power) < 70) (mL->power) += 1;
  1783   001706  C019  FFD9         	movff	turn_left_135@mL,fsr2l
  1784   00170A  C01A  FFDA         	movff	turn_left_135@mL+1,fsr2h
  1785   00170E  0E46               	movlw	70
  1786   001710  60DF               	cpfslt	indf2,c
  1787   001712  EF8D  F00B         	goto	u1521
  1788   001716  EF8F  F00B         	goto	u1520
  1789   00171A                     u1521:
  1790   00171A  EF94  F00B         	goto	l2597
  1791   00171E                     u1520:
  1792   00171E  C019  FFD9         	movff	turn_left_135@mL,fsr2l
  1793   001722  C01A  FFDA         	movff	turn_left_135@mL+1,fsr2h
  1794   001726  2ADF               	incf	indf2,f,c
  1795   001728                     l2597:
  1796                           
  1797                           ;dc_motor.c: 166:         if ((mR->power) < 70) (mR->power) += 1;
  1798   001728  C01B  FFD9         	movff	turn_left_135@mR,fsr2l
  1799   00172C  C01C  FFDA         	movff	turn_left_135@mR+1,fsr2h
  1800   001730  0E46               	movlw	70
  1801   001732  60DF               	cpfslt	indf2,c
  1802   001734  EF9E  F00B         	goto	u1531
  1803   001738  EFA0  F00B         	goto	u1530
  1804   00173C                     u1531:
  1805   00173C  EFA5  F00B         	goto	l2601
  1806   001740                     u1530:
  1807   001740  C01B  FFD9         	movff	turn_left_135@mR,fsr2l
  1808   001744  C01C  FFDA         	movff	turn_left_135@mR+1,fsr2h
  1809   001748  2ADF               	incf	indf2,f,c
  1810   00174A                     l2601:
  1811                           
  1812                           ;dc_motor.c: 168:         setMotorPWM(mL);
  1813   00174A  C019  F00F         	movff	turn_left_135@mL,setMotorPWM@m
  1814   00174E  C01A  F010         	movff	turn_left_135@mL+1,setMotorPWM@m+1
  1815   001752  EC5A  F009         	call	_setMotorPWM	;wreg free
  1816   001756                     
  1817                           ;dc_motor.c: 169:         setMotorPWM(mR);
  1818   001756  C01B  F00F         	movff	turn_left_135@mR,setMotorPWM@m
  1819   00175A  C01C  F010         	movff	turn_left_135@mR+1,setMotorPWM@m+1
  1820   00175E  EC5A  F009         	call	_setMotorPWM	;wreg free
  1821   001762                     
  1822                           ;dc_motor.c: 170:         _delay((unsigned long)((1)*(64000000/4000.0)));
  1823   001762  0E15               	movlw	21
  1824   001764  6E1D               	movwf	??_turn_left_135^0,c
  1825   001766  0EC6               	movlw	198
  1826   001768                     u1887:
  1827   001768  2EE8               	decfsz	wreg,f,c
  1828   00176A  D7FE               	bra	u1887
  1829   00176C  2E1D               	decfsz	??_turn_left_135^0,f,c
  1830   00176E  D7FC               	bra	u1887
  1831   001770  D000               	nop2	
  1832   001772                     l201:
  1833                           
  1834                           ;dc_motor.c: 164:     while ((mL->power) < 70 || (mR->power) < 70){
  1835   001772  C019  FFD9         	movff	turn_left_135@mL,fsr2l
  1836   001776  C01A  FFDA         	movff	turn_left_135@mL+1,fsr2h
  1837   00177A  0E45               	movlw	69
  1838   00177C  64DF               	cpfsgt	indf2,c
  1839   00177E  EFC3  F00B         	goto	u1541
  1840   001782  EFC5  F00B         	goto	u1540
  1841   001786                     u1541:
  1842   001786  EF83  F00B         	goto	l2593
  1843   00178A                     u1540:
  1844   00178A  C01B  FFD9         	movff	turn_left_135@mR,fsr2l
  1845   00178E  C01C  FFDA         	movff	turn_left_135@mR+1,fsr2h
  1846   001792  0E45               	movlw	69
  1847   001794  64DF               	cpfsgt	indf2,c
  1848   001796  EFCF  F00B         	goto	u1551
  1849   00179A  EFD1  F00B         	goto	u1550
  1850   00179E                     u1551:
  1851   00179E  EF83  F00B         	goto	l2593
  1852   0017A2                     u1550:
  1853   0017A2                     
  1854                           ;dc_motor.c: 172:     _delay((unsigned long)((500)*(64000000/4000.0)));
  1855   0017A2  0E29               	movlw	41
  1856   0017A4  6E1E               	movwf	(??_turn_left_135+1)^0,c
  1857   0017A6  0E96               	movlw	150
  1858   0017A8  6E1D               	movwf	??_turn_left_135^0,c
  1859   0017AA  0E7F               	movlw	127
  1860   0017AC                     u1897:
  1861   0017AC  2EE8               	decfsz	wreg,f,c
  1862   0017AE  D7FE               	bra	u1897
  1863   0017B0  2E1D               	decfsz	??_turn_left_135^0,f,c
  1864   0017B2  D7FC               	bra	u1897
  1865   0017B4  2E1E               	decfsz	(??_turn_left_135+1)^0,f,c
  1866   0017B6  D7FA               	bra	u1897
  1867   0017B8  0000               	nop	
  1868   0017BA                     
  1869                           ;dc_motor.c: 173:     stop(mL, mR);
  1870   0017BA  C019  F015         	movff	turn_left_135@mL,stop@mL
  1871   0017BE  C01A  F016         	movff	turn_left_135@mL+1,stop@mL+1
  1872   0017C2  C01B  F017         	movff	turn_left_135@mR,stop@mR
  1873   0017C6  C01C  F018         	movff	turn_left_135@mR+1,stop@mR+1
  1874   0017CA  EC99  F00E         	call	_stop	;wreg free
  1875   0017CE  0012               	return		;funcret
  1876   0017D0                     __end_of_turn_left_135:
  1877                           	callstack 0
  1878                           
  1879 ;; *************** function _sprintf *****************
  1880 ;; Defined at:
  1881 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  1882 ;; Parameters:    Size  Location     Type
  1883 ;;  s               2   26[COMRAM] PTR unsigned char 
  1884 ;;		 -> main@blue_val(20), main@green_val(20), main@red_val(20), main@clear_val(20), 
  1885 ;;  fmt             1   28[COMRAM] PTR const unsigned char 
  1886 ;;		 -> STR_4(14), STR_3(13), STR_2(14), STR_1(12), 
  1887 ;; Auto vars:     Size  Location     Type
  1888 ;;  f              12   32[COMRAM] struct _IO_FILE
  1889 ;;  ret             2    0        int 
  1890 ;;  ap              1   31[COMRAM] PTR void [1]
  1891 ;;		 -> ?_sprintf(2), 
  1892 ;; Return value:  Size  Location     Type
  1893 ;;                  2   26[COMRAM] int 
  1894 ;; Registers used:
  1895 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1896 ;; Tracked objects:
  1897 ;;		On entry : 0/0
  1898 ;;		On exit  : 0/0
  1899 ;;		Unchanged: 0/0
  1900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1901 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1902 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1904 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1905 ;;Total ram usage:       18 bytes
  1906 ;; Hardware stack levels used: 1
  1907 ;; Hardware stack levels required when called: 6
  1908 ;; This function calls:
  1909 ;;		_vfprintf
  1910 ;; This function is called by:
  1911 ;;		_main
  1912 ;; This function uses a non-reentrant model
  1913 ;;
  1914                           
  1915                           	psect	text5
  1916   0020D0                     __ptext5:
  1917                           	callstack 0
  1918   0020D0                     _sprintf:
  1919                           	callstack 24
  1920   0020D0  0E1E               	movlw	low (?_sprintf+3)
  1921   0020D2  6E20               	movwf	sprintf@ap^0,c
  1922   0020D4  C01B  F021         	movff	sprintf@s,sprintf@f
  1923   0020D8  C01C  F022         	movff	sprintf@s+1,sprintf@f+1
  1924   0020DC  0E00               	movlw	0
  1925   0020DE  6E25               	movwf	(sprintf@f+4)^0,c
  1926   0020E0  0E00               	movlw	0
  1927   0020E2  6E24               	movwf	(sprintf@f+3)^0,c
  1928   0020E4  0E00               	movlw	0
  1929   0020E6  6E2C               	movwf	(sprintf@f+11)^0,c
  1930   0020E8  0E00               	movlw	0
  1931   0020EA  6E2B               	movwf	(sprintf@f+10)^0,c
  1932   0020EC  0E21               	movlw	low sprintf@f
  1933   0020EE  6E17               	movwf	vfprintf@fp^0,c
  1934   0020F0  C01D  F018         	movff	sprintf@fmt,vfprintf@fmt
  1935   0020F4  0E20               	movlw	low sprintf@ap
  1936   0020F6  6E19               	movwf	vfprintf@ap^0,c
  1937   0020F8  EC86  F010         	call	_vfprintf	;wreg free
  1938   0020FC  5024               	movf	(sprintf@f+3)^0,w,c
  1939   0020FE  241B               	addwf	sprintf@s^0,w,c
  1940   002100  6ED9               	movwf	fsr2l,c
  1941   002102  5025               	movf	(sprintf@f+4)^0,w,c
  1942   002104  201C               	addwfc	(sprintf@s+1)^0,w,c
  1943   002106  6EDA               	movwf	fsr2h,c
  1944   002108  6ADF               	clrf	indf2,c
  1945   00210A  0012               	return		;funcret
  1946   00210C                     __end_of_sprintf:
  1947                           	callstack 0
  1948                           
  1949 ;; *************** function _vfprintf *****************
  1950 ;; Defined at:
  1951 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  1952 ;; Parameters:    Size  Location     Type
  1953 ;;  fp              1   22[COMRAM] PTR struct _IO_FILE
  1954 ;;		 -> sprintf@f(12), 
  1955 ;;  fmt             1   23[COMRAM] PTR const unsigned char 
  1956 ;;		 -> STR_4(14), STR_3(13), STR_2(14), STR_1(12), 
  1957 ;;  ap              1   24[COMRAM] PTR PTR void 
  1958 ;;		 -> sprintf@ap(1), 
  1959 ;; Auto vars:     Size  Location     Type
  1960 ;;  cfmt            1   25[COMRAM] PTR unsigned char 
  1961 ;;		 -> STR_4(14), STR_3(13), STR_2(14), STR_1(12), 
  1962 ;; Return value:  Size  Location     Type
  1963 ;;                  2   22[COMRAM] int 
  1964 ;; Registers used:
  1965 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1966 ;; Tracked objects:
  1967 ;;		On entry : 0/0
  1968 ;;		On exit  : 0/0
  1969 ;;		Unchanged: 0/0
  1970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1971 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1972 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1974 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1975 ;;Total ram usage:        4 bytes
  1976 ;; Hardware stack levels used: 1
  1977 ;; Hardware stack levels required when called: 5
  1978 ;; This function calls:
  1979 ;;		_vfpfcnvrt
  1980 ;; This function is called by:
  1981 ;;		_sprintf
  1982 ;; This function uses a non-reentrant model
  1983 ;;
  1984                           
  1985                           	psect	text6
  1986   00210C                     __ptext6:
  1987                           	callstack 0
  1988   00210C                     _vfprintf:
  1989                           	callstack 24
  1990   00210C                     
  1991                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1992   00210C  C018  F01A         	movff	vfprintf@fmt,vfprintf@cfmt
  1993                           
  1994                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1995   002110  EF92  F010         	goto	l2459
  1996   002114                     l2457:
  1997                           
  1998                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1999   002114  C017  F00C         	movff	vfprintf@fp,vfpfcnvrt@fp
  2000   002118  0E1A               	movlw	low vfprintf@cfmt
  2001   00211A  6E0D               	movwf	vfpfcnvrt@fmt^0,c
  2002   00211C  C019  F00E         	movff	vfprintf@ap,vfpfcnvrt@ap
  2003   002120  EC86  F008         	call	_vfpfcnvrt	;wreg free
  2004   002124                     l2459:
  2005                           
  2006                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2007   002124  C01A  FFF6         	movff	vfprintf@cfmt,tblptrl
  2008   002128                     	if	0	;There is only one active tblptr byte
  2009   002128                     	endif
  2010   002128                     	if	0	;tblptru may be non-zero
  2011   002128                     	endif
  2012   002128                     	if	0	;tblptru may be non-zero
  2013   002128                     	endif
  2014   002128  0008               	tblrd		*
  2015   00212A  50F5               	movf	tablat,w,c
  2016   00212C  0900               	iorlw	0
  2017   00212E  A4D8               	btfss	status,2,c
  2018   002130  EF9C  F010         	goto	u1331
  2019   002134  EF9E  F010         	goto	u1330
  2020   002138                     u1331:
  2021   002138  EF8A  F010         	goto	l2457
  2022   00213C                     u1330:
  2023   00213C                     
  2024                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  2025   00213C  0E00               	movlw	0
  2026   00213E  6E18               	movwf	(?_vfprintf+1)^0,c
  2027   002140  0E00               	movlw	0
  2028   002142  6E17               	movwf	?_vfprintf^0,c
  2029   002144  0012               	return		;funcret
  2030   002146                     __end_of_vfprintf:
  2031                           	callstack 0
  2032                           
  2033 ;; *************** function _vfpfcnvrt *****************
  2034 ;; Defined at:
  2035 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  2036 ;; Parameters:    Size  Location     Type
  2037 ;;  fp              1   11[COMRAM] PTR struct _IO_FILE
  2038 ;;		 -> sprintf@f(12), 
  2039 ;;  fmt             1   12[COMRAM] PTR PTR unsigned char 
  2040 ;;		 -> vfprintf@cfmt(1), 
  2041 ;;  ap              1   13[COMRAM] PTR PTR void 
  2042 ;;		 -> sprintf@ap(1), 
  2043 ;; Auto vars:     Size  Location     Type
  2044 ;;  convarg         4   17[COMRAM] struct .
  2045 ;;  c               1   21[COMRAM] unsigned char 
  2046 ;;  cp              1   16[COMRAM] PTR unsigned char 
  2047 ;;		 -> STR_4(14), STR_3(13), STR_2(14), STR_1(12), 
  2048 ;;  done            1   15[COMRAM] _Bool 
  2049 ;; Return value:  Size  Location     Type
  2050 ;;                  1    wreg      void 
  2051 ;; Registers used:
  2052 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2053 ;; Tracked objects:
  2054 ;;		On entry : 0/0
  2055 ;;		On exit  : 0/0
  2056 ;;		Unchanged: 0/0
  2057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2058 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2059 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2060 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2061 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2062 ;;Total ram usage:       11 bytes
  2063 ;; Hardware stack levels used: 1
  2064 ;; Hardware stack levels required when called: 4
  2065 ;; This function calls:
  2066 ;;		___awdiv
  2067 ;;		___awmod
  2068 ;;		_abs
  2069 ;;		_fputc
  2070 ;; This function is called by:
  2071 ;;		_vfprintf
  2072 ;; This function uses a non-reentrant model
  2073 ;;
  2074                           
  2075                           	psect	text7
  2076   00110C                     __ptext7:
  2077                           	callstack 0
  2078   00110C                     _vfpfcnvrt:
  2079                           	callstack 24
  2080   00110C                     
  2081                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  2082   00110C  500D               	movf	vfpfcnvrt@fmt^0,w,c
  2083   00110E  6ED9               	movwf	fsr2l,c
  2084   001110  6ADA               	clrf	fsr2h,c
  2085   001112  CFDF FFF6          	movff	indf2,tblptrl
  2086   001116                     	if	0	;There is only one active tblptr byte
  2087   001116                     	endif
  2088   001116                     	if	0	;tblptru may be non-zero
  2089   001116                     	endif
  2090   001116                     	if	0	;tblptru may be non-zero
  2091   001116                     	endif
  2092   001116  0008               	tblrd		*
  2093   001118  50F5               	movf	tablat,w,c
  2094   00111A  0A25               	xorlw	37
  2095   00111C  A4D8               	btfss	status,2,c
  2096   00111E  EF93  F008         	goto	u1181
  2097   001122  EF95  F008         	goto	u1180
  2098   001126                     u1181:
  2099   001126  EF4A  F009         	goto	l2387
  2100   00112A                     u1180:
  2101   00112A                     
  2102                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  2103   00112A  500D               	movf	vfpfcnvrt@fmt^0,w,c
  2104   00112C  6ED9               	movwf	fsr2l,c
  2105   00112E  6ADA               	clrf	fsr2h,c
  2106   001130  2ADF               	incf	indf2,f,c
  2107   001132                     
  2108                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  2109   001132  0E00               	movlw	0
  2110   001134  6E44               	movwf	(_width+1)^0,c
  2111   001136  0E00               	movlw	0
  2112   001138  6E43               	movwf	_width^0,c
  2113   00113A  C043  F047         	movff	_width,_flags
  2114   00113E                     
  2115                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  2116   00113E  6845               	setf	_prec^0,c
  2117   001140  6846               	setf	(_prec+1)^0,c
  2118   001142                     
  2119                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  2120   001142  500D               	movf	vfpfcnvrt@fmt^0,w,c
  2121   001144  6ED9               	movwf	fsr2l,c
  2122   001146  6ADA               	clrf	fsr2h,c
  2123   001148  50DF               	movf	indf2,w,c
  2124   00114A  6E11               	movwf	vfpfcnvrt@cp^0,c
  2125   00114C                     
  2126                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  2127   00114C  C011  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2128   001150                     	if	0	;There is only one active tblptr byte
  2129   001150                     	endif
  2130   001150                     	if	0	;tblptru may be non-zero
  2131   001150                     	endif
  2132   001150                     	if	0	;tblptru may be non-zero
  2133   001150                     	endif
  2134   001150  0008               	tblrd		*
  2135   001152  50F5               	movf	tablat,w,c
  2136   001154  0A64               	xorlw	100
  2137   001156  B4D8               	btfsc	status,2,c
  2138   001158  EFB0  F008         	goto	u1191
  2139   00115C  EFB2  F008         	goto	u1190
  2140   001160                     u1191:
  2141   001160  EFBE  F008         	goto	l2357
  2142   001164                     u1190:
  2143   001164  C011  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2144   001168                     	if	0	;There is only one active tblptr byte
  2145   001168                     	endif
  2146   001168                     	if	0	;tblptru may be non-zero
  2147   001168                     	endif
  2148   001168                     	if	0	;tblptru may be non-zero
  2149   001168                     	endif
  2150   001168  0008               	tblrd		*
  2151   00116A  50F5               	movf	tablat,w,c
  2152   00116C  0A69               	xorlw	105
  2153   00116E  A4D8               	btfss	status,2,c
  2154   001170  EFBC  F008         	goto	u1201
  2155   001174  EFBE  F008         	goto	u1200
  2156   001178                     u1201:
  2157   001178  EF44  F009         	goto	l2383
  2158   00117C                     u1200:
  2159   00117C                     l2357:
  2160                           
  2161                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  2162   00117C  500E               	movf	vfpfcnvrt@ap^0,w,c
  2163   00117E  6ED9               	movwf	fsr2l,c
  2164   001180  6ADA               	clrf	fsr2h,c
  2165   001182  0E02               	movlw	2
  2166   001184  26DF               	addwf	indf2,f,c
  2167   001186  5CDF               	subwf	indf2,w,c
  2168   001188  6ED9               	movwf	fsr2l,c
  2169   00118A  6ADA               	clrf	fsr2h,c
  2170   00118C  CFDE F012          	movff	postinc2,vfpfcnvrt@convarg
  2171   001190  CFDE F013          	movff	postinc2,vfpfcnvrt@convarg+1
  2172   001194                     
  2173                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  2174   001194  500D               	movf	vfpfcnvrt@fmt^0,w,c
  2175   001196  6ED9               	movwf	fsr2l,c
  2176   001198  6ADA               	clrf	fsr2h,c
  2177   00119A  2811               	incf	vfpfcnvrt@cp^0,w,c
  2178   00119C  6EDF               	movwf	indf2,c
  2179   00119E                     
  2180                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  2181   00119E  0E20               	movlw	32
  2182   0011A0  6E16               	movwf	vfpfcnvrt@c^0,c
  2183                           
  2184                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  2185   0011A2  BE13               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  2186   0011A4  EFD6  F008         	goto	u1211
  2187   0011A8  EFD9  F008         	goto	u1210
  2188   0011AC                     u1211:
  2189   0011AC  0E01               	movlw	1
  2190   0011AE  EFDA  F008         	goto	u1220
  2191   0011B2                     u1210:
  2192   0011B2  0E00               	movlw	0
  2193   0011B4                     u1220:
  2194   0011B4  6E10               	movwf	vfpfcnvrt@done^0,c
  2195   0011B6                     l2363:
  2196                           
  2197                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  2198   0011B6  0616               	decf	vfpfcnvrt@c^0,f,c
  2199   0011B8  5016               	movf	vfpfcnvrt@c^0,w,c
  2200   0011BA  0F9C               	addlw	low _dbuf
  2201   0011BC  6ED9               	movwf	fsr2l,c
  2202   0011BE  6ADA               	clrf	fsr2h,c
  2203   0011C0  C012  F002         	movff	vfpfcnvrt@convarg,___awmod@dividend
  2204   0011C4  C013  F003         	movff	vfpfcnvrt@convarg+1,___awmod@dividend+1
  2205   0011C8  0E00               	movlw	0
  2206   0011CA  6E05               	movwf	(___awmod@divisor+1)^0,c
  2207   0011CC  0E0A               	movlw	10
  2208   0011CE  6E04               	movwf	___awmod@divisor^0,c
  2209   0011D0  ECF0  F00D         	call	___awmod	;wreg free
  2210   0011D4  C002  F008         	movff	?___awmod,abs@a
  2211   0011D8  C003  F009         	movff	?___awmod+1,abs@a+1
  2212   0011DC  ECA3  F010         	call	_abs	;wreg free
  2213   0011E0  5008               	movf	?_abs^0,w,c
  2214   0011E2  0F30               	addlw	48
  2215   0011E4  6EDF               	movwf	indf2,c
  2216   0011E6                     
  2217                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  2218   0011E6  C012  F002         	movff	vfpfcnvrt@convarg,___awdiv@dividend
  2219   0011EA  C013  F003         	movff	vfpfcnvrt@convarg+1,___awdiv@dividend+1
  2220   0011EE  0E00               	movlw	0
  2221   0011F0  6E05               	movwf	(___awdiv@divisor+1)^0,c
  2222   0011F2  0E0A               	movlw	10
  2223   0011F4  6E04               	movwf	___awdiv@divisor^0,c
  2224   0011F6  ECD2  F00C         	call	___awdiv	;wreg free
  2225   0011FA  C002  F012         	movff	?___awdiv,vfpfcnvrt@convarg
  2226   0011FE  C003  F013         	movff	?___awdiv+1,vfpfcnvrt@convarg+1
  2227   001202                     
  2228                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  2229   001202  5012               	movf	vfpfcnvrt@convarg^0,w,c
  2230   001204  1013               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  2231   001206  B4D8               	btfsc	status,2,c
  2232   001208  EF08  F009         	goto	u1231
  2233   00120C  EF0A  F009         	goto	u1230
  2234   001210                     u1231:
  2235   001210  EF12  F009         	goto	l2371
  2236   001214                     u1230:
  2237   001214  5016               	movf	vfpfcnvrt@c^0,w,c
  2238   001216  A4D8               	btfss	status,2,c
  2239   001218  EF10  F009         	goto	u1241
  2240   00121C  EF12  F009         	goto	u1240
  2241   001220                     u1241:
  2242   001220  EFDB  F008         	goto	l2363
  2243   001224                     u1240:
  2244   001224                     l2371:
  2245                           
  2246                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  2247   001224  5016               	movf	vfpfcnvrt@c^0,w,c
  2248   001226  B4D8               	btfsc	status,2,c
  2249   001228  EF18  F009         	goto	u1251
  2250   00122C  EF1A  F009         	goto	u1250
  2251   001230                     u1251:
  2252   001230  EF39  F009         	goto	l2381
  2253   001234                     u1250:
  2254   001234  5010               	movf	vfpfcnvrt@done^0,w,c
  2255   001236  B4D8               	btfsc	status,2,c
  2256   001238  EF20  F009         	goto	u1261
  2257   00123C  EF22  F009         	goto	u1260
  2258   001240                     u1261:
  2259   001240  EF39  F009         	goto	l2381
  2260   001244                     u1260:
  2261   001244                     
  2262                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  2263   001244  0616               	decf	vfpfcnvrt@c^0,f,c
  2264   001246  5016               	movf	vfpfcnvrt@c^0,w,c
  2265   001248  0F9C               	addlw	low _dbuf
  2266   00124A  6ED9               	movwf	fsr2l,c
  2267   00124C  6ADA               	clrf	fsr2h,c
  2268   00124E  0E2D               	movlw	45
  2269   001250  6EDF               	movwf	indf2,c
  2270   001252  EF39  F009         	goto	l2381
  2271   001256                     l2377:
  2272                           
  2273                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  2274   001256  5016               	movf	vfpfcnvrt@c^0,w,c
  2275   001258  0F9C               	addlw	low _dbuf
  2276   00125A  6ED9               	movwf	fsr2l,c
  2277   00125C  6ADA               	clrf	fsr2h,c
  2278   00125E  50DF               	movf	indf2,w,c
  2279   001260  6E0F               	movwf	??_vfpfcnvrt^0,c
  2280   001262  500F               	movf	??_vfpfcnvrt^0,w,c
  2281   001264  6E02               	movwf	fputc@c^0,c
  2282   001266  6A03               	clrf	(fputc@c+1)^0,c
  2283   001268  C00C  F004         	movff	vfpfcnvrt@fp,fputc@fp
  2284   00126C  EC93  F00D         	call	_fputc	;wreg free
  2285   001270  2A16               	incf	vfpfcnvrt@c^0,f,c
  2286   001272                     l2381:
  2287                           
  2288                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  2289   001272  0E20               	movlw	32
  2290   001274  1816               	xorwf	vfpfcnvrt@c^0,w,c
  2291   001276  A4D8               	btfss	status,2,c
  2292   001278  EF40  F009         	goto	u1271
  2293   00127C  EF42  F009         	goto	u1270
  2294   001280                     u1271:
  2295   001280  EF2B  F009         	goto	l2377
  2296   001284                     u1270:
  2297   001284  EF59  F009         	goto	l1235
  2298   001288                     l2383:
  2299                           
  2300                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  2301   001288  500D               	movf	vfpfcnvrt@fmt^0,w,c
  2302   00128A  6ED9               	movwf	fsr2l,c
  2303   00128C  6ADA               	clrf	fsr2h,c
  2304   00128E  2ADF               	incf	indf2,f,c
  2305   001290  EF59  F009         	goto	l1235
  2306   001294                     l2387:
  2307                           
  2308                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  2309   001294  500D               	movf	vfpfcnvrt@fmt^0,w,c
  2310   001296  6ED9               	movwf	fsr2l,c
  2311   001298  6ADA               	clrf	fsr2h,c
  2312   00129A  CFDF FFF6          	movff	indf2,tblptrl
  2313   00129E                     	if	0	;There is only one active tblptr byte
  2314   00129E                     	endif
  2315   00129E                     	if	0	;tblptru may be non-zero
  2316   00129E                     	endif
  2317   00129E                     	if	0	;tblptru may be non-zero
  2318   00129E                     	endif
  2319   00129E  0008               	tblrd		*
  2320   0012A0  50F5               	movf	tablat,w,c
  2321   0012A2  6E02               	movwf	fputc@c^0,c
  2322   0012A4  6A03               	clrf	(fputc@c+1)^0,c
  2323   0012A6  C00C  F004         	movff	vfpfcnvrt@fp,fputc@fp
  2324   0012AA  EC93  F00D         	call	_fputc	;wreg free
  2325   0012AE  EF44  F009         	goto	l2383
  2326   0012B2                     l1235:
  2327   0012B2  0012               	return		;funcret
  2328   0012B4                     __end_of_vfpfcnvrt:
  2329                           	callstack 0
  2330                           
  2331 ;; *************** function _fputc *****************
  2332 ;; Defined at:
  2333 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  2334 ;; Parameters:    Size  Location     Type
  2335 ;;  c               2    1[COMRAM] int 
  2336 ;;  fp              1    3[COMRAM] PTR struct _IO_FILE
  2337 ;;		 -> sprintf@f(12), 
  2338 ;; Auto vars:     Size  Location     Type
  2339 ;;		None
  2340 ;; Return value:  Size  Location     Type
  2341 ;;                  2    1[COMRAM] int 
  2342 ;; Registers used:
  2343 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2344 ;; Tracked objects:
  2345 ;;		On entry : 0/0
  2346 ;;		On exit  : 0/0
  2347 ;;		Unchanged: 0/0
  2348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2349 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2351 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2352 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2353 ;;Total ram usage:        8 bytes
  2354 ;; Hardware stack levels used: 1
  2355 ;; Hardware stack levels required when called: 3
  2356 ;; This function calls:
  2357 ;;		_putch
  2358 ;; This function is called by:
  2359 ;;		_vfpfcnvrt
  2360 ;; This function uses a non-reentrant model
  2361 ;;
  2362                           
  2363                           	psect	text8
  2364   001B26                     __ptext8:
  2365                           	callstack 0
  2366   001B26                     _fputc:
  2367                           	callstack 24
  2368   001B26  5004               	movf	fputc@fp^0,w,c
  2369   001B28  B4D8               	btfsc	status,2,c
  2370   001B2A  EF99  F00D         	goto	u1091
  2371   001B2E  EF9B  F00D         	goto	u1090
  2372   001B32                     u1091:
  2373   001B32  EFA3  F00D         	goto	l2283
  2374   001B36                     u1090:
  2375   001B36  5004               	movf	fputc@fp^0,w,c
  2376   001B38  A4D8               	btfss	status,2,c
  2377   001B3A  EFA1  F00D         	goto	u1101
  2378   001B3E  EFA3  F00D         	goto	u1100
  2379   001B42                     u1101:
  2380   001B42  EFA8  F00D         	goto	l2285
  2381   001B46                     u1100:
  2382   001B46                     l2283:
  2383   001B46  5002               	movf	fputc@c^0,w,c
  2384   001B48  EC9C  F011         	call	_putch
  2385   001B4C  EFEF  F00D         	goto	l1260
  2386   001B50                     l2285:
  2387   001B50  5004               	movf	fputc@fp^0,w,c
  2388   001B52  6ED9               	movwf	fsr2l,c
  2389   001B54  6ADA               	clrf	fsr2h,c
  2390   001B56  0E0A               	movlw	10
  2391   001B58  26D9               	addwf	fsr2l,f,c
  2392   001B5A  50DE               	movf	postinc2,w,c
  2393   001B5C  10DE               	iorwf	postinc2,w,c
  2394   001B5E  B4D8               	btfsc	status,2,c
  2395   001B60  EFB4  F00D         	goto	u1111
  2396   001B64  EFB6  F00D         	goto	u1110
  2397   001B68                     u1111:
  2398   001B68  EFCF  F00D         	goto	l2289
  2399   001B6C                     u1110:
  2400   001B6C  5004               	movf	fputc@fp^0,w,c
  2401   001B6E  6ED9               	movwf	fsr2l,c
  2402   001B70  6ADA               	clrf	fsr2h,c
  2403   001B72  0E0A               	movlw	10
  2404   001B74  26D9               	addwf	fsr2l,f,c
  2405   001B76  5004               	movf	fputc@fp^0,w,c
  2406   001B78  6EE1               	movwf	fsr1l,c
  2407   001B7A  6AE2               	clrf	fsr1h,c
  2408   001B7C  0E03               	movlw	3
  2409   001B7E  26E1               	addwf	fsr1l,f,c
  2410   001B80  50DE               	movf	postinc2,w,c
  2411   001B82  5CE6               	subwf	postinc1,w,c
  2412   001B84  50E6               	movf	postinc1,w,c
  2413   001B86  0A80               	xorlw	128
  2414   001B88  6E09               	movwf	(??_fputc+4)^0,c
  2415   001B8A  50DE               	movf	postinc2,w,c
  2416   001B8C  0A80               	xorlw	128
  2417   001B8E  5809               	subwfb	(??_fputc+4)^0,w,c
  2418   001B90  B0D8               	btfsc	status,0,c
  2419   001B92  EFCD  F00D         	goto	u1121
  2420   001B96  EFCF  F00D         	goto	u1120
  2421   001B9A                     u1121:
  2422   001B9A  EFEF  F00D         	goto	l1260
  2423   001B9E                     u1120:
  2424   001B9E                     l2289:
  2425   001B9E  5004               	movf	fputc@fp^0,w,c
  2426   001BA0  6ED9               	movwf	fsr2l,c
  2427   001BA2  6ADA               	clrf	fsr2h,c
  2428   001BA4  0E03               	movlw	3
  2429   001BA6  26D9               	addwf	fsr2l,f,c
  2430   001BA8  CFDE F005          	movff	postinc2,??_fputc
  2431   001BAC  CFDD F006          	movff	postdec2,??_fputc+1
  2432   001BB0  5004               	movf	fputc@fp^0,w,c
  2433   001BB2  6ED9               	movwf	fsr2l,c
  2434   001BB4  6ADA               	clrf	fsr2h,c
  2435   001BB6  CFDE F007          	movff	postinc2,??_fputc+2
  2436   001BBA  CFDD F008          	movff	postdec2,??_fputc+3
  2437   001BBE  5005               	movf	??_fputc^0,w,c
  2438   001BC0  2407               	addwf	(??_fputc+2)^0,w,c
  2439   001BC2  6ED9               	movwf	fsr2l,c
  2440   001BC4  5006               	movf	(??_fputc+1)^0,w,c
  2441   001BC6  2008               	addwfc	(??_fputc+3)^0,w,c
  2442   001BC8  6EDA               	movwf	fsr2h,c
  2443   001BCA  C002  FFDF         	movff	fputc@c,indf2
  2444   001BCE  5004               	movf	fputc@fp^0,w,c
  2445   001BD0  6ED9               	movwf	fsr2l,c
  2446   001BD2  6ADA               	clrf	fsr2h,c
  2447   001BD4  0E03               	movlw	3
  2448   001BD6  26D9               	addwf	fsr2l,f,c
  2449   001BD8  2ADE               	incf	postinc2,f,c
  2450   001BDA  0E00               	movlw	0
  2451   001BDC  22DD               	addwfc	postdec2,f,c
  2452   001BDE                     l1260:
  2453   001BDE  0012               	return		;funcret
  2454   001BE0                     __end_of_fputc:
  2455                           	callstack 0
  2456                           
  2457 ;; *************** function _putch *****************
  2458 ;; Defined at:
  2459 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  2460 ;; Parameters:    Size  Location     Type
  2461 ;;  c               1    wreg     unsigned char 
  2462 ;; Auto vars:     Size  Location     Type
  2463 ;;  c               1    0[COMRAM] unsigned char 
  2464 ;; Return value:  Size  Location     Type
  2465 ;;                  1    wreg      void 
  2466 ;; Registers used:
  2467 ;;		wreg
  2468 ;; Tracked objects:
  2469 ;;		On entry : 0/0
  2470 ;;		On exit  : 0/0
  2471 ;;		Unchanged: 0/0
  2472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2477 ;;Total ram usage:        0 bytes
  2478 ;; Hardware stack levels used: 1
  2479 ;; Hardware stack levels required when called: 2
  2480 ;; This function calls:
  2481 ;;		Nothing
  2482 ;; This function is called by:
  2483 ;;		_fputc
  2484 ;; This function uses a non-reentrant model
  2485 ;;
  2486                           
  2487                           	psect	text9
  2488   002338                     __ptext9:
  2489                           	callstack 0
  2490   002338                     _putch:
  2491                           	callstack 24
  2492   002338  0012               	return		;funcret
  2493   00233A                     __end_of_putch:
  2494                           	callstack 0
  2495                           
  2496 ;; *************** function _abs *****************
  2497 ;; Defined at:
  2498 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  2499 ;; Parameters:    Size  Location     Type
  2500 ;;  a               2    7[COMRAM] int 
  2501 ;; Auto vars:     Size  Location     Type
  2502 ;;		None
  2503 ;; Return value:  Size  Location     Type
  2504 ;;                  2    7[COMRAM] int 
  2505 ;; Registers used:
  2506 ;;		wreg, status,2, status,0
  2507 ;; Tracked objects:
  2508 ;;		On entry : 0/0
  2509 ;;		On exit  : 0/0
  2510 ;;		Unchanged: 0/0
  2511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2512 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2514 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2515 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2516 ;;Total ram usage:        4 bytes
  2517 ;; Hardware stack levels used: 1
  2518 ;; Hardware stack levels required when called: 2
  2519 ;; This function calls:
  2520 ;;		Nothing
  2521 ;; This function is called by:
  2522 ;;		_vfpfcnvrt
  2523 ;; This function uses a non-reentrant model
  2524 ;;
  2525                           
  2526                           	psect	text10
  2527   002146                     __ptext10:
  2528                           	callstack 0
  2529   002146                     _abs:
  2530                           	callstack 25
  2531   002146  BE09               	btfsc	(abs@a+1)^0,7,c
  2532   002148  EFA8  F010         	goto	u1131
  2533   00214C  EFAA  F010         	goto	u1130
  2534   002150                     u1131:
  2535   002150  EFB0  F010         	goto	l1245
  2536   002154                     u1130:
  2537   002154  C008  F008         	movff	abs@a,?_abs
  2538   002158  C009  F009         	movff	abs@a+1,?_abs+1
  2539   00215C  EFBC  F010         	goto	l1248
  2540   002160                     l1245:
  2541   002160  C008  F00A         	movff	abs@a,??_abs
  2542   002164  C009  F00B         	movff	abs@a+1,??_abs+1
  2543   002168  1E0A               	comf	??_abs^0,f,c
  2544   00216A  1E0B               	comf	(??_abs+1)^0,f,c
  2545   00216C  4A0A               	infsnz	??_abs^0,f,c
  2546   00216E  2A0B               	incf	(??_abs+1)^0,f,c
  2547   002170  C00A  F008         	movff	??_abs,?_abs
  2548   002174  C00B  F009         	movff	??_abs+1,?_abs+1
  2549   002178                     l1248:
  2550   002178  0012               	return		;funcret
  2551   00217A                     __end_of_abs:
  2552                           	callstack 0
  2553                           
  2554 ;; *************** function ___awmod *****************
  2555 ;; Defined at:
  2556 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  2557 ;; Parameters:    Size  Location     Type
  2558 ;;  dividend        2    1[COMRAM] int 
  2559 ;;  divisor         2    3[COMRAM] int 
  2560 ;; Auto vars:     Size  Location     Type
  2561 ;;  sign            1    6[COMRAM] unsigned char 
  2562 ;;  counter         1    5[COMRAM] unsigned char 
  2563 ;; Return value:  Size  Location     Type
  2564 ;;                  2    1[COMRAM] int 
  2565 ;; Registers used:
  2566 ;;		wreg, status,2, status,0
  2567 ;; Tracked objects:
  2568 ;;		On entry : 0/0
  2569 ;;		On exit  : 0/0
  2570 ;;		Unchanged: 0/0
  2571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2572 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2573 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2575 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2576 ;;Total ram usage:        6 bytes
  2577 ;; Hardware stack levels used: 1
  2578 ;; Hardware stack levels required when called: 2
  2579 ;; This function calls:
  2580 ;;		Nothing
  2581 ;; This function is called by:
  2582 ;;		_vfpfcnvrt
  2583 ;; This function uses a non-reentrant model
  2584 ;;
  2585                           
  2586                           	psect	text11
  2587   001BE0                     __ptext11:
  2588                           	callstack 0
  2589   001BE0                     ___awmod:
  2590                           	callstack 25
  2591   001BE0  0E00               	movlw	0
  2592   001BE2  6E07               	movwf	___awmod@sign^0,c
  2593   001BE4  BE03               	btfsc	(___awmod@dividend+1)^0,7,c
  2594   001BE6  EFF9  F00D         	goto	u1000
  2595   001BEA  EFF7  F00D         	goto	u1001
  2596   001BEE                     u1001:
  2597   001BEE  EFFF  F00D         	goto	l2229
  2598   001BF2                     u1000:
  2599   001BF2  6C02               	negf	___awmod@dividend^0,c
  2600   001BF4  1E03               	comf	(___awmod@dividend+1)^0,f,c
  2601   001BF6  B0D8               	btfsc	status,0,c
  2602   001BF8  2A03               	incf	(___awmod@dividend+1)^0,f,c
  2603   001BFA  0E01               	movlw	1
  2604   001BFC  6E07               	movwf	___awmod@sign^0,c
  2605   001BFE                     l2229:
  2606   001BFE  BE05               	btfsc	(___awmod@divisor+1)^0,7,c
  2607   001C00  EF06  F00E         	goto	u1010
  2608   001C04  EF04  F00E         	goto	u1011
  2609   001C08                     u1011:
  2610   001C08  EF0A  F00E         	goto	l2233
  2611   001C0C                     u1010:
  2612   001C0C  6C04               	negf	___awmod@divisor^0,c
  2613   001C0E  1E05               	comf	(___awmod@divisor+1)^0,f,c
  2614   001C10  B0D8               	btfsc	status,0,c
  2615   001C12  2A05               	incf	(___awmod@divisor+1)^0,f,c
  2616   001C14                     l2233:
  2617   001C14  5004               	movf	___awmod@divisor^0,w,c
  2618   001C16  1005               	iorwf	(___awmod@divisor+1)^0,w,c
  2619   001C18  B4D8               	btfsc	status,2,c
  2620   001C1A  EF11  F00E         	goto	u1021
  2621   001C1E  EF13  F00E         	goto	u1020
  2622   001C22                     u1021:
  2623   001C22  EF37  F00E         	goto	l2249
  2624   001C26                     u1020:
  2625   001C26  0E01               	movlw	1
  2626   001C28  6E06               	movwf	___awmod@counter^0,c
  2627   001C2A  EF1B  F00E         	goto	l2239
  2628   001C2E                     l2237:
  2629   001C2E  90D8               	bcf	status,0,c
  2630   001C30  3604               	rlcf	___awmod@divisor^0,f,c
  2631   001C32  3605               	rlcf	(___awmod@divisor+1)^0,f,c
  2632   001C34  2A06               	incf	___awmod@counter^0,f,c
  2633   001C36                     l2239:
  2634   001C36  AE05               	btfss	(___awmod@divisor+1)^0,7,c
  2635   001C38  EF20  F00E         	goto	u1031
  2636   001C3C  EF22  F00E         	goto	u1030
  2637   001C40                     u1031:
  2638   001C40  EF17  F00E         	goto	l2237
  2639   001C44                     u1030:
  2640   001C44                     l2241:
  2641   001C44  5004               	movf	___awmod@divisor^0,w,c
  2642   001C46  5C02               	subwf	___awmod@dividend^0,w,c
  2643   001C48  5005               	movf	(___awmod@divisor+1)^0,w,c
  2644   001C4A  5803               	subwfb	(___awmod@dividend+1)^0,w,c
  2645   001C4C  A0D8               	btfss	status,0,c
  2646   001C4E  EF2B  F00E         	goto	u1041
  2647   001C52  EF2D  F00E         	goto	u1040
  2648   001C56                     u1041:
  2649   001C56  EF31  F00E         	goto	l2245
  2650   001C5A                     u1040:
  2651   001C5A  5004               	movf	___awmod@divisor^0,w,c
  2652   001C5C  5E02               	subwf	___awmod@dividend^0,f,c
  2653   001C5E  5005               	movf	(___awmod@divisor+1)^0,w,c
  2654   001C60  5A03               	subwfb	(___awmod@dividend+1)^0,f,c
  2655   001C62                     l2245:
  2656   001C62  90D8               	bcf	status,0,c
  2657   001C64  3205               	rrcf	(___awmod@divisor+1)^0,f,c
  2658   001C66  3204               	rrcf	___awmod@divisor^0,f,c
  2659   001C68  2E06               	decfsz	___awmod@counter^0,f,c
  2660   001C6A  EF22  F00E         	goto	l2241
  2661   001C6E                     l2249:
  2662   001C6E  5007               	movf	___awmod@sign^0,w,c
  2663   001C70  B4D8               	btfsc	status,2,c
  2664   001C72  EF3D  F00E         	goto	u1051
  2665   001C76  EF3F  F00E         	goto	u1050
  2666   001C7A                     u1051:
  2667   001C7A  EF43  F00E         	goto	l2253
  2668   001C7E                     u1050:
  2669   001C7E  6C02               	negf	___awmod@dividend^0,c
  2670   001C80  1E03               	comf	(___awmod@dividend+1)^0,f,c
  2671   001C82  B0D8               	btfsc	status,0,c
  2672   001C84  2A03               	incf	(___awmod@dividend+1)^0,f,c
  2673   001C86                     l2253:
  2674   001C86  C002  F002         	movff	___awmod@dividend,?___awmod
  2675   001C8A  C003  F003         	movff	___awmod@dividend+1,?___awmod+1
  2676   001C8E  0012               	return		;funcret
  2677   001C90                     __end_of___awmod:
  2678                           	callstack 0
  2679                           
  2680 ;; *************** function ___awdiv *****************
  2681 ;; Defined at:
  2682 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  2683 ;; Parameters:    Size  Location     Type
  2684 ;;  dividend        2    1[COMRAM] int 
  2685 ;;  divisor         2    3[COMRAM] int 
  2686 ;; Auto vars:     Size  Location     Type
  2687 ;;  quotient        2    7[COMRAM] int 
  2688 ;;  sign            1    6[COMRAM] unsigned char 
  2689 ;;  counter         1    5[COMRAM] unsigned char 
  2690 ;; Return value:  Size  Location     Type
  2691 ;;                  2    1[COMRAM] int 
  2692 ;; Registers used:
  2693 ;;		wreg, status,2, status,0
  2694 ;; Tracked objects:
  2695 ;;		On entry : 0/0
  2696 ;;		On exit  : 0/0
  2697 ;;		Unchanged: 0/0
  2698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2699 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2700 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2702 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2703 ;;Total ram usage:        8 bytes
  2704 ;; Hardware stack levels used: 1
  2705 ;; Hardware stack levels required when called: 2
  2706 ;; This function calls:
  2707 ;;		Nothing
  2708 ;; This function is called by:
  2709 ;;		_vfpfcnvrt
  2710 ;; This function uses a non-reentrant model
  2711 ;;
  2712                           
  2713                           	psect	text12
  2714   0019A4                     __ptext12:
  2715                           	callstack 0
  2716   0019A4                     ___awdiv:
  2717                           	callstack 25
  2718   0019A4  0E00               	movlw	0
  2719   0019A6  6E07               	movwf	___awdiv@sign^0,c
  2720   0019A8  BE05               	btfsc	(___awdiv@divisor+1)^0,7,c
  2721   0019AA  EFDB  F00C         	goto	u940
  2722   0019AE  EFD9  F00C         	goto	u941
  2723   0019B2                     u941:
  2724   0019B2  EFE1  F00C         	goto	l2185
  2725   0019B6                     u940:
  2726   0019B6  6C04               	negf	___awdiv@divisor^0,c
  2727   0019B8  1E05               	comf	(___awdiv@divisor+1)^0,f,c
  2728   0019BA  B0D8               	btfsc	status,0,c
  2729   0019BC  2A05               	incf	(___awdiv@divisor+1)^0,f,c
  2730   0019BE  0E01               	movlw	1
  2731   0019C0  6E07               	movwf	___awdiv@sign^0,c
  2732   0019C2                     l2185:
  2733   0019C2  BE03               	btfsc	(___awdiv@dividend+1)^0,7,c
  2734   0019C4  EFE8  F00C         	goto	u950
  2735   0019C8  EFE6  F00C         	goto	u951
  2736   0019CC                     u951:
  2737   0019CC  EFEE  F00C         	goto	l2191
  2738   0019D0                     u950:
  2739   0019D0  6C02               	negf	___awdiv@dividend^0,c
  2740   0019D2  1E03               	comf	(___awdiv@dividend+1)^0,f,c
  2741   0019D4  B0D8               	btfsc	status,0,c
  2742   0019D6  2A03               	incf	(___awdiv@dividend+1)^0,f,c
  2743   0019D8  0E01               	movlw	1
  2744   0019DA  1A07               	xorwf	___awdiv@sign^0,f,c
  2745   0019DC                     l2191:
  2746   0019DC  0E00               	movlw	0
  2747   0019DE  6E09               	movwf	(___awdiv@quotient+1)^0,c
  2748   0019E0  0E00               	movlw	0
  2749   0019E2  6E08               	movwf	___awdiv@quotient^0,c
  2750   0019E4  5004               	movf	___awdiv@divisor^0,w,c
  2751   0019E6  1005               	iorwf	(___awdiv@divisor+1)^0,w,c
  2752   0019E8  B4D8               	btfsc	status,2,c
  2753   0019EA  EFF9  F00C         	goto	u961
  2754   0019EE  EFFB  F00C         	goto	u960
  2755   0019F2                     u961:
  2756   0019F2  EF23  F00D         	goto	l2213
  2757   0019F6                     u960:
  2758   0019F6  0E01               	movlw	1
  2759   0019F8  6E06               	movwf	___awdiv@counter^0,c
  2760   0019FA  EF03  F00D         	goto	l2199
  2761   0019FE                     l2197:
  2762   0019FE  90D8               	bcf	status,0,c
  2763   001A00  3604               	rlcf	___awdiv@divisor^0,f,c
  2764   001A02  3605               	rlcf	(___awdiv@divisor+1)^0,f,c
  2765   001A04  2A06               	incf	___awdiv@counter^0,f,c
  2766   001A06                     l2199:
  2767   001A06  AE05               	btfss	(___awdiv@divisor+1)^0,7,c
  2768   001A08  EF08  F00D         	goto	u971
  2769   001A0C  EF0A  F00D         	goto	u970
  2770   001A10                     u971:
  2771   001A10  EFFF  F00C         	goto	l2197
  2772   001A14                     u970:
  2773   001A14                     l2201:
  2774   001A14  90D8               	bcf	status,0,c
  2775   001A16  3608               	rlcf	___awdiv@quotient^0,f,c
  2776   001A18  3609               	rlcf	(___awdiv@quotient+1)^0,f,c
  2777   001A1A  5004               	movf	___awdiv@divisor^0,w,c
  2778   001A1C  5C02               	subwf	___awdiv@dividend^0,w,c
  2779   001A1E  5005               	movf	(___awdiv@divisor+1)^0,w,c
  2780   001A20  5803               	subwfb	(___awdiv@dividend+1)^0,w,c
  2781   001A22  A0D8               	btfss	status,0,c
  2782   001A24  EF16  F00D         	goto	u981
  2783   001A28  EF18  F00D         	goto	u980
  2784   001A2C                     u981:
  2785   001A2C  EF1D  F00D         	goto	l2209
  2786   001A30                     u980:
  2787   001A30  5004               	movf	___awdiv@divisor^0,w,c
  2788   001A32  5E02               	subwf	___awdiv@dividend^0,f,c
  2789   001A34  5005               	movf	(___awdiv@divisor+1)^0,w,c
  2790   001A36  5A03               	subwfb	(___awdiv@dividend+1)^0,f,c
  2791   001A38  8008               	bsf	___awdiv@quotient^0,0,c
  2792   001A3A                     l2209:
  2793   001A3A  90D8               	bcf	status,0,c
  2794   001A3C  3205               	rrcf	(___awdiv@divisor+1)^0,f,c
  2795   001A3E  3204               	rrcf	___awdiv@divisor^0,f,c
  2796   001A40  2E06               	decfsz	___awdiv@counter^0,f,c
  2797   001A42  EF0A  F00D         	goto	l2201
  2798   001A46                     l2213:
  2799   001A46  5007               	movf	___awdiv@sign^0,w,c
  2800   001A48  B4D8               	btfsc	status,2,c
  2801   001A4A  EF29  F00D         	goto	u991
  2802   001A4E  EF2B  F00D         	goto	u990
  2803   001A52                     u991:
  2804   001A52  EF2F  F00D         	goto	l2217
  2805   001A56                     u990:
  2806   001A56  6C08               	negf	___awdiv@quotient^0,c
  2807   001A58  1E09               	comf	(___awdiv@quotient+1)^0,f,c
  2808   001A5A  B0D8               	btfsc	status,0,c
  2809   001A5C  2A09               	incf	(___awdiv@quotient+1)^0,f,c
  2810   001A5E                     l2217:
  2811   001A5E  C008  F002         	movff	___awdiv@quotient,?___awdiv
  2812   001A62  C009  F003         	movff	___awdiv@quotient+1,?___awdiv+1
  2813   001A66  0012               	return		;funcret
  2814   001A68                     __end_of___awdiv:
  2815                           	callstack 0
  2816                           
  2817 ;; *************** function _sendStringSerial4 *****************
  2818 ;; Defined at:
  2819 ;;		line 38 in file "serial.c"
  2820 ;; Parameters:    Size  Location     Type
  2821 ;;  string          2    2[COMRAM] PTR unsigned char 
  2822 ;;		 -> main@blue_val(20), main@green_val(20), main@red_val(20), main@clear_val(20), 
  2823 ;; Auto vars:     Size  Location     Type
  2824 ;;		None
  2825 ;; Return value:  Size  Location     Type
  2826 ;;                  1    wreg      void 
  2827 ;; Registers used:
  2828 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2829 ;; Tracked objects:
  2830 ;;		On entry : 0/0
  2831 ;;		On exit  : 0/0
  2832 ;;		Unchanged: 0/0
  2833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2834 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2837 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2838 ;;Total ram usage:        2 bytes
  2839 ;; Hardware stack levels used: 1
  2840 ;; Hardware stack levels required when called: 3
  2841 ;; This function calls:
  2842 ;;		_sendCharSerial4
  2843 ;; This function is called by:
  2844 ;;		_main
  2845 ;; This function uses a non-reentrant model
  2846 ;;
  2847                           
  2848                           	psect	text13
  2849   00217A                     __ptext13:
  2850                           	callstack 0
  2851   00217A                     _sendStringSerial4:
  2852                           	callstack 27
  2853   00217A                     
  2854                           ;serial.c: 40:     while(*string != 0){
  2855   00217A  EFC8  F010         	goto	l2729
  2856   00217E                     l2725:
  2857                           
  2858                           ;serial.c: 41:   sendCharSerial4(*string++);
  2859   00217E  C003  FFD9         	movff	sendStringSerial4@string,fsr2l
  2860   002182  C004  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  2861   002186  50DF               	movf	indf2,w,c
  2862   002188  EC64  F011         	call	_sendCharSerial4
  2863   00218C  4A03               	infsnz	sendStringSerial4@string^0,f,c
  2864   00218E  2A04               	incf	(sendStringSerial4@string+1)^0,f,c
  2865   002190                     l2729:
  2866                           
  2867                           ;serial.c: 40:     while(*string != 0){
  2868   002190  C003  FFD9         	movff	sendStringSerial4@string,fsr2l
  2869   002194  C004  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  2870   002198  50DF               	movf	indf2,w,c
  2871   00219A  A4D8               	btfss	status,2,c
  2872   00219C  EFD2  F010         	goto	u1681
  2873   0021A0  EFD4  F010         	goto	u1680
  2874   0021A4                     u1681:
  2875   0021A4  EFBF  F010         	goto	l2725
  2876   0021A8                     u1680:
  2877   0021A8  0012               	return		;funcret
  2878   0021AA                     __end_of_sendStringSerial4:
  2879                           	callstack 0
  2880                           
  2881 ;; *************** function _sendCharSerial4 *****************
  2882 ;; Defined at:
  2883 ;;		line 31 in file "serial.c"
  2884 ;; Parameters:    Size  Location     Type
  2885 ;;  charToSend      1    wreg     unsigned char 
  2886 ;; Auto vars:     Size  Location     Type
  2887 ;;  charToSend      1    1[COMRAM] unsigned char 
  2888 ;; Return value:  Size  Location     Type
  2889 ;;                  1    wreg      void 
  2890 ;; Registers used:
  2891 ;;		wreg
  2892 ;; Tracked objects:
  2893 ;;		On entry : 0/0
  2894 ;;		On exit  : 0/0
  2895 ;;		Unchanged: 0/0
  2896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2898 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2900 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2901 ;;Total ram usage:        1 bytes
  2902 ;; Hardware stack levels used: 1
  2903 ;; Hardware stack levels required when called: 2
  2904 ;; This function calls:
  2905 ;;		Nothing
  2906 ;; This function is called by:
  2907 ;;		_sendStringSerial4
  2908 ;; This function uses a non-reentrant model
  2909 ;;
  2910                           
  2911                           	psect	text14
  2912   0022C8                     __ptext14:
  2913                           	callstack 0
  2914   0022C8                     _sendCharSerial4:
  2915                           	callstack 27
  2916                           
  2917                           ;incstack = 0
  2918                           ;sendCharSerial4@charToSend stored from wreg
  2919   0022C8  6E02               	movwf	sendCharSerial4@charToSend^0,c
  2920   0022CA                     l454:
  2921   0022CA  010E               	movlb	14	; () banked
  2922   0022CC  A537               	btfss	55,2,b	;volatile
  2923   0022CE  EF6B  F011         	goto	u1321
  2924   0022D2  EF6D  F011         	goto	u1320
  2925   0022D6                     u1321:
  2926   0022D6  EF65  F011         	goto	l454
  2927   0022DA                     u1320:
  2928   0022DA                     
  2929                           ; BSR set to: 14
  2930                           ;serial.c: 33:     TX4REG = charToSend;
  2931   0022DA  C002  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  2932   0022DE                     
  2933                           ; BSR set to: 14
  2934   0022DE  0012               	return		;funcret
  2935   0022E0                     __end_of_sendCharSerial4:
  2936                           	callstack 0
  2937                           
  2938 ;; *************** function _reverse_one_square *****************
  2939 ;; Defined at:
  2940 ;;		line 209 in file "dc_motor.c"
  2941 ;; Parameters:    Size  Location     Type
  2942 ;;  mL              2   24[COMRAM] PTR struct DC_motor
  2943 ;;		 -> main@motorL(9), 
  2944 ;;  mR              2   26[COMRAM] PTR struct DC_motor
  2945 ;;		 -> main@motorR(9), 
  2946 ;; Auto vars:     Size  Location     Type
  2947 ;;		None
  2948 ;; Return value:  Size  Location     Type
  2949 ;;                  1    wreg      void 
  2950 ;; Registers used:
  2951 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2952 ;; Tracked objects:
  2953 ;;		On entry : 0/0
  2954 ;;		On exit  : 0/0
  2955 ;;		Unchanged: 0/0
  2956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2957 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2959 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2960 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2961 ;;Total ram usage:        6 bytes
  2962 ;; Hardware stack levels used: 1
  2963 ;; Hardware stack levels required when called: 5
  2964 ;; This function calls:
  2965 ;;		_setMotorPWM
  2966 ;;		_stop
  2967 ;; This function is called by:
  2968 ;;		_main
  2969 ;; This function uses a non-reentrant model
  2970 ;;
  2971                           
  2972                           	psect	text15
  2973   0017D0                     __ptext15:
  2974                           	callstack 0
  2975   0017D0                     _reverse_one_square:
  2976                           	callstack 25
  2977   0017D0                     
  2978                           ;dc_motor.c: 210:     mL->direction = 0;
  2979   0017D0  EE20 F001          	lfsr	2,1
  2980   0017D4  5019               	movf	reverse_one_square@mL^0,w,c
  2981   0017D6  26D9               	addwf	fsr2l,f,c
  2982   0017D8  501A               	movf	(reverse_one_square@mL+1)^0,w,c
  2983   0017DA  22DA               	addwfc	fsr2h,f,c
  2984   0017DC  6ADF               	clrf	indf2,c
  2985                           
  2986                           ;dc_motor.c: 211:     mR->direction = 0;
  2987   0017DE  EE20 F001          	lfsr	2,1
  2988   0017E2  501B               	movf	reverse_one_square@mR^0,w,c
  2989   0017E4  26D9               	addwf	fsr2l,f,c
  2990   0017E6  501C               	movf	(reverse_one_square@mR+1)^0,w,c
  2991   0017E8  22DA               	addwfc	fsr2h,f,c
  2992   0017EA  6ADF               	clrf	indf2,c
  2993                           
  2994                           ;dc_motor.c: 213:     while ((mL->power) < 70 || (mR->power) < 70){
  2995   0017EC  EF2E  F00C         	goto	l225
  2996   0017F0                     l2659:
  2997                           
  2998                           ;dc_motor.c: 214:         if ((mL->power) < 70) (mL->power) += 1;
  2999   0017F0  C019  FFD9         	movff	reverse_one_square@mL,fsr2l
  3000   0017F4  C01A  FFDA         	movff	reverse_one_square@mL+1,fsr2h
  3001   0017F8  0E46               	movlw	70
  3002   0017FA  60DF               	cpfslt	indf2,c
  3003   0017FC  EF02  F00C         	goto	u1641
  3004   001800  EF04  F00C         	goto	u1640
  3005   001804                     u1641:
  3006   001804  EF09  F00C         	goto	l2663
  3007   001808                     u1640:
  3008   001808  C019  FFD9         	movff	reverse_one_square@mL,fsr2l
  3009   00180C  C01A  FFDA         	movff	reverse_one_square@mL+1,fsr2h
  3010   001810  2ADF               	incf	indf2,f,c
  3011   001812                     l2663:
  3012                           
  3013                           ;dc_motor.c: 215:         if ((mR->power) < 70) (mR->power) += 1;
  3014   001812  C01B  FFD9         	movff	reverse_one_square@mR,fsr2l
  3015   001816  C01C  FFDA         	movff	reverse_one_square@mR+1,fsr2h
  3016   00181A  0E46               	movlw	70
  3017   00181C  60DF               	cpfslt	indf2,c
  3018   00181E  EF13  F00C         	goto	u1651
  3019   001822  EF15  F00C         	goto	u1650
  3020   001826                     u1651:
  3021   001826  EF1A  F00C         	goto	l2667
  3022   00182A                     u1650:
  3023   00182A  C01B  FFD9         	movff	reverse_one_square@mR,fsr2l
  3024   00182E  C01C  FFDA         	movff	reverse_one_square@mR+1,fsr2h
  3025   001832  2ADF               	incf	indf2,f,c
  3026   001834                     l2667:
  3027                           
  3028                           ;dc_motor.c: 217:         setMotorPWM(mL);
  3029   001834  C019  F00F         	movff	reverse_one_square@mL,setMotorPWM@m
  3030   001838  C01A  F010         	movff	reverse_one_square@mL+1,setMotorPWM@m+1
  3031   00183C  EC5A  F009         	call	_setMotorPWM	;wreg free
  3032   001840                     
  3033                           ;dc_motor.c: 218:         setMotorPWM(mR);
  3034   001840  C01B  F00F         	movff	reverse_one_square@mR,setMotorPWM@m
  3035   001844  C01C  F010         	movff	reverse_one_square@mR+1,setMotorPWM@m+1
  3036   001848  EC5A  F009         	call	_setMotorPWM	;wreg free
  3037   00184C                     
  3038                           ;dc_motor.c: 219:         _delay((unsigned long)((1)*(64000000/4000.0)));
  3039   00184C  0E15               	movlw	21
  3040   00184E  6E1D               	movwf	??_reverse_one_square^0,c
  3041   001850  0EC6               	movlw	198
  3042   001852                     u1907:
  3043   001852  2EE8               	decfsz	wreg,f,c
  3044   001854  D7FE               	bra	u1907
  3045   001856  2E1D               	decfsz	??_reverse_one_square^0,f,c
  3046   001858  D7FC               	bra	u1907
  3047   00185A  D000               	nop2	
  3048   00185C                     l225:
  3049                           
  3050                           ;dc_motor.c: 213:     while ((mL->power) < 70 || (mR->power) < 70){
  3051   00185C  C019  FFD9         	movff	reverse_one_square@mL,fsr2l
  3052   001860  C01A  FFDA         	movff	reverse_one_square@mL+1,fsr2h
  3053   001864  0E45               	movlw	69
  3054   001866  64DF               	cpfsgt	indf2,c
  3055   001868  EF38  F00C         	goto	u1661
  3056   00186C  EF3A  F00C         	goto	u1660
  3057   001870                     u1661:
  3058   001870  EFF8  F00B         	goto	l2659
  3059   001874                     u1660:
  3060   001874  C01B  FFD9         	movff	reverse_one_square@mR,fsr2l
  3061   001878  C01C  FFDA         	movff	reverse_one_square@mR+1,fsr2h
  3062   00187C  0E45               	movlw	69
  3063   00187E  64DF               	cpfsgt	indf2,c
  3064   001880  EF44  F00C         	goto	u1671
  3065   001884  EF46  F00C         	goto	u1670
  3066   001888                     u1671:
  3067   001888  EFF8  F00B         	goto	l2659
  3068   00188C                     u1670:
  3069   00188C                     
  3070                           ;dc_motor.c: 221:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3071   00188C  0E29               	movlw	41
  3072   00188E  6E1E               	movwf	(??_reverse_one_square+1)^0,c
  3073   001890  0E96               	movlw	150
  3074   001892  6E1D               	movwf	??_reverse_one_square^0,c
  3075   001894  0E7F               	movlw	127
  3076   001896                     u1917:
  3077   001896  2EE8               	decfsz	wreg,f,c
  3078   001898  D7FE               	bra	u1917
  3079   00189A  2E1D               	decfsz	??_reverse_one_square^0,f,c
  3080   00189C  D7FC               	bra	u1917
  3081   00189E  2E1E               	decfsz	(??_reverse_one_square+1)^0,f,c
  3082   0018A0  D7FA               	bra	u1917
  3083   0018A2  0000               	nop	
  3084   0018A4                     
  3085                           ;dc_motor.c: 222:     stop(mL, mR);
  3086   0018A4  C019  F015         	movff	reverse_one_square@mL,stop@mL
  3087   0018A8  C01A  F016         	movff	reverse_one_square@mL+1,stop@mL+1
  3088   0018AC  C01B  F017         	movff	reverse_one_square@mR,stop@mR
  3089   0018B0  C01C  F018         	movff	reverse_one_square@mR+1,stop@mR+1
  3090   0018B4  EC99  F00E         	call	_stop	;wreg free
  3091   0018B8  0012               	return		;funcret
  3092   0018BA                     __end_of_reverse_one_square:
  3093                           	callstack 0
  3094                           
  3095 ;; *************** function _reverse_after_read *****************
  3096 ;; Defined at:
  3097 ;;		line 193 in file "dc_motor.c"
  3098 ;; Parameters:    Size  Location     Type
  3099 ;;  mL              2   24[COMRAM] PTR struct DC_motor
  3100 ;;		 -> main@motorL(9), 
  3101 ;;  mR              2   26[COMRAM] PTR struct DC_motor
  3102 ;;		 -> main@motorR(9), 
  3103 ;; Auto vars:     Size  Location     Type
  3104 ;;		None
  3105 ;; Return value:  Size  Location     Type
  3106 ;;                  1    wreg      void 
  3107 ;; Registers used:
  3108 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3109 ;; Tracked objects:
  3110 ;;		On entry : 0/0
  3111 ;;		On exit  : 0/0
  3112 ;;		Unchanged: 0/0
  3113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3114 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3116 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3117 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3118 ;;Total ram usage:        6 bytes
  3119 ;; Hardware stack levels used: 1
  3120 ;; Hardware stack levels required when called: 5
  3121 ;; This function calls:
  3122 ;;		_setMotorPWM
  3123 ;;		_stop
  3124 ;; This function is called by:
  3125 ;;		_main
  3126 ;; This function uses a non-reentrant model
  3127 ;;
  3128                           
  3129                           	psect	text16
  3130   0018BA                     __ptext16:
  3131                           	callstack 0
  3132   0018BA                     _reverse_after_read:
  3133                           	callstack 25
  3134   0018BA                     
  3135                           ;dc_motor.c: 194:     mL->direction = 0;
  3136   0018BA  EE20 F001          	lfsr	2,1
  3137   0018BE  5019               	movf	reverse_after_read@mL^0,w,c
  3138   0018C0  26D9               	addwf	fsr2l,f,c
  3139   0018C2  501A               	movf	(reverse_after_read@mL+1)^0,w,c
  3140   0018C4  22DA               	addwfc	fsr2h,f,c
  3141   0018C6  6ADF               	clrf	indf2,c
  3142                           
  3143                           ;dc_motor.c: 195:     mR->direction = 0;
  3144   0018C8  EE20 F001          	lfsr	2,1
  3145   0018CC  501B               	movf	reverse_after_read@mR^0,w,c
  3146   0018CE  26D9               	addwf	fsr2l,f,c
  3147   0018D0  501C               	movf	(reverse_after_read@mR+1)^0,w,c
  3148   0018D2  22DA               	addwfc	fsr2h,f,c
  3149   0018D4  6ADF               	clrf	indf2,c
  3150                           
  3151                           ;dc_motor.c: 197:     while ((mL->power) < 70 || (mR->power) < 70){
  3152   0018D6  EFA3  F00C         	goto	l217
  3153   0018DA                     l2637:
  3154                           
  3155                           ;dc_motor.c: 198:         if ((mL->power) < 70) (mL->power) += 1;
  3156   0018DA  C019  FFD9         	movff	reverse_after_read@mL,fsr2l
  3157   0018DE  C01A  FFDA         	movff	reverse_after_read@mL+1,fsr2h
  3158   0018E2  0E46               	movlw	70
  3159   0018E4  60DF               	cpfslt	indf2,c
  3160   0018E6  EF77  F00C         	goto	u1601
  3161   0018EA  EF79  F00C         	goto	u1600
  3162   0018EE                     u1601:
  3163   0018EE  EF7E  F00C         	goto	l2641
  3164   0018F2                     u1600:
  3165   0018F2  C019  FFD9         	movff	reverse_after_read@mL,fsr2l
  3166   0018F6  C01A  FFDA         	movff	reverse_after_read@mL+1,fsr2h
  3167   0018FA  2ADF               	incf	indf2,f,c
  3168   0018FC                     l2641:
  3169                           
  3170                           ;dc_motor.c: 199:         if ((mR->power) < 70) (mR->power) += 1;
  3171   0018FC  C01B  FFD9         	movff	reverse_after_read@mR,fsr2l
  3172   001900  C01C  FFDA         	movff	reverse_after_read@mR+1,fsr2h
  3173   001904  0E46               	movlw	70
  3174   001906  60DF               	cpfslt	indf2,c
  3175   001908  EF88  F00C         	goto	u1611
  3176   00190C  EF8A  F00C         	goto	u1610
  3177   001910                     u1611:
  3178   001910  EF8F  F00C         	goto	l2645
  3179   001914                     u1610:
  3180   001914  C01B  FFD9         	movff	reverse_after_read@mR,fsr2l
  3181   001918  C01C  FFDA         	movff	reverse_after_read@mR+1,fsr2h
  3182   00191C  2ADF               	incf	indf2,f,c
  3183   00191E                     l2645:
  3184                           
  3185                           ;dc_motor.c: 201:         setMotorPWM(mL);
  3186   00191E  C019  F00F         	movff	reverse_after_read@mL,setMotorPWM@m
  3187   001922  C01A  F010         	movff	reverse_after_read@mL+1,setMotorPWM@m+1
  3188   001926  EC5A  F009         	call	_setMotorPWM	;wreg free
  3189   00192A                     
  3190                           ;dc_motor.c: 202:         setMotorPWM(mR);
  3191   00192A  C01B  F00F         	movff	reverse_after_read@mR,setMotorPWM@m
  3192   00192E  C01C  F010         	movff	reverse_after_read@mR+1,setMotorPWM@m+1
  3193   001932  EC5A  F009         	call	_setMotorPWM	;wreg free
  3194   001936                     
  3195                           ;dc_motor.c: 203:         _delay((unsigned long)((1)*(64000000/4000.0)));
  3196   001936  0E15               	movlw	21
  3197   001938  6E1D               	movwf	??_reverse_after_read^0,c
  3198   00193A  0EC6               	movlw	198
  3199   00193C                     u1927:
  3200   00193C  2EE8               	decfsz	wreg,f,c
  3201   00193E  D7FE               	bra	u1927
  3202   001940  2E1D               	decfsz	??_reverse_after_read^0,f,c
  3203   001942  D7FC               	bra	u1927
  3204   001944  D000               	nop2	
  3205   001946                     l217:
  3206                           
  3207                           ;dc_motor.c: 197:     while ((mL->power) < 70 || (mR->power) < 70){
  3208   001946  C019  FFD9         	movff	reverse_after_read@mL,fsr2l
  3209   00194A  C01A  FFDA         	movff	reverse_after_read@mL+1,fsr2h
  3210   00194E  0E45               	movlw	69
  3211   001950  64DF               	cpfsgt	indf2,c
  3212   001952  EFAD  F00C         	goto	u1621
  3213   001956  EFAF  F00C         	goto	u1620
  3214   00195A                     u1621:
  3215   00195A  EF6D  F00C         	goto	l2637
  3216   00195E                     u1620:
  3217   00195E  C01B  FFD9         	movff	reverse_after_read@mR,fsr2l
  3218   001962  C01C  FFDA         	movff	reverse_after_read@mR+1,fsr2h
  3219   001966  0E45               	movlw	69
  3220   001968  64DF               	cpfsgt	indf2,c
  3221   00196A  EFB9  F00C         	goto	u1631
  3222   00196E  EFBB  F00C         	goto	u1630
  3223   001972                     u1631:
  3224   001972  EF6D  F00C         	goto	l2637
  3225   001976                     u1630:
  3226   001976                     
  3227                           ;dc_motor.c: 205:     _delay((unsigned long)((100)*(64000000/4000.0)));
  3228   001976  0E09               	movlw	9
  3229   001978  6E1E               	movwf	(??_reverse_after_read+1)^0,c
  3230   00197A  0E1E               	movlw	30
  3231   00197C  6E1D               	movwf	??_reverse_after_read^0,c
  3232   00197E  0EE4               	movlw	228
  3233   001980                     u1937:
  3234   001980  2EE8               	decfsz	wreg,f,c
  3235   001982  D7FE               	bra	u1937
  3236   001984  2E1D               	decfsz	??_reverse_after_read^0,f,c
  3237   001986  D7FC               	bra	u1937
  3238   001988  2E1E               	decfsz	(??_reverse_after_read+1)^0,f,c
  3239   00198A  D7FA               	bra	u1937
  3240   00198C  D000               	nop2	
  3241   00198E                     
  3242                           ;dc_motor.c: 206:     stop(mL, mR);
  3243   00198E  C019  F015         	movff	reverse_after_read@mL,stop@mL
  3244   001992  C01A  F016         	movff	reverse_after_read@mL+1,stop@mL+1
  3245   001996  C01B  F017         	movff	reverse_after_read@mR,stop@mR
  3246   00199A  C01C  F018         	movff	reverse_after_read@mR+1,stop@mR+1
  3247   00199E  EC99  F00E         	call	_stop	;wreg free
  3248   0019A2  0012               	return		;funcret
  3249   0019A4                     __end_of_reverse_after_read:
  3250                           	callstack 0
  3251                           
  3252 ;; *************** function _stop *****************
  3253 ;; Defined at:
  3254 ;;		line 114 in file "dc_motor.c"
  3255 ;; Parameters:    Size  Location     Type
  3256 ;;  mL              2   20[COMRAM] PTR struct DC_motor
  3257 ;;		 -> main@motorL(9), 
  3258 ;;  mR              2   22[COMRAM] PTR struct DC_motor
  3259 ;;		 -> main@motorR(9), 
  3260 ;; Auto vars:     Size  Location     Type
  3261 ;;		None
  3262 ;; Return value:  Size  Location     Type
  3263 ;;                  1    wreg      void 
  3264 ;; Registers used:
  3265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3266 ;; Tracked objects:
  3267 ;;		On entry : 0/0
  3268 ;;		On exit  : 0/0
  3269 ;;		Unchanged: 0/0
  3270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3271 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3274 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3275 ;;Total ram usage:        4 bytes
  3276 ;; Hardware stack levels used: 1
  3277 ;; Hardware stack levels required when called: 4
  3278 ;; This function calls:
  3279 ;;		_setMotorPWM
  3280 ;; This function is called by:
  3281 ;;		_turn_left_90
  3282 ;;		_turn_right_90
  3283 ;;		_turn_left_135
  3284 ;;		_turn_right_135
  3285 ;;		_reverse_after_read
  3286 ;;		_reverse_one_square
  3287 ;;		_main
  3288 ;; This function uses a non-reentrant model
  3289 ;;
  3290                           
  3291                           	psect	text17
  3292   001D32                     __ptext17:
  3293                           	callstack 0
  3294   001D32                     _stop:
  3295                           	callstack 25
  3296   001D32                     
  3297                           ;dc_motor.c: 115:     while ((mL->power) > 0 || (mR->power) > 0){
  3298   001D32  EFCD  F00E         	goto	l2447
  3299   001D36                     l2433:
  3300                           
  3301                           ;dc_motor.c: 116:         if ((mL->power) > 0) (mL->power) -= 1;
  3302   001D36  C015  FFD9         	movff	stop@mL,fsr2l
  3303   001D3A  C016  FFDA         	movff	stop@mL+1,fsr2h
  3304   001D3E  50DF               	movf	indf2,w,c
  3305   001D40  B4D8               	btfsc	status,2,c
  3306   001D42  EFA5  F00E         	goto	u1281
  3307   001D46  EFA7  F00E         	goto	u1280
  3308   001D4A                     u1281:
  3309   001D4A  EFAC  F00E         	goto	l2437
  3310   001D4E                     u1280:
  3311   001D4E  C015  FFD9         	movff	stop@mL,fsr2l
  3312   001D52  C016  FFDA         	movff	stop@mL+1,fsr2h
  3313   001D56  06DF               	decf	indf2,f,c
  3314   001D58                     l2437:
  3315                           
  3316                           ;dc_motor.c: 117:         if ((mR->power) > 0) (mR->power) -= 1;
  3317   001D58  C017  FFD9         	movff	stop@mR,fsr2l
  3318   001D5C  C018  FFDA         	movff	stop@mR+1,fsr2h
  3319   001D60  50DF               	movf	indf2,w,c
  3320   001D62  B4D8               	btfsc	status,2,c
  3321   001D64  EFB6  F00E         	goto	u1291
  3322   001D68  EFB8  F00E         	goto	u1290
  3323   001D6C                     u1291:
  3324   001D6C  EFBD  F00E         	goto	l2441
  3325   001D70                     u1290:
  3326   001D70  C017  FFD9         	movff	stop@mR,fsr2l
  3327   001D74  C018  FFDA         	movff	stop@mR+1,fsr2h
  3328   001D78  06DF               	decf	indf2,f,c
  3329   001D7A                     l2441:
  3330                           
  3331                           ;dc_motor.c: 119:         setMotorPWM(mL);
  3332   001D7A  C015  F00F         	movff	stop@mL,setMotorPWM@m
  3333   001D7E  C016  F010         	movff	stop@mL+1,setMotorPWM@m+1
  3334   001D82  EC5A  F009         	call	_setMotorPWM	;wreg free
  3335   001D86                     
  3336                           ;dc_motor.c: 120:         setMotorPWM(mR);
  3337   001D86  C017  F00F         	movff	stop@mR,setMotorPWM@m
  3338   001D8A  C018  F010         	movff	stop@mR+1,setMotorPWM@m+1
  3339   001D8E  EC5A  F009         	call	_setMotorPWM	;wreg free
  3340   001D92                     
  3341                           ;dc_motor.c: 121:         _delay((unsigned long)((25)*(64000000/4000000.0)));
  3342   001D92  0E85               	movlw	133
  3343   001D94                     u1947:
  3344   001D94  2EE8               	decfsz	wreg,f,c
  3345   001D96  D7FE               	bra	u1947
  3346   001D98  0000               	nop	
  3347   001D9A                     l2447:
  3348                           
  3349                           ;dc_motor.c: 115:     while ((mL->power) > 0 || (mR->power) > 0){
  3350   001D9A  C015  FFD9         	movff	stop@mL,fsr2l
  3351   001D9E  C016  FFDA         	movff	stop@mL+1,fsr2h
  3352   001DA2  50DF               	movf	indf2,w,c
  3353   001DA4  A4D8               	btfss	status,2,c
  3354   001DA6  EFD7  F00E         	goto	u1301
  3355   001DAA  EFD9  F00E         	goto	u1300
  3356   001DAE                     u1301:
  3357   001DAE  EF9B  F00E         	goto	l2433
  3358   001DB2                     u1300:
  3359   001DB2  C017  FFD9         	movff	stop@mR,fsr2l
  3360   001DB6  C018  FFDA         	movff	stop@mR+1,fsr2h
  3361   001DBA  50DF               	movf	indf2,w,c
  3362   001DBC  A4D8               	btfss	status,2,c
  3363   001DBE  EFE3  F00E         	goto	u1311
  3364   001DC2  EFE5  F00E         	goto	u1310
  3365   001DC6                     u1311:
  3366   001DC6  EF9B  F00E         	goto	l2433
  3367   001DCA                     u1310:
  3368   001DCA  0012               	return		;funcret
  3369   001DCC                     __end_of_stop:
  3370                           	callstack 0
  3371                           
  3372 ;; *************** function _resetTimer0 *****************
  3373 ;; Defined at:
  3374 ;;		line 34 in file "timers.c"
  3375 ;; Parameters:    Size  Location     Type
  3376 ;;		None
  3377 ;; Auto vars:     Size  Location     Type
  3378 ;;		None
  3379 ;; Return value:  Size  Location     Type
  3380 ;;                  1    wreg      void 
  3381 ;; Registers used:
  3382 ;;		wreg, status,2
  3383 ;; Tracked objects:
  3384 ;;		On entry : 0/0
  3385 ;;		On exit  : 0/0
  3386 ;;		Unchanged: 0/0
  3387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3391 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3392 ;;Total ram usage:        0 bytes
  3393 ;; Hardware stack levels used: 1
  3394 ;; Hardware stack levels required when called: 2
  3395 ;; This function calls:
  3396 ;;		Nothing
  3397 ;; This function is called by:
  3398 ;;		_main
  3399 ;; This function uses a non-reentrant model
  3400 ;;
  3401                           
  3402                           	psect	text18
  3403   002310                     __ptext18:
  3404                           	callstack 0
  3405   002310                     _resetTimer0:
  3406                           	callstack 28
  3407   002310                     
  3408                           ;timers.c: 35:     TMR0H = 0;
  3409   002310  0E00               	movlw	0
  3410   002312  6ED4               	movwf	212,c	;volatile
  3411                           
  3412                           ;timers.c: 36:     TMR0L = 0;
  3413   002314  0E00               	movlw	0
  3414   002316  6ED3               	movwf	211,c	;volatile
  3415   002318  0012               	return		;funcret
  3416   00231A                     __end_of_resetTimer0:
  3417                           	callstack 0
  3418                           
  3419 ;; *************** function _initUSART4 *****************
  3420 ;; Defined at:
  3421 ;;		line 4 in file "serial.c"
  3422 ;; Parameters:    Size  Location     Type
  3423 ;;		None
  3424 ;; Auto vars:     Size  Location     Type
  3425 ;;		None
  3426 ;; Return value:  Size  Location     Type
  3427 ;;                  1    wreg      void 
  3428 ;; Registers used:
  3429 ;;		wreg, status,2
  3430 ;; Tracked objects:
  3431 ;;		On entry : 0/0
  3432 ;;		On exit  : 0/0
  3433 ;;		Unchanged: 0/0
  3434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3439 ;;Total ram usage:        0 bytes
  3440 ;; Hardware stack levels used: 1
  3441 ;; Hardware stack levels required when called: 2
  3442 ;; This function calls:
  3443 ;;		Nothing
  3444 ;; This function is called by:
  3445 ;;		_main
  3446 ;; This function uses a non-reentrant model
  3447 ;;
  3448                           
  3449                           	psect	text19
  3450   00228C                     __ptext19:
  3451                           	callstack 0
  3452   00228C                     _initUSART4:
  3453                           	callstack 28
  3454   00228C                     
  3455                           ;serial.c: 8:     RC0PPS = 0x12;
  3456   00228C  0E12               	movlw	18
  3457   00228E  010E               	movlb	14	; () banked
  3458   002290  6F62               	movwf	98,b	;volatile
  3459                           
  3460                           ;serial.c: 9:     RX4PPS = 0x11;
  3461   002292  0E11               	movlw	17
  3462   002294  6F15               	movwf	21,b	;volatile
  3463   002296                     
  3464                           ; BSR set to: 14
  3465                           ;serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  3466   002296  97E9               	bcf	233,3,b	;volatile
  3467   002298                     
  3468                           ; BSR set to: 14
  3469                           ;serial.c: 13:     TX4STAbits.BRGH = 0;
  3470   002298  95E8               	bcf	232,2,b	;volatile
  3471                           
  3472                           ;serial.c: 15:     SP4BRGL = 51;
  3473   00229A  0E33               	movlw	51
  3474   00229C  6FE5               	movwf	229,b	;volatile
  3475                           
  3476                           ;serial.c: 16:     SP4BRGH = 0;
  3477   00229E  0E00               	movlw	0
  3478   0022A0  6FE6               	movwf	230,b	;volatile
  3479   0022A2                     
  3480                           ; BSR set to: 14
  3481                           ;serial.c: 19:     RC4STAbits.CREN = 1;
  3482   0022A2  89E7               	bsf	231,4,b	;volatile
  3483   0022A4                     
  3484                           ; BSR set to: 14
  3485                           ;serial.c: 20:     TX4STAbits.TXEN = 1;
  3486   0022A4  8BE8               	bsf	232,5,b	;volatile
  3487   0022A6                     
  3488                           ; BSR set to: 14
  3489                           ;serial.c: 21:     RC4STAbits.SPEN = 1;
  3490   0022A6  8FE7               	bsf	231,7,b	;volatile
  3491   0022A8                     
  3492                           ; BSR set to: 14
  3493   0022A8  0012               	return		;funcret
  3494   0022AA                     __end_of_initUSART4:
  3495                           	callstack 0
  3496                           
  3497 ;; *************** function _initDCmotorsPWM *****************
  3498 ;; Defined at:
  3499 ;;		line 6 in file "dc_motor.c"
  3500 ;; Parameters:    Size  Location     Type
  3501 ;;  PWMperiod       2    1[COMRAM] int 
  3502 ;; Auto vars:     Size  Location     Type
  3503 ;;		None
  3504 ;; Return value:  Size  Location     Type
  3505 ;;                  1    wreg      void 
  3506 ;; Registers used:
  3507 ;;		wreg, status,2
  3508 ;; Tracked objects:
  3509 ;;		On entry : 0/0
  3510 ;;		On exit  : 0/0
  3511 ;;		Unchanged: 0/0
  3512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3513 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3516 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3517 ;;Total ram usage:        2 bytes
  3518 ;; Hardware stack levels used: 1
  3519 ;; Hardware stack levels required when called: 2
  3520 ;; This function calls:
  3521 ;;		Nothing
  3522 ;; This function is called by:
  3523 ;;		_main
  3524 ;; This function uses a non-reentrant model
  3525 ;;
  3526                           
  3527                           	psect	text20
  3528   001C90                     __ptext20:
  3529                           	callstack 0
  3530   001C90                     _initDCmotorsPWM:
  3531                           	callstack 28
  3532   001C90                     
  3533                           ;dc_motor.c: 10:     RE2PPS=0x05;
  3534   001C90  0E05               	movlw	5
  3535   001C92  010E               	movlb	14	; () banked
  3536   001C94  6F74               	movwf	116,b	;volatile
  3537                           
  3538                           ;dc_motor.c: 11:     RE4PPS=0x06;
  3539   001C96  0E06               	movlw	6
  3540   001C98  6F76               	movwf	118,b	;volatile
  3541                           
  3542                           ;dc_motor.c: 12:     RC7PPS=0x07;
  3543   001C9A  0E07               	movlw	7
  3544   001C9C  6F69               	movwf	105,b	;volatile
  3545                           
  3546                           ;dc_motor.c: 13:     RG6PPS=0x08;
  3547   001C9E  0E08               	movlw	8
  3548   001CA0  6F88               	movwf	136,b	;volatile
  3549                           
  3550                           ;dc_motor.c: 16:     T2CONbits.CKPS=0b100;
  3551   001CA2  50BD               	movf	189,w,c	;volatile
  3552   001CA4  0B8F               	andlw	-113
  3553   001CA6  0940               	iorlw	64
  3554   001CA8  6EBD               	movwf	189,c	;volatile
  3555                           
  3556                           ;dc_motor.c: 17:     T2HLTbits.MODE=0b00000;
  3557   001CAA  0EE0               	movlw	-32
  3558   001CAC  16BE               	andwf	190,f,c	;volatile
  3559                           
  3560                           ;dc_motor.c: 18:     T2CLKCONbits.CS=0b0001;
  3561   001CAE  50BF               	movf	191,w,c	;volatile
  3562   001CB0  0BF0               	andlw	-16
  3563   001CB2  0901               	iorlw	1
  3564   001CB4  6EBF               	movwf	191,c	;volatile
  3565                           
  3566                           ;dc_motor.c: 22:     T2PR=99;
  3567   001CB6  0E63               	movlw	99
  3568   001CB8  6EBC               	movwf	188,c	;volatile
  3569   001CBA                     
  3570                           ; BSR set to: 14
  3571                           ;dc_motor.c: 23:     T2CONbits.ON=1;
  3572   001CBA  8EBD               	bsf	189,7,c	;volatile
  3573                           
  3574                           ;dc_motor.c: 27:     CCPR1H=0;
  3575   001CBC  0E00               	movlw	0
  3576   001CBE  6EAA               	movwf	170,c	;volatile
  3577                           
  3578                           ;dc_motor.c: 28:     CCPR2H=0;
  3579   001CC0  0E00               	movlw	0
  3580   001CC2  6EA6               	movwf	166,c	;volatile
  3581                           
  3582                           ;dc_motor.c: 29:     CCPR3H=0;
  3583   001CC4  0E00               	movlw	0
  3584   001CC6  010F               	movlb	15	; () banked
  3585   001CC8  6F25               	movwf	37,b	;volatile
  3586                           
  3587                           ;dc_motor.c: 30:     CCPR4H=0;
  3588   001CCA  0E00               	movlw	0
  3589   001CCC  6F21               	movwf	33,b	;volatile
  3590                           
  3591                           ;dc_motor.c: 33:     CCPTMRS0bits.C1TSEL=0;
  3592   001CCE  0EFC               	movlw	-4
  3593   001CD0  16AD               	andwf	173,f,c	;volatile
  3594                           
  3595                           ;dc_motor.c: 34:     CCPTMRS0bits.C2TSEL=0;
  3596   001CD2  0EF3               	movlw	-13
  3597   001CD4  16AD               	andwf	173,f,c	;volatile
  3598                           
  3599                           ;dc_motor.c: 35:     CCPTMRS0bits.C3TSEL=0;
  3600   001CD6  0ECF               	movlw	-49
  3601   001CD8  16AD               	andwf	173,f,c	;volatile
  3602                           
  3603                           ;dc_motor.c: 36:     CCPTMRS0bits.C4TSEL=0;
  3604   001CDA  0E3F               	movlw	-193
  3605   001CDC  16AD               	andwf	173,f,c	;volatile
  3606   001CDE                     
  3607                           ; BSR set to: 15
  3608                           ;dc_motor.c: 39:     CCP1CONbits.FMT=1;
  3609   001CDE  88AB               	bsf	171,4,c	;volatile
  3610                           
  3611                           ;dc_motor.c: 40:     CCP1CONbits.CCP1MODE=0b1100;
  3612   001CE0  50AB               	movf	171,w,c	;volatile
  3613   001CE2  0BF0               	andlw	-16
  3614   001CE4  090C               	iorlw	12
  3615   001CE6  6EAB               	movwf	171,c	;volatile
  3616   001CE8                     
  3617                           ; BSR set to: 15
  3618                           ;dc_motor.c: 41:     CCP1CONbits.EN=1;
  3619   001CE8  8EAB               	bsf	171,7,c	;volatile
  3620   001CEA                     
  3621                           ; BSR set to: 15
  3622                           ;dc_motor.c: 43:     CCP2CONbits.FMT=1;
  3623   001CEA  88A7               	bsf	167,4,c	;volatile
  3624                           
  3625                           ;dc_motor.c: 44:     CCP2CONbits.CCP2MODE=0b1100;
  3626   001CEC  50A7               	movf	167,w,c	;volatile
  3627   001CEE  0BF0               	andlw	-16
  3628   001CF0  090C               	iorlw	12
  3629   001CF2  6EA7               	movwf	167,c	;volatile
  3630   001CF4                     
  3631                           ; BSR set to: 15
  3632                           ;dc_motor.c: 45:     CCP2CONbits.EN=1;
  3633   001CF4  8EA7               	bsf	167,7,c	;volatile
  3634   001CF6                     
  3635                           ; BSR set to: 15
  3636                           ;dc_motor.c: 47:     CCP3CONbits.FMT=1;
  3637   001CF6  8926               	bsf	38,4,b	;volatile
  3638                           
  3639                           ;dc_motor.c: 48:     CCP3CONbits.CCP3MODE=0b1100;
  3640   001CF8  5126               	movf	38,w,b	;volatile
  3641   001CFA  0BF0               	andlw	-16
  3642   001CFC  090C               	iorlw	12
  3643   001CFE  6F26               	movwf	38,b	;volatile
  3644   001D00                     
  3645                           ; BSR set to: 15
  3646                           ;dc_motor.c: 49:     CCP3CONbits.EN=1;
  3647   001D00  8F26               	bsf	38,7,b	;volatile
  3648   001D02                     
  3649                           ; BSR set to: 15
  3650                           ;dc_motor.c: 51:     CCP4CONbits.FMT=1;
  3651   001D02  8922               	bsf	34,4,b	;volatile
  3652                           
  3653                           ;dc_motor.c: 52:     CCP4CONbits.CCP4MODE=0b1100;
  3654   001D04  5122               	movf	34,w,b	;volatile
  3655   001D06  0BF0               	andlw	-16
  3656   001D08  090C               	iorlw	12
  3657   001D0A  6F22               	movwf	34,b	;volatile
  3658   001D0C                     
  3659                           ; BSR set to: 15
  3660                           ;dc_motor.c: 53:     CCP4CONbits.EN=1;
  3661   001D0C  8F22               	bsf	34,7,b	;volatile
  3662                           
  3663                           ;dc_motor.c: 56:     RE2PPS=0x05;
  3664   001D0E  0E05               	movlw	5
  3665   001D10  010E               	movlb	14	; () banked
  3666   001D12  6F74               	movwf	116,b	;volatile
  3667                           
  3668                           ;dc_motor.c: 57:     RE4PPS=0x06;
  3669   001D14  0E06               	movlw	6
  3670   001D16  6F76               	movwf	118,b	;volatile
  3671                           
  3672                           ;dc_motor.c: 58:     RC7PPS=0x07;
  3673   001D18  0E07               	movlw	7
  3674   001D1A  6F69               	movwf	105,b	;volatile
  3675                           
  3676                           ;dc_motor.c: 59:     RG6PPS=0x08;
  3677   001D1C  0E08               	movlw	8
  3678   001D1E  6F88               	movwf	136,b	;volatile
  3679   001D20                     
  3680                           ; BSR set to: 14
  3681                           ;dc_motor.c: 62:     TRISEbits.TRISE2=0;
  3682   001D20  9485               	bcf	133,2,c	;volatile
  3683   001D22                     
  3684                           ; BSR set to: 14
  3685                           ;dc_motor.c: 63:     TRISEbits.TRISE4=0;
  3686   001D22  9885               	bcf	133,4,c	;volatile
  3687   001D24                     
  3688                           ; BSR set to: 14
  3689                           ;dc_motor.c: 64:     TRISCbits.TRISC7=0;
  3690   001D24  9E83               	bcf	131,7,c	;volatile
  3691   001D26                     
  3692                           ; BSR set to: 14
  3693                           ;dc_motor.c: 65:     TRISGbits.TRISG6=0;
  3694   001D26  9C87               	bcf	135,6,c	;volatile
  3695   001D28                     
  3696                           ; BSR set to: 14
  3697                           ;dc_motor.c: 68:     LATEbits.LATE2=0;
  3698   001D28  947D               	bcf	125,2,c	;volatile
  3699   001D2A                     
  3700                           ; BSR set to: 14
  3701                           ;dc_motor.c: 69:     LATCbits.LATC7=0;
  3702   001D2A  9E7B               	bcf	123,7,c	;volatile
  3703   001D2C                     
  3704                           ; BSR set to: 14
  3705                           ;dc_motor.c: 70:     LATEbits.LATE4=0;
  3706   001D2C  987D               	bcf	125,4,c	;volatile
  3707   001D2E                     
  3708                           ; BSR set to: 14
  3709                           ;dc_motor.c: 71:     LATGbits.LATG6=0;
  3710   001D2E  9C7F               	bcf	127,6,c	;volatile
  3711   001D30                     
  3712                           ; BSR set to: 14
  3713   001D30  0012               	return		;funcret
  3714   001D32                     __end_of_initDCmotorsPWM:
  3715                           	callstack 0
  3716                           
  3717 ;; *************** function _get16bitTMR0val *****************
  3718 ;; Defined at:
  3719 ;;		line 27 in file "timers.c"
  3720 ;; Parameters:    Size  Location     Type
  3721 ;;		None
  3722 ;; Auto vars:     Size  Location     Type
  3723 ;;  timer_val       2    5[COMRAM] unsigned int 
  3724 ;; Return value:  Size  Location     Type
  3725 ;;                  2    1[COMRAM] unsigned int 
  3726 ;; Registers used:
  3727 ;;		wreg, status,2, status,0
  3728 ;; Tracked objects:
  3729 ;;		On entry : 0/0
  3730 ;;		On exit  : 0/0
  3731 ;;		Unchanged: 0/0
  3732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3733 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3734 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3735 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3736 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3737 ;;Total ram usage:        6 bytes
  3738 ;; Hardware stack levels used: 1
  3739 ;; Hardware stack levels required when called: 2
  3740 ;; This function calls:
  3741 ;;		Nothing
  3742 ;; This function is called by:
  3743 ;;		_main
  3744 ;; This function uses a non-reentrant model
  3745 ;;
  3746                           
  3747                           	psect	text21
  3748   0022AA                     __ptext21:
  3749                           	callstack 0
  3750   0022AA                     _get16bitTMR0val:
  3751                           	callstack 28
  3752   0022AA                     
  3753                           ;timers.c: 29:     unsigned int timer_val = TMR0L;
  3754   0022AA  CFD3 F006          	movff	4051,get16bitTMR0val@timer_val	;volatile
  3755   0022AE  6A07               	clrf	(get16bitTMR0val@timer_val+1)^0,c
  3756   0022B0                     
  3757                           ;timers.c: 30:     timer_val |= (TMR0H << 8);
  3758   0022B0  50D4               	movf	212,w,c	;volatile
  3759   0022B2  6E05               	movwf	(??_get16bitTMR0val+1)^0,c
  3760   0022B4  6A04               	clrf	??_get16bitTMR0val^0,c
  3761   0022B6  5004               	movf	??_get16bitTMR0val^0,w,c
  3762   0022B8  1206               	iorwf	get16bitTMR0val@timer_val^0,f,c
  3763   0022BA  5005               	movf	(??_get16bitTMR0val+1)^0,w,c
  3764   0022BC  1207               	iorwf	(get16bitTMR0val@timer_val+1)^0,f,c
  3765   0022BE                     
  3766                           ;timers.c: 31:     return timer_val;
  3767   0022BE  C006  F002         	movff	get16bitTMR0val@timer_val,?_get16bitTMR0val
  3768   0022C2  C007  F003         	movff	get16bitTMR0val@timer_val+1,?_get16bitTMR0val+1
  3769   0022C6  0012               	return		;funcret
  3770   0022C8                     __end_of_get16bitTMR0val:
  3771                           	callstack 0
  3772                           
  3773 ;; *************** function _fullSpeedAhead *****************
  3774 ;; Defined at:
  3775 ;;		line 99 in file "dc_motor.c"
  3776 ;; Parameters:    Size  Location     Type
  3777 ;;  mL              2   20[COMRAM] PTR struct DC_motor
  3778 ;;		 -> main@motorL(9), 
  3779 ;;  mR              2   22[COMRAM] PTR struct DC_motor
  3780 ;;		 -> main@motorR(9), 
  3781 ;; Auto vars:     Size  Location     Type
  3782 ;;		None
  3783 ;; Return value:  Size  Location     Type
  3784 ;;                  1    wreg      void 
  3785 ;; Registers used:
  3786 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3787 ;; Tracked objects:
  3788 ;;		On entry : 0/0
  3789 ;;		On exit  : 0/0
  3790 ;;		Unchanged: 0/0
  3791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3792 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3794 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3795 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3796 ;;Total ram usage:        5 bytes
  3797 ;; Hardware stack levels used: 1
  3798 ;; Hardware stack levels required when called: 4
  3799 ;; This function calls:
  3800 ;;		_setMotorPWM
  3801 ;; This function is called by:
  3802 ;;		_main
  3803 ;; This function uses a non-reentrant model
  3804 ;;
  3805                           
  3806                           	psect	text22
  3807   001A68                     __ptext22:
  3808                           	callstack 0
  3809   001A68                     _fullSpeedAhead:
  3810                           	callstack 26
  3811   001A68                     
  3812                           ;dc_motor.c: 100:     mL->direction = 0;
  3813   001A68  EE20 F001          	lfsr	2,1
  3814   001A6C  5015               	movf	fullSpeedAhead@mL^0,w,c
  3815   001A6E  26D9               	addwf	fsr2l,f,c
  3816   001A70  5016               	movf	(fullSpeedAhead@mL+1)^0,w,c
  3817   001A72  22DA               	addwfc	fsr2h,f,c
  3818   001A74  6ADF               	clrf	indf2,c
  3819                           
  3820                           ;dc_motor.c: 101:     mR->direction = 0;
  3821   001A76  EE20 F001          	lfsr	2,1
  3822   001A7A  5017               	movf	fullSpeedAhead@mR^0,w,c
  3823   001A7C  26D9               	addwf	fsr2l,f,c
  3824   001A7E  5018               	movf	(fullSpeedAhead@mR+1)^0,w,c
  3825   001A80  22DA               	addwfc	fsr2h,f,c
  3826   001A82  6ADF               	clrf	indf2,c
  3827                           
  3828                           ;dc_motor.c: 103:     while ((mL->power) < 100 || (mR->power) < 100){
  3829   001A84  EF7A  F00D         	goto	l169
  3830   001A88                     l2531:
  3831                           
  3832                           ;dc_motor.c: 104:         if ((mL->power) < 100) (mL->power) += 1;
  3833   001A88  C015  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3834   001A8C  C016  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3835   001A90  0E64               	movlw	100
  3836   001A92  60DF               	cpfslt	indf2,c
  3837   001A94  EF4E  F00D         	goto	u1401
  3838   001A98  EF50  F00D         	goto	u1400
  3839   001A9C                     u1401:
  3840   001A9C  EF55  F00D         	goto	l2535
  3841   001AA0                     u1400:
  3842   001AA0  C015  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3843   001AA4  C016  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3844   001AA8  2ADF               	incf	indf2,f,c
  3845   001AAA                     l2535:
  3846                           
  3847                           ;dc_motor.c: 105:         if ((mR->power) < 100) (mR->power) += 1;
  3848   001AAA  C017  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3849   001AAE  C018  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3850   001AB2  0E64               	movlw	100
  3851   001AB4  60DF               	cpfslt	indf2,c
  3852   001AB6  EF5F  F00D         	goto	u1411
  3853   001ABA  EF61  F00D         	goto	u1410
  3854   001ABE                     u1411:
  3855   001ABE  EF66  F00D         	goto	l2539
  3856   001AC2                     u1410:
  3857   001AC2  C017  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3858   001AC6  C018  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3859   001ACA  2ADF               	incf	indf2,f,c
  3860   001ACC                     l2539:
  3861                           
  3862                           ;dc_motor.c: 107:         setMotorPWM(mL);
  3863   001ACC  C015  F00F         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3864   001AD0  C016  F010         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  3865   001AD4  EC5A  F009         	call	_setMotorPWM	;wreg free
  3866   001AD8                     
  3867                           ;dc_motor.c: 108:         setMotorPWM(mR);
  3868   001AD8  C017  F00F         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3869   001ADC  C018  F010         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  3870   001AE0  EC5A  F009         	call	_setMotorPWM	;wreg free
  3871   001AE4                     
  3872                           ;dc_motor.c: 109:         _delay((unsigned long)((1)*(64000000/4000.0)));
  3873   001AE4  0E15               	movlw	21
  3874   001AE6  6E19               	movwf	??_fullSpeedAhead^0,c
  3875   001AE8  0EC6               	movlw	198
  3876   001AEA                     u1957:
  3877   001AEA  2EE8               	decfsz	wreg,f,c
  3878   001AEC  D7FE               	bra	u1957
  3879   001AEE  2E19               	decfsz	??_fullSpeedAhead^0,f,c
  3880   001AF0  D7FC               	bra	u1957
  3881   001AF2  D000               	nop2	
  3882   001AF4                     l169:
  3883                           
  3884                           ;dc_motor.c: 103:     while ((mL->power) < 100 || (mR->power) < 100){
  3885   001AF4  C015  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3886   001AF8  C016  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3887   001AFC  0E63               	movlw	99
  3888   001AFE  64DF               	cpfsgt	indf2,c
  3889   001B00  EF84  F00D         	goto	u1421
  3890   001B04  EF86  F00D         	goto	u1420
  3891   001B08                     u1421:
  3892   001B08  EF44  F00D         	goto	l2531
  3893   001B0C                     u1420:
  3894   001B0C  C017  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3895   001B10  C018  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3896   001B14  0E63               	movlw	99
  3897   001B16  64DF               	cpfsgt	indf2,c
  3898   001B18  EF90  F00D         	goto	u1431
  3899   001B1C  EF92  F00D         	goto	u1430
  3900   001B20                     u1431:
  3901   001B20  EF44  F00D         	goto	l2531
  3902   001B24                     u1430:
  3903   001B24  0012               	return		;funcret
  3904   001B26                     __end_of_fullSpeedAhead:
  3905                           	callstack 0
  3906                           
  3907 ;; *************** function _setMotorPWM *****************
  3908 ;; Defined at:
  3909 ;;		line 76 in file "dc_motor.c"
  3910 ;; Parameters:    Size  Location     Type
  3911 ;;  m               2   14[COMRAM] PTR struct DC_motor
  3912 ;;		 -> main@motorR(9), main@motorL(9), 
  3913 ;; Auto vars:     Size  Location     Type
  3914 ;;  negDuty         1   19[COMRAM] unsigned char 
  3915 ;;  posDuty         1   18[COMRAM] unsigned char 
  3916 ;; Return value:  Size  Location     Type
  3917 ;;                  1    wreg      void 
  3918 ;; Registers used:
  3919 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3920 ;; Tracked objects:
  3921 ;;		On entry : 0/0
  3922 ;;		On exit  : 0/0
  3923 ;;		Unchanged: 0/0
  3924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3925 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3926 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3927 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3928 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3929 ;;Total ram usage:        6 bytes
  3930 ;; Hardware stack levels used: 1
  3931 ;; Hardware stack levels required when called: 3
  3932 ;; This function calls:
  3933 ;;		___lwdiv
  3934 ;;		___wmul
  3935 ;; This function is called by:
  3936 ;;		_fullSpeedAhead
  3937 ;;		_stop
  3938 ;;		_turn_left_90
  3939 ;;		_turn_right_90
  3940 ;;		_turn_left_135
  3941 ;;		_turn_right_135
  3942 ;;		_reverse_after_read
  3943 ;;		_reverse_one_square
  3944 ;; This function uses a non-reentrant model
  3945 ;;
  3946                           
  3947                           	psect	text23
  3948   0012B4                     __ptext23:
  3949                           	callstack 0
  3950   0012B4                     _setMotorPWM:
  3951                           	callstack 25
  3952   0012B4                     
  3953                           ;dc_motor.c: 76: void setMotorPWM(struct DC_motor *m);dc_motor.c: 77: {;dc_motor.c: 78: 
      +                              unsigned char posDuty, negDuty;;dc_motor.c: 80:     if(m->brakemode) {
  3954   0012B4  EE20 F002          	lfsr	2,2
  3955   0012B8  500F               	movf	setMotorPWM@m^0,w,c
  3956   0012BA  26D9               	addwf	fsr2l,f,c
  3957   0012BC  5010               	movf	(setMotorPWM@m+1)^0,w,c
  3958   0012BE  22DA               	addwfc	fsr2h,f,c
  3959   0012C0  50DF               	movf	indf2,w,c
  3960   0012C2  B4D8               	btfsc	status,2,c
  3961   0012C4  EF66  F009         	goto	u1161
  3962   0012C8  EF68  F009         	goto	u1160
  3963   0012CC                     u1161:
  3964   0012CC  EF9C  F009         	goto	l2333
  3965   0012D0                     u1160:
  3966   0012D0                     
  3967                           ;dc_motor.c: 81:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  3968   0012D0  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
  3969   0012D4  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3970   0012D8  50DF               	movf	indf2,w,c
  3971   0012DA  6E11               	movwf	??_setMotorPWM^0,c
  3972   0012DC  5011               	movf	??_setMotorPWM^0,w,c
  3973   0012DE  6E02               	movwf	___wmul@multiplier^0,c
  3974   0012E0  6A03               	clrf	(___wmul@multiplier+1)^0,c
  3975   0012E2  EE20 F003          	lfsr	2,3
  3976   0012E6  500F               	movf	setMotorPWM@m^0,w,c
  3977   0012E8  26D9               	addwf	fsr2l,f,c
  3978   0012EA  5010               	movf	(setMotorPWM@m+1)^0,w,c
  3979   0012EC  22DA               	addwfc	fsr2h,f,c
  3980   0012EE  CFDE F004          	movff	postinc2,___wmul@multiplicand
  3981   0012F2  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  3982   0012F6  EC13  F011         	call	___wmul	;wreg free
  3983   0012FA  C002  F008         	movff	?___wmul,___lwdiv@dividend
  3984   0012FE  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  3985   001302  0E00               	movlw	0
  3986   001304  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  3987   001306  0E64               	movlw	100
  3988   001308  6E0A               	movwf	___lwdiv@divisor^0,c
  3989   00130A  ECE6  F00E         	call	___lwdiv	;wreg free
  3990   00130E  EE20 F003          	lfsr	2,3
  3991   001312  500F               	movf	setMotorPWM@m^0,w,c
  3992   001314  26D9               	addwf	fsr2l,f,c
  3993   001316  5010               	movf	(setMotorPWM@m+1)^0,w,c
  3994   001318  22DA               	addwfc	fsr2h,f,c
  3995   00131A  50DF               	movf	indf2,w,c
  3996   00131C  6E12               	movwf	(??_setMotorPWM+1)^0,c
  3997   00131E  5008               	movf	?___lwdiv^0,w,c
  3998   001320  5C12               	subwf	(??_setMotorPWM+1)^0,w,c
  3999   001322  6E13               	movwf	setMotorPWM@posDuty^0,c
  4000   001324                     
  4001                           ;dc_motor.c: 82:         negDuty=m->PWMperiod;
  4002   001324  EE20 F003          	lfsr	2,3
  4003   001328  500F               	movf	setMotorPWM@m^0,w,c
  4004   00132A  26D9               	addwf	fsr2l,f,c
  4005   00132C  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4006   00132E  22DA               	addwfc	fsr2h,f,c
  4007   001330  50DF               	movf	indf2,w,c
  4008   001332  6E14               	movwf	setMotorPWM@negDuty^0,c
  4009                           
  4010                           ;dc_motor.c: 83:     }
  4011   001334  EFBF  F009         	goto	l2337
  4012   001338                     l2333:
  4013                           
  4014                           ;dc_motor.c: 85:         posDuty=0;
  4015   001338  0E00               	movlw	0
  4016   00133A  6E13               	movwf	setMotorPWM@posDuty^0,c
  4017   00133C                     
  4018                           ;dc_motor.c: 86:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  4019   00133C  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
  4020   001340  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4021   001344  50DF               	movf	indf2,w,c
  4022   001346  6E11               	movwf	??_setMotorPWM^0,c
  4023   001348  5011               	movf	??_setMotorPWM^0,w,c
  4024   00134A  6E02               	movwf	___wmul@multiplier^0,c
  4025   00134C  6A03               	clrf	(___wmul@multiplier+1)^0,c
  4026   00134E  EE20 F003          	lfsr	2,3
  4027   001352  500F               	movf	setMotorPWM@m^0,w,c
  4028   001354  26D9               	addwf	fsr2l,f,c
  4029   001356  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4030   001358  22DA               	addwfc	fsr2h,f,c
  4031   00135A  CFDE F004          	movff	postinc2,___wmul@multiplicand
  4032   00135E  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  4033   001362  EC13  F011         	call	___wmul	;wreg free
  4034   001366  C002  F008         	movff	?___wmul,___lwdiv@dividend
  4035   00136A  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  4036   00136E  0E00               	movlw	0
  4037   001370  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  4038   001372  0E64               	movlw	100
  4039   001374  6E0A               	movwf	___lwdiv@divisor^0,c
  4040   001376  ECE6  F00E         	call	___lwdiv	;wreg free
  4041   00137A  5008               	movf	?___lwdiv^0,w,c
  4042   00137C  6E14               	movwf	setMotorPWM@negDuty^0,c
  4043   00137E                     l2337:
  4044                           
  4045                           ;dc_motor.c: 89:     if (m->direction) {
  4046   00137E  EE20 F001          	lfsr	2,1
  4047   001382  500F               	movf	setMotorPWM@m^0,w,c
  4048   001384  26D9               	addwf	fsr2l,f,c
  4049   001386  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4050   001388  22DA               	addwfc	fsr2h,f,c
  4051   00138A  50DF               	movf	indf2,w,c
  4052   00138C  B4D8               	btfsc	status,2,c
  4053   00138E  EFCB  F009         	goto	u1171
  4054   001392  EFCD  F009         	goto	u1170
  4055   001396                     u1171:
  4056   001396  EFEF  F009         	goto	l2341
  4057   00139A                     u1170:
  4058   00139A                     
  4059                           ;dc_motor.c: 90:         *(m->posDutyHighByte)=posDuty;
  4060   00139A  EE20 F005          	lfsr	2,5
  4061   00139E  500F               	movf	setMotorPWM@m^0,w,c
  4062   0013A0  26D9               	addwf	fsr2l,f,c
  4063   0013A2  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4064   0013A4  22DA               	addwfc	fsr2h,f,c
  4065   0013A6  CFDE F011          	movff	postinc2,??_setMotorPWM
  4066   0013AA  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  4067   0013AE  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  4068   0013B2  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4069   0013B6  C013  FFDF         	movff	setMotorPWM@posDuty,indf2
  4070                           
  4071                           ;dc_motor.c: 91:         *(m->negDutyHighByte)=negDuty;
  4072   0013BA  EE20 F007          	lfsr	2,7
  4073   0013BE  500F               	movf	setMotorPWM@m^0,w,c
  4074   0013C0  26D9               	addwf	fsr2l,f,c
  4075   0013C2  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4076   0013C4  22DA               	addwfc	fsr2h,f,c
  4077   0013C6  CFDE F011          	movff	postinc2,??_setMotorPWM
  4078   0013CA  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  4079   0013CE  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  4080   0013D2  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4081   0013D6  C014  FFDF         	movff	setMotorPWM@negDuty,indf2
  4082                           
  4083                           ;dc_motor.c: 92:     } else {
  4084   0013DA  EF0F  F00A         	goto	l166
  4085   0013DE                     l2341:
  4086                           
  4087                           ;dc_motor.c: 93:         *(m->posDutyHighByte)=negDuty;
  4088   0013DE  EE20 F005          	lfsr	2,5
  4089   0013E2  500F               	movf	setMotorPWM@m^0,w,c
  4090   0013E4  26D9               	addwf	fsr2l,f,c
  4091   0013E6  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4092   0013E8  22DA               	addwfc	fsr2h,f,c
  4093   0013EA  CFDE F011          	movff	postinc2,??_setMotorPWM
  4094   0013EE  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  4095   0013F2  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  4096   0013F6  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4097   0013FA  C014  FFDF         	movff	setMotorPWM@negDuty,indf2
  4098                           
  4099                           ;dc_motor.c: 94:         *(m->negDutyHighByte)=posDuty;
  4100   0013FE  EE20 F007          	lfsr	2,7
  4101   001402  500F               	movf	setMotorPWM@m^0,w,c
  4102   001404  26D9               	addwf	fsr2l,f,c
  4103   001406  5010               	movf	(setMotorPWM@m+1)^0,w,c
  4104   001408  22DA               	addwfc	fsr2h,f,c
  4105   00140A  CFDE F011          	movff	postinc2,??_setMotorPWM
  4106   00140E  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  4107   001412  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  4108   001416  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4109   00141A  C013  FFDF         	movff	setMotorPWM@posDuty,indf2
  4110   00141E                     l166:
  4111   00141E  0012               	return		;funcret
  4112   001420                     __end_of_setMotorPWM:
  4113                           	callstack 0
  4114                           
  4115 ;; *************** function ___wmul *****************
  4116 ;; Defined at:
  4117 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  4118 ;; Parameters:    Size  Location     Type
  4119 ;;  multiplier      2    1[COMRAM] unsigned int 
  4120 ;;  multiplicand    2    3[COMRAM] unsigned int 
  4121 ;; Auto vars:     Size  Location     Type
  4122 ;;  product         2    5[COMRAM] unsigned int 
  4123 ;; Return value:  Size  Location     Type
  4124 ;;                  2    1[COMRAM] unsigned int 
  4125 ;; Registers used:
  4126 ;;		wreg, status,2, status,0, prodl, prodh
  4127 ;; Tracked objects:
  4128 ;;		On entry : 0/0
  4129 ;;		On exit  : 0/0
  4130 ;;		Unchanged: 0/0
  4131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4132 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4133 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4135 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4136 ;;Total ram usage:        6 bytes
  4137 ;; Hardware stack levels used: 1
  4138 ;; Hardware stack levels required when called: 2
  4139 ;; This function calls:
  4140 ;;		Nothing
  4141 ;; This function is called by:
  4142 ;;		_setMotorPWM
  4143 ;; This function uses a non-reentrant model
  4144 ;;
  4145                           
  4146                           	psect	text24
  4147   002226                     __ptext24:
  4148                           	callstack 0
  4149   002226                     ___wmul:
  4150                           	callstack 25
  4151   002226  5002               	movf	___wmul@multiplier^0,w,c
  4152   002228  0204               	mulwf	___wmul@multiplicand^0,c
  4153   00222A  CFF3 F006          	movff	prodl,___wmul@product
  4154   00222E  CFF4 F007          	movff	prodh,___wmul@product+1
  4155   002232  5002               	movf	___wmul@multiplier^0,w,c
  4156   002234  0205               	mulwf	(___wmul@multiplicand+1)^0,c
  4157   002236  50F3               	movf	243,w,c
  4158   002238  2607               	addwf	(___wmul@product+1)^0,f,c
  4159   00223A  5003               	movf	(___wmul@multiplier+1)^0,w,c
  4160   00223C  0204               	mulwf	___wmul@multiplicand^0,c
  4161   00223E  50F3               	movf	243,w,c
  4162   002240  2607               	addwf	(___wmul@product+1)^0,f,c
  4163   002242  C006  F002         	movff	___wmul@product,?___wmul
  4164   002246  C007  F003         	movff	___wmul@product+1,?___wmul+1
  4165   00224A  0012               	return		;funcret
  4166   00224C                     __end_of___wmul:
  4167                           	callstack 0
  4168                           
  4169 ;; *************** function ___lwdiv *****************
  4170 ;; Defined at:
  4171 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  4172 ;; Parameters:    Size  Location     Type
  4173 ;;  dividend        2    7[COMRAM] unsigned int 
  4174 ;;  divisor         2    9[COMRAM] unsigned int 
  4175 ;; Auto vars:     Size  Location     Type
  4176 ;;  quotient        2   11[COMRAM] unsigned int 
  4177 ;;  counter         1   13[COMRAM] unsigned char 
  4178 ;; Return value:  Size  Location     Type
  4179 ;;                  2    7[COMRAM] unsigned int 
  4180 ;; Registers used:
  4181 ;;		wreg, status,2, status,0
  4182 ;; Tracked objects:
  4183 ;;		On entry : 0/0
  4184 ;;		On exit  : 0/0
  4185 ;;		Unchanged: 0/0
  4186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4187 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4188 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4190 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4191 ;;Total ram usage:        7 bytes
  4192 ;; Hardware stack levels used: 1
  4193 ;; Hardware stack levels required when called: 2
  4194 ;; This function calls:
  4195 ;;		Nothing
  4196 ;; This function is called by:
  4197 ;;		_setMotorPWM
  4198 ;; This function uses a non-reentrant model
  4199 ;;
  4200                           
  4201                           	psect	text25
  4202   001DCC                     __ptext25:
  4203                           	callstack 0
  4204   001DCC                     ___lwdiv:
  4205                           	callstack 25
  4206   001DCC  0E00               	movlw	0
  4207   001DCE  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
  4208   001DD0  0E00               	movlw	0
  4209   001DD2  6E0C               	movwf	___lwdiv@quotient^0,c
  4210   001DD4  500A               	movf	___lwdiv@divisor^0,w,c
  4211   001DD6  100B               	iorwf	(___lwdiv@divisor+1)^0,w,c
  4212   001DD8  B4D8               	btfsc	status,2,c
  4213   001DDA  EFF1  F00E         	goto	u1061
  4214   001DDE  EFF3  F00E         	goto	u1060
  4215   001DE2                     u1061:
  4216   001DE2  EF1B  F00F         	goto	l1010
  4217   001DE6                     u1060:
  4218   001DE6  0E01               	movlw	1
  4219   001DE8  6E0E               	movwf	___lwdiv@counter^0,c
  4220   001DEA  EFFB  F00E         	goto	l2265
  4221   001DEE                     l2263:
  4222   001DEE  90D8               	bcf	status,0,c
  4223   001DF0  360A               	rlcf	___lwdiv@divisor^0,f,c
  4224   001DF2  360B               	rlcf	(___lwdiv@divisor+1)^0,f,c
  4225   001DF4  2A0E               	incf	___lwdiv@counter^0,f,c
  4226   001DF6                     l2265:
  4227   001DF6  AE0B               	btfss	(___lwdiv@divisor+1)^0,7,c
  4228   001DF8  EF00  F00F         	goto	u1071
  4229   001DFC  EF02  F00F         	goto	u1070
  4230   001E00                     u1071:
  4231   001E00  EFF7  F00E         	goto	l2263
  4232   001E04                     u1070:
  4233   001E04                     l2267:
  4234   001E04  90D8               	bcf	status,0,c
  4235   001E06  360C               	rlcf	___lwdiv@quotient^0,f,c
  4236   001E08  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  4237   001E0A  500A               	movf	___lwdiv@divisor^0,w,c
  4238   001E0C  5C08               	subwf	___lwdiv@dividend^0,w,c
  4239   001E0E  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  4240   001E10  5809               	subwfb	(___lwdiv@dividend+1)^0,w,c
  4241   001E12  A0D8               	btfss	status,0,c
  4242   001E14  EF0E  F00F         	goto	u1081
  4243   001E18  EF10  F00F         	goto	u1080
  4244   001E1C                     u1081:
  4245   001E1C  EF15  F00F         	goto	l2275
  4246   001E20                     u1080:
  4247   001E20  500A               	movf	___lwdiv@divisor^0,w,c
  4248   001E22  5E08               	subwf	___lwdiv@dividend^0,f,c
  4249   001E24  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  4250   001E26  5A09               	subwfb	(___lwdiv@dividend+1)^0,f,c
  4251   001E28  800C               	bsf	___lwdiv@quotient^0,0,c
  4252   001E2A                     l2275:
  4253   001E2A  90D8               	bcf	status,0,c
  4254   001E2C  320B               	rrcf	(___lwdiv@divisor+1)^0,f,c
  4255   001E2E  320A               	rrcf	___lwdiv@divisor^0,f,c
  4256   001E30  2E0E               	decfsz	___lwdiv@counter^0,f,c
  4257   001E32  EF02  F00F         	goto	l2267
  4258   001E36                     l1010:
  4259   001E36  C00C  F008         	movff	___lwdiv@quotient,?___lwdiv
  4260   001E3A  C00D  F009         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4261   001E3E  0012               	return		;funcret
  4262   001E40                     __end_of___lwdiv:
  4263                           	callstack 0
  4264                           
  4265 ;; *************** function _color_read *****************
  4266 ;; Defined at:
  4267 ;;		line 44 in file "color.c"
  4268 ;; Parameters:    Size  Location     Type
  4269 ;;  p               2   12[COMRAM] PTR struct RGBC_val
  4270 ;;		 -> main@RGBC(8), 
  4271 ;; Auto vars:     Size  Location     Type
  4272 ;;		None
  4273 ;; Return value:  Size  Location     Type
  4274 ;;                  1    wreg      void 
  4275 ;; Registers used:
  4276 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4277 ;; Tracked objects:
  4278 ;;		On entry : 0/0
  4279 ;;		On exit  : 0/0
  4280 ;;		Unchanged: 0/0
  4281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4282 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4285 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4286 ;;Total ram usage:        2 bytes
  4287 ;; Hardware stack levels used: 1
  4288 ;; Hardware stack levels required when called: 5
  4289 ;; This function calls:
  4290 ;;		_color_read_Blue
  4291 ;;		_color_read_Clear
  4292 ;;		_color_read_Green
  4293 ;;		_color_read_Red
  4294 ;; This function is called by:
  4295 ;;		_main
  4296 ;; This function uses a non-reentrant model
  4297 ;;
  4298                           
  4299                           	psect	text26
  4300   001EA6                     __ptext26:
  4301                           	callstack 0
  4302   001EA6                     _color_read:
  4303                           	callstack 25
  4304   001EA6                     
  4305                           ;color.c: 45:     (p->R) = color_read_Red();
  4306   001EA6  EC82  F00F         	call	_color_read_Red	;wreg free
  4307   001EAA  C00D  FFD9         	movff	color_read@p,fsr2l
  4308   001EAE  C00E  FFDA         	movff	color_read@p+1,fsr2h
  4309   001EB2  C006  FFDE         	movff	?_color_read_Red,postinc2
  4310   001EB6  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  4311                           
  4312                           ;color.c: 46:     (p->G) = color_read_Green();
  4313   001EBA  ECAA  F00F         	call	_color_read_Green	;wreg free
  4314   001EBE  EE20 F002          	lfsr	2,2
  4315   001EC2  500D               	movf	color_read@p^0,w,c
  4316   001EC4  26D9               	addwf	fsr2l,f,c
  4317   001EC6  500E               	movf	(color_read@p+1)^0,w,c
  4318   001EC8  22DA               	addwfc	fsr2h,f,c
  4319   001ECA  C006  FFDE         	movff	?_color_read_Green,postinc2
  4320   001ECE  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  4321                           
  4322                           ;color.c: 47:     (p->B) = color_read_Blue();
  4323   001ED2  ECFA  F00F         	call	_color_read_Blue	;wreg free
  4324   001ED6  EE20 F004          	lfsr	2,4
  4325   001EDA  500D               	movf	color_read@p^0,w,c
  4326   001EDC  26D9               	addwf	fsr2l,f,c
  4327   001EDE  500E               	movf	(color_read@p+1)^0,w,c
  4328   001EE0  22DA               	addwfc	fsr2h,f,c
  4329   001EE2  C006  FFDE         	movff	?_color_read_Blue,postinc2
  4330   001EE6  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  4331                           
  4332                           ;color.c: 48:     (p->C) = color_read_Clear();
  4333   001EEA  ECD2  F00F         	call	_color_read_Clear	;wreg free
  4334   001EEE  EE20 F006          	lfsr	2,6
  4335   001EF2  500D               	movf	color_read@p^0,w,c
  4336   001EF4  26D9               	addwf	fsr2l,f,c
  4337   001EF6  500E               	movf	(color_read@p+1)^0,w,c
  4338   001EF8  22DA               	addwfc	fsr2h,f,c
  4339   001EFA  C006  FFDE         	movff	?_color_read_Clear,postinc2
  4340   001EFE  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  4341   001F02  0012               	return		;funcret
  4342   001F04                     __end_of_color_read:
  4343                           	callstack 0
  4344                           
  4345 ;; *************** function _color_read_Red *****************
  4346 ;; Defined at:
  4347 ;;		line 64 in file "color.c"
  4348 ;; Parameters:    Size  Location     Type
  4349 ;;		None
  4350 ;; Auto vars:     Size  Location     Type
  4351 ;;  tmp             2   10[COMRAM] unsigned int 
  4352 ;; Return value:  Size  Location     Type
  4353 ;;                  2    5[COMRAM] unsigned int 
  4354 ;; Registers used:
  4355 ;;		wreg, status,2, status,0, cstack
  4356 ;; Tracked objects:
  4357 ;;		On entry : 0/0
  4358 ;;		On exit  : 0/0
  4359 ;;		Unchanged: 0/0
  4360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4361 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4362 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4363 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4364 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4365 ;;Total ram usage:        7 bytes
  4366 ;; Hardware stack levels used: 1
  4367 ;; Hardware stack levels required when called: 4
  4368 ;; This function calls:
  4369 ;;		_I2C_2_Master_Read
  4370 ;;		_I2C_2_Master_RepStart
  4371 ;;		_I2C_2_Master_Start
  4372 ;;		_I2C_2_Master_Stop
  4373 ;;		_I2C_2_Master_Write
  4374 ;; This function is called by:
  4375 ;;		_color_read
  4376 ;;		_main
  4377 ;; This function uses a non-reentrant model
  4378 ;;
  4379                           
  4380                           	psect	text27
  4381   001F04                     __ptext27:
  4382                           	callstack 0
  4383   001F04                     _color_read_Red:
  4384                           	callstack 26
  4385   001F04                     
  4386                           ;color.c: 65:  unsigned int tmp;;color.c: 66:  I2C_2_Master_Start();
  4387   001F04  EC97  F011         	call	_I2C_2_Master_Start	;wreg free
  4388                           
  4389                           ;color.c: 67:  I2C_2_Master_Write(0x52 | 0x00);
  4390   001F08  0E52               	movlw	82
  4391   001F0A  EC7C  F011         	call	_I2C_2_Master_Write
  4392                           
  4393                           ;color.c: 68:  I2C_2_Master_Write(0xA0 | 0x16);
  4394   001F0E  0EB6               	movlw	182
  4395   001F10  EC7C  F011         	call	_I2C_2_Master_Write
  4396                           
  4397                           ;color.c: 69:  I2C_2_Master_RepStart();
  4398   001F14  EC8D  F011         	call	_I2C_2_Master_RepStart	;wreg free
  4399                           
  4400                           ;color.c: 70:  I2C_2_Master_Write(0x52 | 0x01);
  4401   001F18  0E53               	movlw	83
  4402   001F1A  EC7C  F011         	call	_I2C_2_Master_Write
  4403                           
  4404                           ;color.c: 71:  tmp=I2C_2_Master_Read(1);
  4405   001F1E  0E01               	movlw	1
  4406   001F20  EC47  F010         	call	_I2C_2_Master_Read
  4407   001F24  6E08               	movwf	??_color_read_Red^0,c
  4408   001F26  5008               	movf	??_color_read_Red^0,w,c
  4409   001F28  6E0B               	movwf	color_read_Red@tmp^0,c
  4410   001F2A  6A0C               	clrf	(color_read_Red@tmp+1)^0,c
  4411                           
  4412                           ;color.c: 72:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  4413   001F2C  0E00               	movlw	0
  4414   001F2E  EC47  F010         	call	_I2C_2_Master_Read
  4415   001F32  6E08               	movwf	??_color_read_Red^0,c
  4416   001F34  5008               	movf	??_color_read_Red^0,w,c
  4417   001F36  6E0A               	movwf	(??_color_read_Red+2)^0,c
  4418   001F38  6A09               	clrf	(??_color_read_Red+1)^0,c
  4419   001F3A  500B               	movf	color_read_Red@tmp^0,w,c
  4420   001F3C  1009               	iorwf	(??_color_read_Red+1)^0,w,c
  4421   001F3E  6E0B               	movwf	color_read_Red@tmp^0,c
  4422   001F40  500C               	movf	(color_read_Red@tmp+1)^0,w,c
  4423   001F42  100A               	iorwf	(??_color_read_Red+2)^0,w,c
  4424   001F44  6E0C               	movwf	(color_read_Red@tmp+1)^0,c
  4425                           
  4426                           ;color.c: 73:  I2C_2_Master_Stop();
  4427   001F46  EC92  F011         	call	_I2C_2_Master_Stop	;wreg free
  4428   001F4A                     
  4429                           ;color.c: 74:  return tmp;
  4430   001F4A  C00B  F006         	movff	color_read_Red@tmp,?_color_read_Red
  4431   001F4E  C00C  F007         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  4432   001F52  0012               	return		;funcret
  4433   001F54                     __end_of_color_read_Red:
  4434                           	callstack 0
  4435                           
  4436 ;; *************** function _color_read_Green *****************
  4437 ;; Defined at:
  4438 ;;		line 77 in file "color.c"
  4439 ;; Parameters:    Size  Location     Type
  4440 ;;		None
  4441 ;; Auto vars:     Size  Location     Type
  4442 ;;  tmp             2   10[COMRAM] unsigned int 
  4443 ;; Return value:  Size  Location     Type
  4444 ;;                  2    5[COMRAM] unsigned int 
  4445 ;; Registers used:
  4446 ;;		wreg, status,2, status,0, cstack
  4447 ;; Tracked objects:
  4448 ;;		On entry : 0/0
  4449 ;;		On exit  : 0/0
  4450 ;;		Unchanged: 0/0
  4451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4452 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4453 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4454 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4455 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4456 ;;Total ram usage:        7 bytes
  4457 ;; Hardware stack levels used: 1
  4458 ;; Hardware stack levels required when called: 4
  4459 ;; This function calls:
  4460 ;;		_I2C_2_Master_Read
  4461 ;;		_I2C_2_Master_RepStart
  4462 ;;		_I2C_2_Master_Start
  4463 ;;		_I2C_2_Master_Stop
  4464 ;;		_I2C_2_Master_Write
  4465 ;; This function is called by:
  4466 ;;		_color_read
  4467 ;;		_main
  4468 ;; This function uses a non-reentrant model
  4469 ;;
  4470                           
  4471                           	psect	text28
  4472   001F54                     __ptext28:
  4473                           	callstack 0
  4474   001F54                     _color_read_Green:
  4475                           	callstack 26
  4476   001F54                     
  4477                           ;color.c: 78:  unsigned int tmp;;color.c: 79:  I2C_2_Master_Start();
  4478   001F54  EC97  F011         	call	_I2C_2_Master_Start	;wreg free
  4479                           
  4480                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
  4481   001F58  0E52               	movlw	82
  4482   001F5A  EC7C  F011         	call	_I2C_2_Master_Write
  4483                           
  4484                           ;color.c: 81:  I2C_2_Master_Write(0xA0 | 0x18);
  4485   001F5E  0EB8               	movlw	184
  4486   001F60  EC7C  F011         	call	_I2C_2_Master_Write
  4487                           
  4488                           ;color.c: 82:  I2C_2_Master_RepStart();
  4489   001F64  EC8D  F011         	call	_I2C_2_Master_RepStart	;wreg free
  4490                           
  4491                           ;color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
  4492   001F68  0E53               	movlw	83
  4493   001F6A  EC7C  F011         	call	_I2C_2_Master_Write
  4494                           
  4495                           ;color.c: 84:  tmp=I2C_2_Master_Read(1);
  4496   001F6E  0E01               	movlw	1
  4497   001F70  EC47  F010         	call	_I2C_2_Master_Read
  4498   001F74  6E08               	movwf	??_color_read_Green^0,c
  4499   001F76  5008               	movf	??_color_read_Green^0,w,c
  4500   001F78  6E0B               	movwf	color_read_Green@tmp^0,c
  4501   001F7A  6A0C               	clrf	(color_read_Green@tmp+1)^0,c
  4502                           
  4503                           ;color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  4504   001F7C  0E00               	movlw	0
  4505   001F7E  EC47  F010         	call	_I2C_2_Master_Read
  4506   001F82  6E08               	movwf	??_color_read_Green^0,c
  4507   001F84  5008               	movf	??_color_read_Green^0,w,c
  4508   001F86  6E0A               	movwf	(??_color_read_Green+2)^0,c
  4509   001F88  6A09               	clrf	(??_color_read_Green+1)^0,c
  4510   001F8A  500B               	movf	color_read_Green@tmp^0,w,c
  4511   001F8C  1009               	iorwf	(??_color_read_Green+1)^0,w,c
  4512   001F8E  6E0B               	movwf	color_read_Green@tmp^0,c
  4513   001F90  500C               	movf	(color_read_Green@tmp+1)^0,w,c
  4514   001F92  100A               	iorwf	(??_color_read_Green+2)^0,w,c
  4515   001F94  6E0C               	movwf	(color_read_Green@tmp+1)^0,c
  4516                           
  4517                           ;color.c: 86:  I2C_2_Master_Stop();
  4518   001F96  EC92  F011         	call	_I2C_2_Master_Stop	;wreg free
  4519   001F9A                     
  4520                           ;color.c: 87:  return tmp;
  4521   001F9A  C00B  F006         	movff	color_read_Green@tmp,?_color_read_Green
  4522   001F9E  C00C  F007         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  4523   001FA2  0012               	return		;funcret
  4524   001FA4                     __end_of_color_read_Green:
  4525                           	callstack 0
  4526                           
  4527 ;; *************** function _color_read_Clear *****************
  4528 ;; Defined at:
  4529 ;;		line 51 in file "color.c"
  4530 ;; Parameters:    Size  Location     Type
  4531 ;;		None
  4532 ;; Auto vars:     Size  Location     Type
  4533 ;;  tmp             2   10[COMRAM] unsigned int 
  4534 ;; Return value:  Size  Location     Type
  4535 ;;                  2    5[COMRAM] unsigned int 
  4536 ;; Registers used:
  4537 ;;		wreg, status,2, status,0, cstack
  4538 ;; Tracked objects:
  4539 ;;		On entry : 0/0
  4540 ;;		On exit  : 0/0
  4541 ;;		Unchanged: 0/0
  4542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4543 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4544 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4545 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4546 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4547 ;;Total ram usage:        7 bytes
  4548 ;; Hardware stack levels used: 1
  4549 ;; Hardware stack levels required when called: 4
  4550 ;; This function calls:
  4551 ;;		_I2C_2_Master_Read
  4552 ;;		_I2C_2_Master_RepStart
  4553 ;;		_I2C_2_Master_Start
  4554 ;;		_I2C_2_Master_Stop
  4555 ;;		_I2C_2_Master_Write
  4556 ;; This function is called by:
  4557 ;;		_color_read
  4558 ;;		_main
  4559 ;; This function uses a non-reentrant model
  4560 ;;
  4561                           
  4562                           	psect	text29
  4563   001FA4                     __ptext29:
  4564                           	callstack 0
  4565   001FA4                     _color_read_Clear:
  4566                           	callstack 26
  4567   001FA4                     
  4568                           ;color.c: 52:  unsigned int tmp;;color.c: 53:  I2C_2_Master_Start();
  4569   001FA4  EC97  F011         	call	_I2C_2_Master_Start	;wreg free
  4570                           
  4571                           ;color.c: 54:  I2C_2_Master_Write(0x52 | 0x00);
  4572   001FA8  0E52               	movlw	82
  4573   001FAA  EC7C  F011         	call	_I2C_2_Master_Write
  4574                           
  4575                           ;color.c: 55:  I2C_2_Master_Write(0xA0 | 0x14);
  4576   001FAE  0EB4               	movlw	180
  4577   001FB0  EC7C  F011         	call	_I2C_2_Master_Write
  4578                           
  4579                           ;color.c: 56:  I2C_2_Master_RepStart();
  4580   001FB4  EC8D  F011         	call	_I2C_2_Master_RepStart	;wreg free
  4581                           
  4582                           ;color.c: 57:  I2C_2_Master_Write(0x52 | 0x01);
  4583   001FB8  0E53               	movlw	83
  4584   001FBA  EC7C  F011         	call	_I2C_2_Master_Write
  4585                           
  4586                           ;color.c: 58:  tmp=I2C_2_Master_Read(1);
  4587   001FBE  0E01               	movlw	1
  4588   001FC0  EC47  F010         	call	_I2C_2_Master_Read
  4589   001FC4  6E08               	movwf	??_color_read_Clear^0,c
  4590   001FC6  5008               	movf	??_color_read_Clear^0,w,c
  4591   001FC8  6E0B               	movwf	color_read_Clear@tmp^0,c
  4592   001FCA  6A0C               	clrf	(color_read_Clear@tmp+1)^0,c
  4593                           
  4594                           ;color.c: 59:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  4595   001FCC  0E00               	movlw	0
  4596   001FCE  EC47  F010         	call	_I2C_2_Master_Read
  4597   001FD2  6E08               	movwf	??_color_read_Clear^0,c
  4598   001FD4  5008               	movf	??_color_read_Clear^0,w,c
  4599   001FD6  6E0A               	movwf	(??_color_read_Clear+2)^0,c
  4600   001FD8  6A09               	clrf	(??_color_read_Clear+1)^0,c
  4601   001FDA  500B               	movf	color_read_Clear@tmp^0,w,c
  4602   001FDC  1009               	iorwf	(??_color_read_Clear+1)^0,w,c
  4603   001FDE  6E0B               	movwf	color_read_Clear@tmp^0,c
  4604   001FE0  500C               	movf	(color_read_Clear@tmp+1)^0,w,c
  4605   001FE2  100A               	iorwf	(??_color_read_Clear+2)^0,w,c
  4606   001FE4  6E0C               	movwf	(color_read_Clear@tmp+1)^0,c
  4607                           
  4608                           ;color.c: 60:  I2C_2_Master_Stop();
  4609   001FE6  EC92  F011         	call	_I2C_2_Master_Stop	;wreg free
  4610   001FEA                     
  4611                           ;color.c: 61:  return tmp;
  4612   001FEA  C00B  F006         	movff	color_read_Clear@tmp,?_color_read_Clear
  4613   001FEE  C00C  F007         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  4614   001FF2  0012               	return		;funcret
  4615   001FF4                     __end_of_color_read_Clear:
  4616                           	callstack 0
  4617                           
  4618 ;; *************** function _color_read_Blue *****************
  4619 ;; Defined at:
  4620 ;;		line 90 in file "color.c"
  4621 ;; Parameters:    Size  Location     Type
  4622 ;;		None
  4623 ;; Auto vars:     Size  Location     Type
  4624 ;;  tmp             2   10[COMRAM] unsigned int 
  4625 ;; Return value:  Size  Location     Type
  4626 ;;                  2    5[COMRAM] unsigned int 
  4627 ;; Registers used:
  4628 ;;		wreg, status,2, status,0, cstack
  4629 ;; Tracked objects:
  4630 ;;		On entry : 0/0
  4631 ;;		On exit  : 0/0
  4632 ;;		Unchanged: 0/0
  4633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4634 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4635 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4636 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4637 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4638 ;;Total ram usage:        7 bytes
  4639 ;; Hardware stack levels used: 1
  4640 ;; Hardware stack levels required when called: 4
  4641 ;; This function calls:
  4642 ;;		_I2C_2_Master_Read
  4643 ;;		_I2C_2_Master_RepStart
  4644 ;;		_I2C_2_Master_Start
  4645 ;;		_I2C_2_Master_Stop
  4646 ;;		_I2C_2_Master_Write
  4647 ;; This function is called by:
  4648 ;;		_color_read
  4649 ;;		_main
  4650 ;; This function uses a non-reentrant model
  4651 ;;
  4652                           
  4653                           	psect	text30
  4654   001FF4                     __ptext30:
  4655                           	callstack 0
  4656   001FF4                     _color_read_Blue:
  4657                           	callstack 26
  4658   001FF4                     
  4659                           ;color.c: 91:  unsigned int tmp;;color.c: 92:  I2C_2_Master_Start();
  4660   001FF4  EC97  F011         	call	_I2C_2_Master_Start	;wreg free
  4661                           
  4662                           ;color.c: 93:  I2C_2_Master_Write(0x52 | 0x00);
  4663   001FF8  0E52               	movlw	82
  4664   001FFA  EC7C  F011         	call	_I2C_2_Master_Write
  4665                           
  4666                           ;color.c: 94:  I2C_2_Master_Write(0xA0 | 0x1A);
  4667   001FFE  0EBA               	movlw	186
  4668   002000  EC7C  F011         	call	_I2C_2_Master_Write
  4669                           
  4670                           ;color.c: 95:  I2C_2_Master_RepStart();
  4671   002004  EC8D  F011         	call	_I2C_2_Master_RepStart	;wreg free
  4672                           
  4673                           ;color.c: 96:  I2C_2_Master_Write(0x52 | 0x01);
  4674   002008  0E53               	movlw	83
  4675   00200A  EC7C  F011         	call	_I2C_2_Master_Write
  4676                           
  4677                           ;color.c: 97:  tmp=I2C_2_Master_Read(1);
  4678   00200E  0E01               	movlw	1
  4679   002010  EC47  F010         	call	_I2C_2_Master_Read
  4680   002014  6E08               	movwf	??_color_read_Blue^0,c
  4681   002016  5008               	movf	??_color_read_Blue^0,w,c
  4682   002018  6E0B               	movwf	color_read_Blue@tmp^0,c
  4683   00201A  6A0C               	clrf	(color_read_Blue@tmp+1)^0,c
  4684                           
  4685                           ;color.c: 98:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  4686   00201C  0E00               	movlw	0
  4687   00201E  EC47  F010         	call	_I2C_2_Master_Read
  4688   002022  6E08               	movwf	??_color_read_Blue^0,c
  4689   002024  5008               	movf	??_color_read_Blue^0,w,c
  4690   002026  6E0A               	movwf	(??_color_read_Blue+2)^0,c
  4691   002028  6A09               	clrf	(??_color_read_Blue+1)^0,c
  4692   00202A  500B               	movf	color_read_Blue@tmp^0,w,c
  4693   00202C  1009               	iorwf	(??_color_read_Blue+1)^0,w,c
  4694   00202E  6E0B               	movwf	color_read_Blue@tmp^0,c
  4695   002030  500C               	movf	(color_read_Blue@tmp+1)^0,w,c
  4696   002032  100A               	iorwf	(??_color_read_Blue+2)^0,w,c
  4697   002034  6E0C               	movwf	(color_read_Blue@tmp+1)^0,c
  4698                           
  4699                           ;color.c: 99:  I2C_2_Master_Stop();
  4700   002036  EC92  F011         	call	_I2C_2_Master_Stop	;wreg free
  4701   00203A                     
  4702                           ;color.c: 100:  return tmp;
  4703   00203A  C00B  F006         	movff	color_read_Blue@tmp,?_color_read_Blue
  4704   00203E  C00C  F007         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  4705   002042  0012               	return		;funcret
  4706   002044                     __end_of_color_read_Blue:
  4707                           	callstack 0
  4708                           
  4709 ;; *************** function _I2C_2_Master_RepStart *****************
  4710 ;; Defined at:
  4711 ;;		line 30 in file "i2c.c"
  4712 ;; Parameters:    Size  Location     Type
  4713 ;;		None
  4714 ;; Auto vars:     Size  Location     Type
  4715 ;;		None
  4716 ;; Return value:  Size  Location     Type
  4717 ;;                  1    wreg      void 
  4718 ;; Registers used:
  4719 ;;		wreg, status,2, status,0, cstack
  4720 ;; Tracked objects:
  4721 ;;		On entry : 0/0
  4722 ;;		On exit  : 0/0
  4723 ;;		Unchanged: 0/0
  4724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4728 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4729 ;;Total ram usage:        0 bytes
  4730 ;; Hardware stack levels used: 1
  4731 ;; Hardware stack levels required when called: 3
  4732 ;; This function calls:
  4733 ;;		_I2C_2_Master_Idle
  4734 ;; This function is called by:
  4735 ;;		_color_read_Clear
  4736 ;;		_color_read_Red
  4737 ;;		_color_read_Green
  4738 ;;		_color_read_Blue
  4739 ;; This function uses a non-reentrant model
  4740 ;;
  4741                           
  4742                           	psect	text31
  4743   00231A                     __ptext31:
  4744                           	callstack 0
  4745   00231A                     _I2C_2_Master_RepStart:
  4746                           	callstack 26
  4747   00231A                     
  4748                           ;i2c.c: 31:   I2C_2_Master_Idle();
  4749   00231A  ECFF  F010         	call	_I2C_2_Master_Idle	;wreg free
  4750   00231E                     
  4751                           ;i2c.c: 32:   SSP2CON2bits.RSEN = 1;
  4752   00231E  010E               	movlb	14	; () banked
  4753   002320  83DA               	bsf	218,1,b	;volatile
  4754   002322                     
  4755                           ; BSR set to: 14
  4756   002322  0012               	return		;funcret
  4757   002324                     __end_of_I2C_2_Master_RepStart:
  4758                           	callstack 0
  4759                           
  4760 ;; *************** function _I2C_2_Master_Read *****************
  4761 ;; Defined at:
  4762 ;;		line 45 in file "i2c.c"
  4763 ;; Parameters:    Size  Location     Type
  4764 ;;  ack             1    wreg     unsigned char 
  4765 ;; Auto vars:     Size  Location     Type
  4766 ;;  ack             1    3[COMRAM] unsigned char 
  4767 ;;  tmp             1    4[COMRAM] unsigned char 
  4768 ;; Return value:  Size  Location     Type
  4769 ;;                  1    wreg      unsigned char 
  4770 ;; Registers used:
  4771 ;;		wreg, status,2, status,0, cstack
  4772 ;; Tracked objects:
  4773 ;;		On entry : 0/0
  4774 ;;		On exit  : 0/0
  4775 ;;		Unchanged: 0/0
  4776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4778 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4779 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4780 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4781 ;;Total ram usage:        3 bytes
  4782 ;; Hardware stack levels used: 1
  4783 ;; Hardware stack levels required when called: 3
  4784 ;; This function calls:
  4785 ;;		_I2C_2_Master_Idle
  4786 ;; This function is called by:
  4787 ;;		_color_read_Clear
  4788 ;;		_color_read_Red
  4789 ;;		_color_read_Green
  4790 ;;		_color_read_Blue
  4791 ;; This function uses a non-reentrant model
  4792 ;;
  4793                           
  4794                           	psect	text32
  4795   00208E                     __ptext32:
  4796                           	callstack 0
  4797   00208E                     _I2C_2_Master_Read:
  4798                           	callstack 26
  4799                           
  4800                           ; BSR set to: 14
  4801                           ;incstack = 0
  4802                           ;I2C_2_Master_Read@ack stored from wreg
  4803   00208E  6E04               	movwf	I2C_2_Master_Read@ack^0,c
  4804   002090                     
  4805                           ;i2c.c: 46:   unsigned char tmp;;i2c.c: 47:   I2C_2_Master_Idle();
  4806   002090  ECFF  F010         	call	_I2C_2_Master_Idle	;wreg free
  4807   002094                     
  4808                           ;i2c.c: 48:   SSP2CON2bits.RCEN = 1;
  4809   002094  010E               	movlb	14	; () banked
  4810   002096  87DA               	bsf	218,3,b	;volatile
  4811                           
  4812                           ;i2c.c: 49:   I2C_2_Master_Idle();
  4813   002098  ECFF  F010         	call	_I2C_2_Master_Idle	;wreg free
  4814   00209C                     
  4815                           ;i2c.c: 50:   tmp = SSP2BUF;
  4816   00209C  CED5 F005          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  4817                           
  4818                           ;i2c.c: 51:   I2C_2_Master_Idle();
  4819   0020A0  ECFF  F010         	call	_I2C_2_Master_Idle	;wreg free
  4820   0020A4                     
  4821                           ;i2c.c: 52:   SSP2CON2bits.ACKDT = !ack;
  4822   0020A4  5004               	movf	I2C_2_Master_Read@ack^0,w,c
  4823   0020A6  B4D8               	btfsc	status,2,c
  4824   0020A8  EF58  F010         	goto	u1141
  4825   0020AC  EF5C  F010         	goto	u1140
  4826   0020B0                     u1141:
  4827   0020B0  6A03               	clrf	??_I2C_2_Master_Read^0,c
  4828   0020B2  2A03               	incf	??_I2C_2_Master_Read^0,f,c
  4829   0020B4  EF5D  F010         	goto	u1158
  4830   0020B8                     u1140:
  4831   0020B8  6A03               	clrf	??_I2C_2_Master_Read^0,c
  4832   0020BA                     u1158:
  4833   0020BA  3A03               	swapf	??_I2C_2_Master_Read^0,f,c
  4834   0020BC  4603               	rlncf	??_I2C_2_Master_Read^0,f,c
  4835   0020BE  010E               	movlb	14	; () banked
  4836   0020C0  51DA               	movf	218,w,b	;volatile
  4837   0020C2  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
  4838   0020C4  0BDF               	andlw	-33
  4839   0020C6  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
  4840   0020C8  6FDA               	movwf	218,b	;volatile
  4841   0020CA                     
  4842                           ; BSR set to: 14
  4843                           ;i2c.c: 53:   SSP2CON2bits.ACKEN = 1;
  4844   0020CA  89DA               	bsf	218,4,b	;volatile
  4845   0020CC                     
  4846                           ; BSR set to: 14
  4847                           ;i2c.c: 54:   return tmp;
  4848   0020CC  5005               	movf	I2C_2_Master_Read@tmp^0,w,c
  4849   0020CE                     
  4850                           ; BSR set to: 14
  4851   0020CE  0012               	return		;funcret
  4852   0020D0                     __end_of_I2C_2_Master_Read:
  4853                           	callstack 0
  4854                           
  4855 ;; *************** function _color_click_toggleLED *****************
  4856 ;; Defined at:
  4857 ;;		line 106 in file "color.c"
  4858 ;; Parameters:    Size  Location     Type
  4859 ;;		None
  4860 ;; Auto vars:     Size  Location     Type
  4861 ;;		None
  4862 ;; Return value:  Size  Location     Type
  4863 ;;                  1    wreg      void 
  4864 ;; Registers used:
  4865 ;;		wreg, status,2, status,0
  4866 ;; Tracked objects:
  4867 ;;		On entry : 0/0
  4868 ;;		On exit  : 0/0
  4869 ;;		Unchanged: 0/0
  4870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4873 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4874 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4875 ;;Total ram usage:        1 bytes
  4876 ;; Hardware stack levels used: 1
  4877 ;; Hardware stack levels required when called: 2
  4878 ;; This function calls:
  4879 ;;		Nothing
  4880 ;; This function is called by:
  4881 ;;		_main
  4882 ;; This function uses a non-reentrant model
  4883 ;;
  4884                           
  4885                           	psect	text33
  4886   001E40                     __ptext33:
  4887                           	callstack 0
  4888   001E40                     _color_click_toggleLED:
  4889                           	callstack 28
  4890   001E40                     
  4891                           ;color.c: 107:     LATGbits.LATG0 = !LATGbits.LATG0;
  4892   001E40  A07F               	btfss	127,0,c	;volatile
  4893   001E42  EF25  F00F         	goto	u1341
  4894   001E46  EF29  F00F         	goto	u1340
  4895   001E4A                     u1341:
  4896   001E4A  6A02               	clrf	??_color_click_toggleLED^0,c
  4897   001E4C  2A02               	incf	??_color_click_toggleLED^0,f,c
  4898   001E4E  EF2A  F00F         	goto	u1358
  4899   001E52                     u1340:
  4900   001E52  6A02               	clrf	??_color_click_toggleLED^0,c
  4901   001E54                     u1358:
  4902   001E54  507F               	movf	127,w,c	;volatile
  4903   001E56  1802               	xorwf	??_color_click_toggleLED^0,w,c
  4904   001E58  0BFE               	andlw	-2
  4905   001E5A  1802               	xorwf	??_color_click_toggleLED^0,w,c
  4906   001E5C  6E7F               	movwf	127,c	;volatile
  4907                           
  4908                           ;color.c: 108:     LATAbits.LATA3 = !LATAbits.LATA3;
  4909   001E5E  A679               	btfss	121,3,c	;volatile
  4910   001E60  EF34  F00F         	goto	u1361
  4911   001E64  EF38  F00F         	goto	u1360
  4912   001E68                     u1361:
  4913   001E68  6A02               	clrf	??_color_click_toggleLED^0,c
  4914   001E6A  2A02               	incf	??_color_click_toggleLED^0,f,c
  4915   001E6C  EF39  F00F         	goto	u1378
  4916   001E70                     u1360:
  4917   001E70  6A02               	clrf	??_color_click_toggleLED^0,c
  4918   001E72                     u1378:
  4919   001E72  4602               	rlncf	??_color_click_toggleLED^0,f,c
  4920   001E74  4602               	rlncf	??_color_click_toggleLED^0,f,c
  4921   001E76  4602               	rlncf	??_color_click_toggleLED^0,f,c
  4922   001E78  5079               	movf	121,w,c	;volatile
  4923   001E7A  1802               	xorwf	??_color_click_toggleLED^0,w,c
  4924   001E7C  0BF7               	andlw	-9
  4925   001E7E  1802               	xorwf	??_color_click_toggleLED^0,w,c
  4926   001E80  6E79               	movwf	121,c	;volatile
  4927                           
  4928                           ;color.c: 109:     LATEbits.LATE7 = !LATEbits.LATE7;
  4929   001E82  AE7D               	btfss	125,7,c	;volatile
  4930   001E84  EF46  F00F         	goto	u1381
  4931   001E88  EF4A  F00F         	goto	u1380
  4932   001E8C                     u1381:
  4933   001E8C  6A02               	clrf	??_color_click_toggleLED^0,c
  4934   001E8E  2A02               	incf	??_color_click_toggleLED^0,f,c
  4935   001E90  EF4B  F00F         	goto	u1398
  4936   001E94                     u1380:
  4937   001E94  6A02               	clrf	??_color_click_toggleLED^0,c
  4938   001E96                     u1398:
  4939   001E96  3202               	rrcf	??_color_click_toggleLED^0,f,c
  4940   001E98  3202               	rrcf	??_color_click_toggleLED^0,f,c
  4941   001E9A  507D               	movf	125,w,c	;volatile
  4942   001E9C  1802               	xorwf	??_color_click_toggleLED^0,w,c
  4943   001E9E  0B7F               	andlw	-129
  4944   001EA0  1802               	xorwf	??_color_click_toggleLED^0,w,c
  4945   001EA2  6E7D               	movwf	125,c	;volatile
  4946   001EA4  0012               	return		;funcret
  4947   001EA6                     __end_of_color_click_toggleLED:
  4948                           	callstack 0
  4949                           
  4950 ;; *************** function _color_click_init *****************
  4951 ;; Defined at:
  4952 ;;		line 5 in file "color.c"
  4953 ;; Parameters:    Size  Location     Type
  4954 ;;		None
  4955 ;; Auto vars:     Size  Location     Type
  4956 ;;		None
  4957 ;; Return value:  Size  Location     Type
  4958 ;;                  1    wreg      void 
  4959 ;; Registers used:
  4960 ;;		wreg, status,2, status,0, cstack
  4961 ;; Tracked objects:
  4962 ;;		On entry : 0/0
  4963 ;;		On exit  : 0/0
  4964 ;;		Unchanged: 0/0
  4965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4968 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4969 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4970 ;;Total ram usage:        1 bytes
  4971 ;; Hardware stack levels used: 1
  4972 ;; Hardware stack levels required when called: 5
  4973 ;; This function calls:
  4974 ;;		_I2C_2_Master_Init
  4975 ;;		_color_writetoaddr
  4976 ;; This function is called by:
  4977 ;;		_main
  4978 ;; This function uses a non-reentrant model
  4979 ;;
  4980                           
  4981                           	psect	text34
  4982   002044                     __ptext34:
  4983                           	callstack 0
  4984   002044                     _color_click_init:
  4985                           	callstack 25
  4986   002044                     
  4987                           ;color.c: 7:     I2C_2_Master_Init();
  4988   002044  ECEA  F010         	call	_I2C_2_Master_Init	;wreg free
  4989   002048                     
  4990                           ;color.c: 8:  color_writetoaddr(0x00, 0x01);
  4991   002048  0E01               	movlw	1
  4992   00204A  6E04               	movwf	color_writetoaddr@value^0,c
  4993   00204C  0E00               	movlw	0
  4994   00204E  EC26  F011         	call	_color_writetoaddr
  4995   002052                     
  4996                           ;color.c: 9:     _delay((unsigned long)((3)*(64000000/4000.0)));
  4997   002052  0E3F               	movlw	63
  4998   002054  6E06               	movwf	??_color_click_init^0,c
  4999   002056  0E55               	movlw	85
  5000   002058                     u1967:
  5001   002058  2EE8               	decfsz	wreg,f,c
  5002   00205A  D7FE               	bra	u1967
  5003   00205C  2E06               	decfsz	??_color_click_init^0,f,c
  5004   00205E  D7FC               	bra	u1967
  5005   002060  0000               	nop	
  5006   002062                     
  5007                           ;color.c: 10:  color_writetoaddr(0x00, 0x03);
  5008   002062  0E03               	movlw	3
  5009   002064  6E04               	movwf	color_writetoaddr@value^0,c
  5010   002066  0E00               	movlw	0
  5011   002068  EC26  F011         	call	_color_writetoaddr
  5012   00206C                     
  5013                           ;color.c: 11:  color_writetoaddr(0x01, 0xFF);
  5014   00206C  0EFF               	movlw	255
  5015   00206E  6E04               	movwf	color_writetoaddr@value^0,c
  5016   002070  0E01               	movlw	1
  5017   002072  EC26  F011         	call	_color_writetoaddr
  5018   002076                     
  5019                           ;color.c: 12:     color_writetoaddr(0x03, 0xFF);
  5020   002076  0EFF               	movlw	255
  5021   002078  6E04               	movwf	color_writetoaddr@value^0,c
  5022   00207A  0E03               	movlw	3
  5023   00207C  EC26  F011         	call	_color_writetoaddr
  5024   002080                     
  5025                           ;color.c: 24:     LATGbits.LATG0=0;
  5026   002080  907F               	bcf	127,0,c	;volatile
  5027   002082                     
  5028                           ;color.c: 25:     LATAbits.LATA3=0;
  5029   002082  9679               	bcf	121,3,c	;volatile
  5030   002084                     
  5031                           ;color.c: 26:     LATEbits.LATE7=0;
  5032   002084  9E7D               	bcf	125,7,c	;volatile
  5033   002086                     
  5034                           ;color.c: 29:     TRISGbits.TRISG0=0;
  5035   002086  9087               	bcf	135,0,c	;volatile
  5036   002088                     
  5037                           ;color.c: 30:     TRISAbits.TRISA3=0;
  5038   002088  9681               	bcf	129,3,c	;volatile
  5039   00208A                     
  5040                           ;color.c: 31:     TRISEbits.TRISE7=0;
  5041   00208A  9E85               	bcf	133,7,c	;volatile
  5042   00208C  0012               	return		;funcret
  5043   00208E                     __end_of_color_click_init:
  5044                           	callstack 0
  5045                           
  5046 ;; *************** function _color_writetoaddr *****************
  5047 ;; Defined at:
  5048 ;;		line 35 in file "color.c"
  5049 ;; Parameters:    Size  Location     Type
  5050 ;;  address         1    wreg     unsigned char 
  5051 ;;  value           1    3[COMRAM] unsigned char 
  5052 ;; Auto vars:     Size  Location     Type
  5053 ;;  address         1    4[COMRAM] unsigned char 
  5054 ;; Return value:  Size  Location     Type
  5055 ;;                  1    wreg      void 
  5056 ;; Registers used:
  5057 ;;		wreg, status,2, status,0, cstack
  5058 ;; Tracked objects:
  5059 ;;		On entry : 0/0
  5060 ;;		On exit  : 0/0
  5061 ;;		Unchanged: 0/0
  5062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5063 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5064 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5066 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5067 ;;Total ram usage:        2 bytes
  5068 ;; Hardware stack levels used: 1
  5069 ;; Hardware stack levels required when called: 4
  5070 ;; This function calls:
  5071 ;;		_I2C_2_Master_Start
  5072 ;;		_I2C_2_Master_Stop
  5073 ;;		_I2C_2_Master_Write
  5074 ;; This function is called by:
  5075 ;;		_color_click_init
  5076 ;;		_main
  5077 ;; This function uses a non-reentrant model
  5078 ;;
  5079                           
  5080                           	psect	text35
  5081   00224C                     __ptext35:
  5082                           	callstack 0
  5083   00224C                     _color_writetoaddr:
  5084                           	callstack 26
  5085                           
  5086                           ;incstack = 0
  5087                           ;color_writetoaddr@address stored from wreg
  5088   00224C  6E05               	movwf	color_writetoaddr@address^0,c
  5089   00224E                     
  5090                           ;color.c: 36:     I2C_2_Master_Start();
  5091   00224E  EC97  F011         	call	_I2C_2_Master_Start	;wreg free
  5092                           
  5093                           ;color.c: 37:     I2C_2_Master_Write(0x52 | 0x00);
  5094   002252  0E52               	movlw	82
  5095   002254  EC7C  F011         	call	_I2C_2_Master_Write
  5096                           
  5097                           ;color.c: 38:     I2C_2_Master_Write(0x80 | address);
  5098   002258  5005               	movf	color_writetoaddr@address^0,w,c
  5099   00225A  0980               	iorlw	128
  5100   00225C  EC7C  F011         	call	_I2C_2_Master_Write
  5101                           
  5102                           ;color.c: 39:     I2C_2_Master_Write(value);
  5103   002260  5004               	movf	color_writetoaddr@value^0,w,c
  5104   002262  EC7C  F011         	call	_I2C_2_Master_Write
  5105                           
  5106                           ;color.c: 40:     I2C_2_Master_Stop();
  5107   002266  EC92  F011         	call	_I2C_2_Master_Stop	;wreg free
  5108   00226A  0012               	return		;funcret
  5109   00226C                     __end_of_color_writetoaddr:
  5110                           	callstack 0
  5111                           
  5112 ;; *************** function _I2C_2_Master_Write *****************
  5113 ;; Defined at:
  5114 ;;		line 40 in file "i2c.c"
  5115 ;; Parameters:    Size  Location     Type
  5116 ;;  data_byte       1    wreg     unsigned char 
  5117 ;; Auto vars:     Size  Location     Type
  5118 ;;  data_byte       1    2[COMRAM] unsigned char 
  5119 ;; Return value:  Size  Location     Type
  5120 ;;                  1    wreg      void 
  5121 ;; Registers used:
  5122 ;;		wreg, status,2, status,0, cstack
  5123 ;; Tracked objects:
  5124 ;;		On entry : 0/0
  5125 ;;		On exit  : 0/0
  5126 ;;		Unchanged: 0/0
  5127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5129 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5131 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5132 ;;Total ram usage:        1 bytes
  5133 ;; Hardware stack levels used: 1
  5134 ;; Hardware stack levels required when called: 3
  5135 ;; This function calls:
  5136 ;;		_I2C_2_Master_Idle
  5137 ;; This function is called by:
  5138 ;;		_color_writetoaddr
  5139 ;;		_color_read_Clear
  5140 ;;		_color_read_Red
  5141 ;;		_color_read_Green
  5142 ;;		_color_read_Blue
  5143 ;; This function uses a non-reentrant model
  5144 ;;
  5145                           
  5146                           	psect	text36
  5147   0022F8                     __ptext36:
  5148                           	callstack 0
  5149   0022F8                     _I2C_2_Master_Write:
  5150                           	callstack 26
  5151                           
  5152                           ;incstack = 0
  5153                           ;I2C_2_Master_Write@data_byte stored from wreg
  5154   0022F8  6E03               	movwf	I2C_2_Master_Write@data_byte^0,c
  5155   0022FA                     
  5156                           ;i2c.c: 41:   I2C_2_Master_Idle();
  5157   0022FA  ECFF  F010         	call	_I2C_2_Master_Idle	;wreg free
  5158   0022FE                     
  5159                           ;i2c.c: 42:   SSP2BUF = data_byte;
  5160   0022FE  C003  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  5161   002302  0012               	return		;funcret
  5162   002304                     __end_of_I2C_2_Master_Write:
  5163                           	callstack 0
  5164                           
  5165 ;; *************** function _I2C_2_Master_Stop *****************
  5166 ;; Defined at:
  5167 ;;		line 35 in file "i2c.c"
  5168 ;; Parameters:    Size  Location     Type
  5169 ;;		None
  5170 ;; Auto vars:     Size  Location     Type
  5171 ;;		None
  5172 ;; Return value:  Size  Location     Type
  5173 ;;                  1    wreg      void 
  5174 ;; Registers used:
  5175 ;;		wreg, status,2, status,0, cstack
  5176 ;; Tracked objects:
  5177 ;;		On entry : 0/0
  5178 ;;		On exit  : 0/0
  5179 ;;		Unchanged: 0/0
  5180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5184 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5185 ;;Total ram usage:        0 bytes
  5186 ;; Hardware stack levels used: 1
  5187 ;; Hardware stack levels required when called: 3
  5188 ;; This function calls:
  5189 ;;		_I2C_2_Master_Idle
  5190 ;; This function is called by:
  5191 ;;		_color_writetoaddr
  5192 ;;		_color_read_Clear
  5193 ;;		_color_read_Red
  5194 ;;		_color_read_Green
  5195 ;;		_color_read_Blue
  5196 ;; This function uses a non-reentrant model
  5197 ;;
  5198                           
  5199                           	psect	text37
  5200   002324                     __ptext37:
  5201                           	callstack 0
  5202   002324                     _I2C_2_Master_Stop:
  5203                           	callstack 26
  5204   002324                     
  5205                           ;i2c.c: 36:   I2C_2_Master_Idle();
  5206   002324  ECFF  F010         	call	_I2C_2_Master_Idle	;wreg free
  5207   002328                     
  5208                           ;i2c.c: 37:   SSP2CON2bits.PEN = 1;
  5209   002328  010E               	movlb	14	; () banked
  5210   00232A  85DA               	bsf	218,2,b	;volatile
  5211   00232C                     
  5212                           ; BSR set to: 14
  5213   00232C  0012               	return		;funcret
  5214   00232E                     __end_of_I2C_2_Master_Stop:
  5215                           	callstack 0
  5216                           
  5217 ;; *************** function _I2C_2_Master_Start *****************
  5218 ;; Defined at:
  5219 ;;		line 25 in file "i2c.c"
  5220 ;; Parameters:    Size  Location     Type
  5221 ;;		None
  5222 ;; Auto vars:     Size  Location     Type
  5223 ;;		None
  5224 ;; Return value:  Size  Location     Type
  5225 ;;                  1    wreg      void 
  5226 ;; Registers used:
  5227 ;;		wreg, status,2, status,0, cstack
  5228 ;; Tracked objects:
  5229 ;;		On entry : 0/0
  5230 ;;		On exit  : 0/0
  5231 ;;		Unchanged: 0/0
  5232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5236 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5237 ;;Total ram usage:        0 bytes
  5238 ;; Hardware stack levels used: 1
  5239 ;; Hardware stack levels required when called: 3
  5240 ;; This function calls:
  5241 ;;		_I2C_2_Master_Idle
  5242 ;; This function is called by:
  5243 ;;		_color_writetoaddr
  5244 ;;		_color_read_Clear
  5245 ;;		_color_read_Red
  5246 ;;		_color_read_Green
  5247 ;;		_color_read_Blue
  5248 ;; This function uses a non-reentrant model
  5249 ;;
  5250                           
  5251                           	psect	text38
  5252   00232E                     __ptext38:
  5253                           	callstack 0
  5254   00232E                     _I2C_2_Master_Start:
  5255                           	callstack 26
  5256   00232E                     
  5257                           ;i2c.c: 26:   I2C_2_Master_Idle();
  5258   00232E  ECFF  F010         	call	_I2C_2_Master_Idle	;wreg free
  5259   002332                     
  5260                           ;i2c.c: 27:   SSP2CON2bits.SEN = 1;
  5261   002332  010E               	movlb	14	; () banked
  5262   002334  81DA               	bsf	218,0,b	;volatile
  5263   002336                     
  5264                           ; BSR set to: 14
  5265   002336  0012               	return		;funcret
  5266   002338                     __end_of_I2C_2_Master_Start:
  5267                           	callstack 0
  5268                           
  5269 ;; *************** function _I2C_2_Master_Idle *****************
  5270 ;; Defined at:
  5271 ;;		line 21 in file "i2c.c"
  5272 ;; Parameters:    Size  Location     Type
  5273 ;;		None
  5274 ;; Auto vars:     Size  Location     Type
  5275 ;;		None
  5276 ;; Return value:  Size  Location     Type
  5277 ;;                  1    wreg      void 
  5278 ;; Registers used:
  5279 ;;		wreg, status,2, status,0
  5280 ;; Tracked objects:
  5281 ;;		On entry : 0/0
  5282 ;;		On exit  : 0/0
  5283 ;;		Unchanged: 0/0
  5284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5287 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5288 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5289 ;;Total ram usage:        1 bytes
  5290 ;; Hardware stack levels used: 1
  5291 ;; Hardware stack levels required when called: 2
  5292 ;; This function calls:
  5293 ;;		Nothing
  5294 ;; This function is called by:
  5295 ;;		_I2C_2_Master_Start
  5296 ;;		_I2C_2_Master_RepStart
  5297 ;;		_I2C_2_Master_Stop
  5298 ;;		_I2C_2_Master_Write
  5299 ;;		_I2C_2_Master_Read
  5300 ;; This function uses a non-reentrant model
  5301 ;;
  5302                           
  5303                           	psect	text39
  5304   0021FE                     __ptext39:
  5305                           	callstack 0
  5306   0021FE                     _I2C_2_Master_Idle:
  5307                           	callstack 26
  5308   0021FE                     l90:
  5309   0021FE  010E               	movlb	14	; () banked
  5310   002200  B5D8               	btfsc	216,2,b	;volatile
  5311   002202  EF05  F011         	goto	u921
  5312   002206  EF07  F011         	goto	u920
  5313   00220A                     u921:
  5314   00220A  EFFF  F010         	goto	l90
  5315   00220E                     u920:
  5316   00220E                     
  5317                           ; BSR set to: 14
  5318   00220E  CEDA F002          	movff	3802,??_I2C_2_Master_Idle	;volatile
  5319   002212  0E1F               	movlw	31
  5320   002214  1602               	andwf	??_I2C_2_Master_Idle^0,f,c
  5321   002216  A4D8               	btfss	status,2,c
  5322   002218  EF10  F011         	goto	u931
  5323   00221C  EF12  F011         	goto	u930
  5324   002220                     u931:
  5325   002220  EFFF  F010         	goto	l90
  5326   002224                     u930:
  5327   002224                     
  5328                           ; BSR set to: 14
  5329   002224  0012               	return		;funcret
  5330   002226                     __end_of_I2C_2_Master_Idle:
  5331                           	callstack 0
  5332                           
  5333 ;; *************** function _I2C_2_Master_Init *****************
  5334 ;; Defined at:
  5335 ;;		line 4 in file "i2c.c"
  5336 ;; Parameters:    Size  Location     Type
  5337 ;;		None
  5338 ;; Auto vars:     Size  Location     Type
  5339 ;;		None
  5340 ;; Return value:  Size  Location     Type
  5341 ;;                  1    wreg      void 
  5342 ;; Registers used:
  5343 ;;		wreg, status,2
  5344 ;; Tracked objects:
  5345 ;;		On entry : 0/0
  5346 ;;		On exit  : 0/0
  5347 ;;		Unchanged: 0/0
  5348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5353 ;;Total ram usage:        0 bytes
  5354 ;; Hardware stack levels used: 1
  5355 ;; Hardware stack levels required when called: 2
  5356 ;; This function calls:
  5357 ;;		Nothing
  5358 ;; This function is called by:
  5359 ;;		_color_click_init
  5360 ;;		_main
  5361 ;; This function uses a non-reentrant model
  5362 ;;
  5363                           
  5364                           	psect	text40
  5365   0021D4                     __ptext40:
  5366                           	callstack 0
  5367   0021D4                     _I2C_2_Master_Init:
  5368                           	callstack 27
  5369   0021D4                     
  5370                           ;i2c.c: 6:   SSP2CON1bits.SSPM= 0b1000;
  5371   0021D4  010E               	movlb	14	; () banked
  5372   0021D6  51D9               	movf	217,w,b	;volatile
  5373   0021D8  0BF0               	andlw	-16
  5374   0021DA  0908               	iorlw	8
  5375   0021DC  6FD9               	movwf	217,b	;volatile
  5376   0021DE                     
  5377                           ; BSR set to: 14
  5378                           ;i2c.c: 7:   SSP2CON1bits.SSPEN = 1;
  5379   0021DE  8BD9               	bsf	217,5,b	;volatile
  5380                           
  5381                           ;i2c.c: 8:   SSP2ADD = (64000000/(4*100000))-1;
  5382   0021E0  0E9F               	movlw	159
  5383   0021E2  6FD6               	movwf	214,b	;volatile
  5384   0021E4                     
  5385                           ; BSR set to: 14
  5386                           ;i2c.c: 11:   TRISDbits.TRISD5 = 1;
  5387   0021E4  8A84               	bsf	132,5,c	;volatile
  5388   0021E6                     
  5389                           ; BSR set to: 14
  5390                           ;i2c.c: 12:   TRISDbits.TRISD6 = 1;
  5391   0021E6  8C84               	bsf	132,6,c	;volatile
  5392   0021E8                     
  5393                           ; BSR set to: 14
  5394                           ;i2c.c: 13:   ANSELDbits.ANSELD5=0;
  5395   0021E8  9BA7               	bcf	167,5,b	;volatile
  5396   0021EA                     
  5397                           ; BSR set to: 14
  5398                           ;i2c.c: 14:   ANSELDbits.ANSELD6=0;
  5399   0021EA  9DA7               	bcf	167,6,b	;volatile
  5400                           
  5401                           ;i2c.c: 15:   SSP2DATPPS=0x1D;
  5402   0021EC  0E1D               	movlw	29
  5403   0021EE  6F1D               	movwf	29,b	;volatile
  5404                           
  5405                           ;i2c.c: 16:   SSP2CLKPPS=0x1E;
  5406   0021F0  0E1E               	movlw	30
  5407   0021F2  6F1C               	movwf	28,b	;volatile
  5408                           
  5409                           ;i2c.c: 17:   RD5PPS=0x1C;
  5410   0021F4  0E1C               	movlw	28
  5411   0021F6  6F6F               	movwf	111,b	;volatile
  5412                           
  5413                           ;i2c.c: 18:   RD6PPS=0x1B;
  5414   0021F8  0E1B               	movlw	27
  5415   0021FA  6F70               	movwf	112,b	;volatile
  5416   0021FC                     
  5417                           ; BSR set to: 14
  5418   0021FC  0012               	return		;funcret
  5419   0021FE                     __end_of_I2C_2_Master_Init:
  5420                           	callstack 0
  5421                           
  5422 ;; *************** function _Timer0_init *****************
  5423 ;; Defined at:
  5424 ;;		line 7 in file "timers.c"
  5425 ;; Parameters:    Size  Location     Type
  5426 ;;		None
  5427 ;; Auto vars:     Size  Location     Type
  5428 ;;		None
  5429 ;; Return value:  Size  Location     Type
  5430 ;;                  1    wreg      void 
  5431 ;; Registers used:
  5432 ;;		wreg, status,2
  5433 ;; Tracked objects:
  5434 ;;		On entry : 0/0
  5435 ;;		On exit  : 0/0
  5436 ;;		Unchanged: 0/0
  5437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5442 ;;Total ram usage:        0 bytes
  5443 ;; Hardware stack levels used: 1
  5444 ;; Hardware stack levels required when called: 2
  5445 ;; This function calls:
  5446 ;;		Nothing
  5447 ;; This function is called by:
  5448 ;;		_main
  5449 ;; This function uses a non-reentrant model
  5450 ;;
  5451                           
  5452                           	psect	text41
  5453   00226C                     __ptext41:
  5454                           	callstack 0
  5455   00226C                     _Timer0_init:
  5456                           	callstack 28
  5457   00226C                     
  5458                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  5459   00226C  50D6               	movf	214,w,c	;volatile
  5460   00226E  0B1F               	andlw	-225
  5461   002270  0940               	iorlw	64
  5462   002272  6ED6               	movwf	214,c	;volatile
  5463   002274                     
  5464                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  5465   002274  88D6               	bsf	214,4,c	;volatile
  5466                           
  5467                           ;timers.c: 11:     T0CON1bits.T0CKPS=0b1111;
  5468   002276  0E0F               	movlw	15
  5469   002278  12D6               	iorwf	214,f,c	;volatile
  5470                           
  5471                           ;timers.c: 12:     T0CON0bits.T0OUTPS=0b000;
  5472   00227A  0EF0               	movlw	-16
  5473   00227C  16D5               	andwf	213,f,c	;volatile
  5474   00227E                     
  5475                           ;timers.c: 14:     T0CON0bits.T016BIT=1;
  5476   00227E  88D5               	bsf	213,4,c	;volatile
  5477                           
  5478                           ;timers.c: 17:     TMR0H=0b00001011;
  5479   002280  0E0B               	movlw	11
  5480   002282  6ED4               	movwf	212,c	;volatile
  5481                           
  5482                           ;timers.c: 18:     TMR0L=0b11011011;
  5483   002284  0EDB               	movlw	219
  5484   002286  6ED3               	movwf	211,c	;volatile
  5485   002288                     
  5486                           ;timers.c: 20:     T0CON0bits.T0EN=1;
  5487   002288  8ED5               	bsf	213,7,c	;volatile
  5488   00228A  0012               	return		;funcret
  5489   00228C                     __end_of_Timer0_init:
  5490                           	callstack 0
  5491                           
  5492 ;; *************** function _Interrupts_init *****************
  5493 ;; Defined at:
  5494 ;;		line 7 in file "interrupts.c"
  5495 ;; Parameters:    Size  Location     Type
  5496 ;;		None
  5497 ;; Auto vars:     Size  Location     Type
  5498 ;;		None
  5499 ;; Return value:  Size  Location     Type
  5500 ;;                  1    wreg      void 
  5501 ;; Registers used:
  5502 ;;		None
  5503 ;; Tracked objects:
  5504 ;;		On entry : 0/0
  5505 ;;		On exit  : 0/0
  5506 ;;		Unchanged: 0/0
  5507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5512 ;;Total ram usage:        0 bytes
  5513 ;; Hardware stack levels used: 1
  5514 ;; Hardware stack levels required when called: 2
  5515 ;; This function calls:
  5516 ;;		Nothing
  5517 ;; This function is called by:
  5518 ;;		_main
  5519 ;; This function uses a non-reentrant model
  5520 ;;
  5521                           
  5522                           	psect	text42
  5523   002304                     __ptext42:
  5524                           	callstack 0
  5525   002304                     _Interrupts_init:
  5526                           	callstack 28
  5527   002304                     
  5528                           ;interrupts.c: 9:     INTCONbits.PEIE=1;
  5529   002304  8CF2               	bsf	242,6,c	;volatile
  5530                           
  5531                           ;interrupts.c: 10:     PIE2bits.C1IE=1;
  5532   002306  010E               	movlb	14	; () banked
  5533   002308  812B               	bsf	43,0,b	;volatile
  5534                           
  5535                           ;interrupts.c: 14:     PIE0bits.IOCIE=1;
  5536   00230A  8929               	bsf	41,4,b	;volatile
  5537                           
  5538                           ;interrupts.c: 15:     INTCONbits.GIE=1;
  5539   00230C  8EF2               	bsf	242,7,c	;volatile
  5540   00230E                     
  5541                           ; BSR set to: 14
  5542   00230E  0012               	return		;funcret
  5543   002310                     __end_of_Interrupts_init:
  5544                           	callstack 0
  5545                           
  5546 ;; *************** function _HighISR *****************
  5547 ;; Defined at:
  5548 ;;		line 23 in file "interrupts.c"
  5549 ;; Parameters:    Size  Location     Type
  5550 ;;		None
  5551 ;; Auto vars:     Size  Location     Type
  5552 ;;		None
  5553 ;; Return value:  Size  Location     Type
  5554 ;;                  1    wreg      void 
  5555 ;; Registers used:
  5556 ;;		wreg, cstack
  5557 ;; Tracked objects:
  5558 ;;		On entry : 0/0
  5559 ;;		On exit  : 0/0
  5560 ;;		Unchanged: 0/0
  5561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5565 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5566 ;;Total ram usage:        0 bytes
  5567 ;; Hardware stack levels used: 1
  5568 ;; Hardware stack levels required when called: 1
  5569 ;; This function calls:
  5570 ;;		i2_sendCharSerial4
  5571 ;; This function is called by:
  5572 ;;		Interrupt level 2
  5573 ;; This function uses a non-reentrant model
  5574 ;;
  5575                           
  5576                           	psect	intcode
  5577   000008                     __pintcode:
  5578                           	callstack 0
  5579   000008                     _HighISR:
  5580                           	callstack 24
  5581                           
  5582                           ; BSR set to: 14
  5583                           ;incstack = 0
  5584   000008  824C               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  5585   00000A                     
  5586                           ;interrupts.c: 48:     if (PORTBbits.RB0){
  5587   00000A  A08A               	btfss	138,0,c	;volatile
  5588   00000C  EF0A  F000         	goto	i2u173_41
  5589   000010  EF0C  F000         	goto	i2u173_40
  5590   000014                     i2u173_41:
  5591   000014  EF10  F000         	goto	i2l408
  5592   000018                     i2u173_40:
  5593   000018                     
  5594                           ;interrupts.c: 49:         LATHbits.LATH3 = 0;
  5595   000018  9680               	bcf	128,3,c	;volatile
  5596   00001A                     
  5597                           ;interrupts.c: 50:         sendCharSerial4('a');
  5598   00001A  0E61               	movlw	97
  5599   00001C  EC70  F011         	call	i2_sendCharSerial4
  5600   000020                     i2l408:
  5601   000020  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  5602   000022  0011               	retfie		f
  5603   000024                     __end_of_HighISR:
  5604                           	callstack 0
  5605                           
  5606 ;; *************** function i2_sendCharSerial4 *****************
  5607 ;; Defined at:
  5608 ;;		line 31 in file "serial.c"
  5609 ;; Parameters:    Size  Location     Type
  5610 ;;  charToSend      1    wreg     unsigned char 
  5611 ;; Auto vars:     Size  Location     Type
  5612 ;;  charToSend      1    0[COMRAM] unsigned char 
  5613 ;; Return value:  Size  Location     Type
  5614 ;;                  1    wreg      void 
  5615 ;; Registers used:
  5616 ;;		wreg
  5617 ;; Tracked objects:
  5618 ;;		On entry : 0/0
  5619 ;;		On exit  : 0/0
  5620 ;;		Unchanged: 0/0
  5621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5623 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5625 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5626 ;;Total ram usage:        1 bytes
  5627 ;; Hardware stack levels used: 1
  5628 ;; This function calls:
  5629 ;;		Nothing
  5630 ;; This function is called by:
  5631 ;;		_HighISR
  5632 ;; This function uses a non-reentrant model
  5633 ;;
  5634                           
  5635                           	psect	text44
  5636   0022E0                     __ptext44:
  5637                           	callstack 0
  5638   0022E0                     i2_sendCharSerial4:
  5639                           	callstack 24
  5640                           
  5641                           ;incstack = 0
  5642                           ;i2sendCharSerial4@charToSend stored from wreg
  5643   0022E0  6E01               	movwf	i2sendCharSerial4@charToSend^0,c
  5644   0022E2                     i2l454:
  5645   0022E2  010E               	movlb	14	; () banked
  5646   0022E4  A537               	btfss	55,2,b	;volatile
  5647   0022E6  EF77  F011         	goto	i2u170_41
  5648   0022EA  EF79  F011         	goto	i2u170_40
  5649   0022EE                     i2u170_41:
  5650   0022EE  EF71  F011         	goto	i2l454
  5651   0022F2                     i2u170_40:
  5652   0022F2                     
  5653                           ; BSR set to: 14
  5654                           ;serial.c: 33:     TX4REG = charToSend;
  5655   0022F2  C001  FEE4         	movff	i2sendCharSerial4@charToSend,3812	;volatile
  5656   0022F6                     
  5657                           ; BSR set to: 14
  5658   0022F6  0012               	return		;funcret
  5659   0022F8                     __end_ofi2_sendCharSerial4:
  5660                           	callstack 0
  5661                           
  5662                           	psect	rparam
  5663   000000                     
  5664                           	psect	temp
  5665   00004C                     btemp:
  5666                           	callstack 0
  5667   00004C                     	ds	1
  5668   000000                     int$flags	set	btemp
  5669   000000                     wtemp8	set	btemp+1
  5670   000000                     ttemp5	set	btemp+1
  5671   000000                     ttemp6	set	btemp+4
  5672   000000                     ttemp7	set	btemp+8
  5673                           
  5674                           	psect	config
  5675                           
  5676                           ;Config register CONFIG1L @ 0x300000
  5677                           ;	External Oscillator mode Selection bits
  5678                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  5679                           ;	Power-up default value for COSC bits
  5680                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  5681   300000                     	org	3145728
  5682   300000  AA                 	db	170
  5683                           
  5684                           ;Config register CONFIG1H @ 0x300001
  5685                           ;	unspecified, using default values
  5686                           ;	Clock Out Enable bit
  5687                           ;	CLKOUTEN = 0x1, unprogrammed default
  5688                           ;	Clock Switch Enable bit
  5689                           ;	CSWEN = 0x1, unprogrammed default
  5690                           ;	Fail-Safe Clock Monitor Enable bit
  5691                           ;	FCMEN = 0x1, unprogrammed default
  5692   300001                     	org	3145729
  5693   300001  FF                 	db	255
  5694                           
  5695                           ;Config register CONFIG3L @ 0x300004
  5696                           ;	WDT Period Select bits
  5697                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  5698                           ;	WDT operating mode
  5699                           ;	WDTE = OFF, WDT Disabled
  5700   300004                     	org	3145732
  5701   300004  9F                 	db	159
  5702                           
  5703                           ;Config register CONFIG3H @ 0x300005
  5704                           ;	unspecified, using default values
  5705                           ;	WDT Window Select bits
  5706                           ;	WDTCWS = 0x7, unprogrammed default
  5707                           ;	WDT input clock selector
  5708                           ;	WDTCCS = 0x7, unprogrammed default
  5709   300005                     	org	3145733
  5710   300005  FF                 	db	255
  5711                           tosu	equ	0xFFF
  5712                           tosh	equ	0xFFE
  5713                           tosl	equ	0xFFD
  5714                           stkptr	equ	0xFFC
  5715                           pclatu	equ	0xFFB
  5716                           pclath	equ	0xFFA
  5717                           pcl	equ	0xFF9
  5718                           tblptru	equ	0xFF8
  5719                           tblptrh	equ	0xFF7
  5720                           tblptrl	equ	0xFF6
  5721                           tablat	equ	0xFF5
  5722                           prodh	equ	0xFF4
  5723                           prodl	equ	0xFF3
  5724                           indf0	equ	0xFEF
  5725                           postinc0	equ	0xFEE
  5726                           postdec0	equ	0xFED
  5727                           preinc0	equ	0xFEC
  5728                           plusw0	equ	0xFEB
  5729                           fsr0h	equ	0xFEA
  5730                           fsr0l	equ	0xFE9
  5731                           wreg	equ	0xFE8
  5732                           indf1	equ	0xFE7
  5733                           postinc1	equ	0xFE6
  5734                           postdec1	equ	0xFE5
  5735                           preinc1	equ	0xFE4
  5736                           plusw1	equ	0xFE3
  5737                           fsr1h	equ	0xFE2
  5738                           fsr1l	equ	0xFE1
  5739                           bsr	equ	0xFE0
  5740                           indf2	equ	0xFDF
  5741                           postinc2	equ	0xFDE
  5742                           postdec2	equ	0xFDD
  5743                           preinc2	equ	0xFDC
  5744                           plusw2	equ	0xFDB
  5745                           fsr2h	equ	0xFDA
  5746                           fsr2l	equ	0xFD9
  5747                           status	equ	0xFD8

Data Sizes:
    Strings     53
    Constant    0
    Data        0
    BSS         121
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     46      75
    BANK0           160      0      92
    BANK1           256    207     207
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    color_read@p	PTR struct RGBC_val size(2) Largest target is 8
		 -> main@RGBC(BANK1[8]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    fullSpeedAhead@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    fullSpeedAhead@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    fullSpeedAhead@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    fullSpeedAhead@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    main@pblue_val	PTR unsigned char  size(2) Largest target is 20
		 -> main@blue_val(BANK1[20]), 

    main@pclear_val	PTR unsigned char  size(2) Largest target is 20
		 -> main@clear_val(BANK1[20]), 

    main@pgreen_val	PTR unsigned char  size(2) Largest target is 20
		 -> main@green_val(BANK1[20]), 

    main@pmL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    main@pmL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    main@pmL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    main@pmR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    main@pmR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    main@pmR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    main@pred_val	PTR unsigned char  size(2) Largest target is 20
		 -> main@red_val(BANK1[20]), 

    main@pRGBC	PTR struct RGBC_val size(2) Largest target is 8
		 -> main@RGBC(BANK1[8]), 

    motorL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    motorL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    motorR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    motorR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    reverse_after_read@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    reverse_after_read@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    reverse_after_read@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    reverse_after_read@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverse_after_read@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    reverse_after_read@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    reverse_one_square@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    reverse_one_square@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    reverse_one_square@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    reverse_one_square@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reverse_one_square@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    reverse_one_square@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    S1053DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    S1053DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    S2539$buffer	PTR unsigned char  size(2) Largest target is 0

    S2539$source	PTR const unsigned char  size(2) Largest target is 0

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 20
		 -> main@blue_val(BANK1[20]), main@clear_val(BANK1[20]), main@green_val(BANK1[20]), main@red_val(BANK1[20]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), main@motorR(BANK1[9]), 

    setMotorPWM@m$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    setMotorPWM@m$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[12]), STR_2(CODE[14]), STR_3(CODE[13]), STR_4(CODE[14]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 20
		 -> main@blue_val(BANK1[20]), main@clear_val(BANK1[20]), main@green_val(BANK1[20]), main@red_val(BANK1[20]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    stop@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    stop@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    turn_left_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turn_left_135@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    turn_left_135@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    turn_left_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turn_left_135@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    turn_left_135@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    turn_left_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turn_left_90@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    turn_left_90@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    turn_left_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turn_left_90@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    turn_left_90@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    turn_right_135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turn_right_135@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    turn_right_135@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    turn_right_135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turn_right_135@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    turn_right_135@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    turn_right_90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turn_right_90@mL$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    turn_right_90@mL$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    turn_right_90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turn_right_90@mR$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR2H(BITBIGSFRhhllll[1]), CCPR4H(BITBIGSFRllhlllll[1]), 

    turn_right_90@mR$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR1H(BITBIGSFRhhllll[1]), CCPR3H(BITBIGSFRllhlllll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[12]), STR_2(CODE[14]), STR_3(CODE[13]), STR_4(CODE[14]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[12]), STR_2(CODE[14]), STR_3(CODE[13]), STR_4(CODE[14]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[12]), STR_2(CODE[14]), STR_3(CODE[13]), STR_4(CODE[14]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _turn_right_90->_stop
    _turn_right_135->_stop
    _turn_left_90->_stop
    _turn_left_135->_stop
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_abs
    _abs->___awmod
    _sendStringSerial4->_sendCharSerial4
    _reverse_one_square->_stop
    _reverse_after_read->_stop
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_read->_color_read_Blue
    _color_read->_color_read_Clear
    _color_read->_color_read_Green
    _color_read->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    _HighISR->i2_sendCharSerial4

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               217   217      0   58717
                                             44 COMRAM     2     2      0
                                              0 BANK1    207   207      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                        _Timer0_init
                   _color_click_init
              _color_click_toggleLED
                         _color_read
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                  _color_writetoaddr
                     _fullSpeedAhead
                    _get16bitTMR0val
                    _initDCmotorsPWM
                         _initUSART4
                        _resetTimer0
                 _reverse_after_read
                 _reverse_one_square
                  _sendStringSerial4
                            _sprintf
                               _stop
                      _turn_left_135
                       _turn_left_90
                     _turn_right_135
                      _turn_right_90
 ---------------------------------------------------------------------------------
 (1) _turn_right_90                                        6     2      4    7442
                                             24 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _turn_right_135                                       6     2      4    6682
                                             24 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _turn_left_90                                         6     2      4    6834
                                             24 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _turn_left_135                                        6     2      4    6682
                                             24 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             20    15      5    3743
                                             26 COMRAM    18    13      5
                    _color_read_Blue (ARG)
                   _color_read_Clear (ARG)
                   _color_read_Green (ARG)
                     _color_read_Red (ARG)
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     1      3    2936
                                             22 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           11     8      3    2586
                                             11 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     782
                                              1 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     142
                                              7 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     448
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     452
                                              1 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    2     0      2     371
                                              2 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (2) _sendCharSerial4                                      1     1      0      22
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _reverse_one_square                                   6     2      4    6834
                                             24 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _reverse_after_read                                   6     2      4    7746
                                             24 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 4     0      4    3981
                                             20 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _resetTimer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get16bitTMR0val                                      6     4      2      24
                                              1 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       5     1      4    2961
                                             20 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          6     4      2    2285
                                             14 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                              7 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_read                                           2     0      2     692
                                             12 COMRAM     2     0      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (1) _color_read_Red                                       7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_read_Green                                     7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_read_Clear                                     7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_read_Blue                                      7     5      2     113
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      45
                                              2 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _color_click_toggleLED                                1     1      0       0
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     674
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (1) _color_writetoaddr                                    2     1      1     674
                                              3 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      22
                                              2 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              0     0      0      22
                  i2_sendCharSerial4
 ---------------------------------------------------------------------------------
 (7) i2_sendCharSerial4                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
   _Timer0_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _color_click_toggleLED
   _color_read
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Blue
   _color_read_Clear
   _color_read_Green
   _color_read_Red
   _color_writetoaddr
   _fullSpeedAhead
     _setMotorPWM
       ___lwdiv
         ___wmul (ARG)
       ___wmul
   _get16bitTMR0val
   _initDCmotorsPWM
   _initUSART4
   _resetTimer0
   _reverse_after_read
     _setMotorPWM
     _stop
       _setMotorPWM
   _reverse_one_square
     _setMotorPWM
     _stop
   _sendStringSerial4
     _sendCharSerial4
   _sprintf
     _color_read_Blue (ARG)
     _color_read_Clear (ARG)
     _color_read_Green (ARG)
     _color_read_Red (ARG)
     _vfprintf (ARG)
       _vfpfcnvrt
         ___awdiv
         ___awmod
         _abs
           ___awmod (ARG)
         _fputc
           _putch
   _stop
   _turn_left_135
     _setMotorPWM
     _stop
   _turn_left_90
     _setMotorPWM
     _stop
   _turn_right_135
     _setMotorPWM
     _stop
   _turn_right_90
     _setMotorPWM
     _stop

 _HighISR (ROOT)
   i2_sendCharSerial4

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      69        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     CF      CF       7       80.9%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      5C       5       57.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2E      4B       1       79.8%
BITBIGSFRllhllh     37      0       0      49        0.0%
BITBIGSFRllhhl      31      0       0      47        0.0%
BITBIGSFRlllllh     2A      0       0      61        0.0%
BITBIGSFRllllll     26      0       0      67        0.0%
BITBIGSFRllllhh     20      0       0      52        0.0%
BITBIGSFRhhlllh     1B      0       0      38        0.0%
BITBIGSFRhhhhl      1B      0       0      33        0.0%
BITBIGSFRllhhhh     14      0       0      44        0.0%
BITBIGSFRlllllh     14      0       0      54        0.0%
BITBIGSFRhhhl       13      0       0      34        0.0%
BITBIGSFRlllllh     11      0       0      56        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRllllhl      C      0       0      53        0.0%
BITBIGSFRlllllh      B      0       0      65        0.0%
BITBIGSFRlllllh      9      0       0      62        0.0%
BITBIGSFRlllllh      9      0       0      55        0.0%
BITBIGSFRllhlll      8      0       0      50        0.0%
BITBIGSFRllhhhl      6      0       0      46        0.0%
BITBIGSFRllllll      6      0       0      66        0.0%
BITBIGSFRlllllh      6      0       0      60        0.0%
BITBIGSFRlllllh      5      0       0      59        0.0%
BITBIGSFRllhhhh      3      0       0      45        0.0%
BITBIGSFRlllllh      3      0       0      58        0.0%
BITBIGSFRllhlh       2      0       0      48        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllllh      1      0       0      64        0.0%
BITBIGSFRlllllh      1      0       0      63        0.0%
BITBIGSFRlhlh        1      0       0      42        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllllh      1      0       0      57        0.0%
BITBIGSFRlllh        1      0       0      51        0.0%
BITBIGSFRhlhl        1      0       0      40        0.0%
BITBIGSFRhhllll      1      0       0      39        0.0%
BITBIGSFRlhh         1      0       0      41        0.0%
BITBIGSFRlhll        1      0       0      43        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     176      68        0.0%
DATA                 0      0     176       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Mar 13 18:33:35 2024

               _color_read_Red 1F04                _color_read_Blue 1FF4                             l42 226A  
                           l51 1F52                             l60 1EA4                             l45 1F02  
                           l54 1FA2                             l39 208C                             l48 1FF2  
                           l57 2042                             l90 21FE                             l93 2224  
                           l87 21FC                             l96 2336                             l99 2322  
                 ___awdiv@sign 0007            ___wmul@multiplicand 0004               _color_read_Clear 1FA4  
             _color_read_Green 1F54              ??_Interrupts_init 0002                            l102 232C  
                          l105 2302                            l201 1772                            l108 20CE  
                          l222 19A2                            l230 18B8                            l206 17CE  
                          l214 15F6                            l217 1946                            l225 185C  
                          l209 159A                            l402 230E                            l166 141E  
                          l174 1B24                            l182 1DCA                            l190 16E2  
                          l159 1D30                            l169 1AF4                            l185 1686  
                          l193 14AE                            l372 22C6                            l445 22A8  
                          l454 22CA                            l198 150A                            l519 224A  
                          l375 2318                            l463 21A8                            l369 228A  
                          l457 22DE                            l750 1A66                            l763 1C8E  
                          u920 220E                            u921 220A                            u930 2224  
                          u931 2220                            u940 19B6                            u941 19B2  
                          u950 19D0                            u951 19CC                            u960 19F6  
                          u961 19F2                            u970 1A14                            u971 1A10  
                          u980 1A30                            u981 1A2C                            u990 1A56  
                          u991 1A52                            _abs 2146                   ___awmod@sign 0007  
                          wreg 0FE8                    main@actions 0100                           l1010 1E36  
                         l1017 1E3E                           ?_abs 0008                           l2201 1A14  
                         l1241 2144                           l2211 1A40                           l2203 1A1A  
                         l1235 12B2                           l1260 1BDE                           l2301 22FA  
                         l2205 1A30                           l2213 1A46                           l2221 1BE0  
                         l1245 2160                           l2303 22FE                           l2311 231E  
                         l2215 1A56                           l2207 1A38                           l2231 1C0C  
                         l2223 1BE4                           l1271 2338                           l1248 2178  
                         l2401 21E8                           l2305 2324                           l2321 20CA  
                         l2313 2090                           l2217 1A5E                           l2209 1A3A  
                         l2241 1C44                           l2233 1C14                           l2225 1BF2  
                         l2403 21EA                           l2307 2328                           l2323 20CC  
                         l2315 2094                           l2171 2226                           l2331 1324  
                         l2251 1C7E                           l2243 1C5A                           l2235 1C26  
                         l2227 1BFA                           l2405 224E                           l2317 209C  
                         l2309 231A                           l2421 203A                           l2413 1F54  
                         l2261 1DE6                           l2173 2242                           l2341 13DE  
                         l2333 1338                           l2501 1CEA                           l2181 19B6  
                         l2253 1C86                           l2245 1C62                           l2237 1C2E  
                         l2229 1BFE                           l1197 210A                           l2167 21FE  
                         l2319 20A4                           l2415 1F9A                           l2407 1F04  
                         l2271 1E20                           l2263 1DEE                           l2335 133C  
                         l2327 12B4                           l2511 1D0C                           l2503 1CF4  
                         l2431 1D32                           l2191 19DC                           l2183 19BE  
                         l2247 1C68                           l2239 1C36                           l2351 1142  
                         l2343 110C                           l2169 220E                           l2425 1FA4  
                         l2409 1F4A                           l2273 1E28                           l2265 1DF6  
                         l2257 1DCC                           l2337 137E                           l2329 12D0  
                         l2521 1D28                           l2513 1D20                           l2505 1CF6  
                         l2441 1D7A                           l2433 1D36                           l2193 19E4  
                         l2185 19C2                           l2177 19A4                           l2249 1C6E  
                         l2281 1B36                           l2361 119E                           l2353 114C  
                         l2345 112A                           l2601 174A                           l2419 1FF4  
                         l2427 1FEA                           l2275 1E2A                           l2267 1E04  
                         l2259 1DD4                           l2339 139A                           l2531 1A88  
                         l2523 1D2A                           l2515 1D22                           l2507 1D00  
                         l2443 1D86                           l2435 1D4E                           l2451 22CA  
                         l2195 19F6                           l2187 19D0                           l2179 19A8  
                         l2283 1B46                           l2371 1224                           l2363 11B6  
                         l2355 1164                           l2347 1132                           l2611 17BA  
                         l2603 1756                           l2277 1E30                           l2269 1E0A  
                         l2541 1AD8                           l2533 1AA0                           l2525 1D2C  
                         l2517 1D24                           l2509 1D02                           l2701 2310  
                         l2445 1D92                           l2437 1D58                           l2453 22DA  
                         l2197 19FE                           l2189 19D8                           l2293 2146  
                         l2285 1B50                           l2373 1234                           l2381 1272  
                         l2365 11E6                           l2357 117C                           l2349 113E  
                         l2461 213C                           l2605 1762                           l2621 1568  
                         l2613 150C                           l2471 2062                           l2543 1AE4  
                         l2535 1AAA                           l2703 22AA                           l2527 1D2E  
                         l2519 1D26                           l2439 1D70                           l2447 1D9A  
                         l2199 1A06                           l2295 2154                           l2287 1B6C  
                         l2279 1B26                           l2375 1244                           l2367 1202  
                         l2359 1194                           l2383 1288                           l2455 210C  
                         l2711 20D0                           l2607 178A                           l2551 1632  
                         l2631 15CA                           l2623 1572                           l2615 152E  
                         l2393 21D4                           l2297 232E                           l2481 2084  
                         l2473 206C                           l2465 2044                           l2545 1B0C  
                         l2537 1AC2                           l2529 1A68                           l2705 22B0  
                         l2449 1DB2                           l2641 18FC                           l2289 1B9E  
                         l2377 1256                           l2369 1214                           l2457 2114  
                         l2713 20DC                           l2609 17A2                           l2561 1676  
                         l2553 163C                           l2633 15E2                           l2625 157E  
                         l2617 1546                           l2801 0ED8                           l2395 21DE  
                         l2299 2332                           l2483 2086                           l2475 2076  
                         l2467 2048                           l2491 1E40                           l2539 1ACC  
                         l2707 22BE                           l2651 195E                           l2643 1914  
                         l2635 18BA                           l2723 217A                           l2379 1270  
                         l2387 1294                           l2459 2124                           l2715 20E4  
                         l2563 169E                           l2555 1654                           l2547 15F8  
                         l2627 158A                           l2619 1550                           l2571 1442  
                         l2811 0F00                           l2803 0EE0                           l2397 21E4  
                         l2485 2088                           l2477 2080                           l2469 2052  
                         l2493 1C90                           l2653 1976                           l2645 191E  
                         l2637 18DA                           l2661 1808                           l2725 217E  
                         l2717 20EC                           l2565 16B6                           l2557 165E  
                         l2549 161A                           l2629 15B2                           l2581 1492  
                         l2573 145A                           l2821 0F2A                           l2813 0F08  
                         l2805 0EE8                           l2399 21E6                           l2487 208A  
                         l2479 2082                           l2495 1CBA                           l2655 198E  
                         l2647 192A                           l2639 18F2                           l2671 184C  
                         l2663 1812                           l2727 218C                           l2719 20FC  
                         l2591 16E4                           l2567 16CE                           l2559 166A  
                         l2583 149E                           l2575 1464                           l2831 0F74  
                         l2823 0F3E                           l2815 0F0C                           l2807 0EF0  
                         l2751 0E48                           l2743 0E38                           l2681 2274  
                         l2489 1EA6                           l2497 1CDE                           l2649 1936  
                         l2673 1874                           l2665 182A                           l2657 17D0  
                         l2729 2190                           l2593 1706                           l2585 14C6  
                         l2577 147C                           l2569 1420                           l2841 0FCC  
                         l2833 0F88                           l2825 0F44                           l2817 0F14  
                         l2809 0EF8                           l2761 0E60                           l2753 0E54  
                         l2745 0E3C                           l2683 227E                           l2499 1CE8  
                         l2691 2296                           l2675 188C                           l2667 1834  
                         l2659 17F0                           l2595 171E                           l2587 14DE  
                         l2579 1486                           l2851 1020                           l2843 0FD6  
                         l2835 0F8E                           l2827 0F50                           l2819 0F26  
                         l2771 0E70                           l2763 0E62                           l2755 0E58  
                         l2747 0E40                           l2685 2288                           l2693 2298  
                         l2677 18A4                           l2669 1840                           l2597 1728  
                         l2589 14F6                           l2861 108C                           l2853 103C  
                         l2845 0FE0                           l2837 0FA8                           l2829 0F68  
                         l2781 0E90                           l2773 0E74                           l2765 0E66  
                         l2757 0E5C                           l2749 0E44                           l2687 2304  
                         l2679 226C                           l2695 22A2                           l2599 1740  
                         l2871 10EA                           l2863 1098                           l2855 1048  
                         l2847 0FF8                           l2839 0FB4                           l2791 0EB0  
                         l2783 0E94                           l2775 0E7C                           l2767 0E66  
                         l2759 0E5E                           l2697 22A4                           l2689 228C  
                         l2865 10B0                           l2857 1064                           l2849 1014  
                         l2873 10F4                           l2793 0EB8                           l2785 0E98  
                         l2777 0E84                           l2769 0E6C                           l2699 22A6  
                         l2867 10C8                           l2859 1070                           l2795 0EC0  
                         l2787 0EA0                           l2779 0E8C                           l2869 10E0  
                         l2797 0EC8                           l2789 0EA8                           l2799 0ED0  
                         STR_1 0E2A                           STR_2 0E01                           STR_3 0E1D  
                         STR_4 0E0F                           u1000 1BF2                           u1001 1BEE  
                         u1010 1C0C                           u1011 1C08                           u1020 1C26  
                         u1100 1B46                           u1021 1C22                           u1101 1B42  
                         u1030 1C44                           u1110 1B6C                           u1031 1C40  
                         u1111 1B68                           u1040 1C5A                           u1120 1B9E  
                         u1200 117C                           u1041 1C56                           u1121 1B9A  
                         u1201 1178                           u1050 1C7E                           u1130 2154  
                         u1210 11B2                           u1051 1C7A                           u1131 2150  
                         u1211 11AC                           u1140 20B8                           u1060 1DE6  
                         u1300 1DB2                           u1220 11B4                           u1141 20B0  
                         u1061 1DE2                           u1301 1DAE                           u1070 1E04  
                         u1310 1DCA                           u1230 1214                           u1071 1E00  
                         u1311 1DC6                           u1231 1210                           u1080 1E20  
                         u1160 12D0                           u1400 1AA0                           u1320 22DA  
                         u1240 1224                           u1081 1E1C                           u1161 12CC  
                         u1401 1A9C                           u1321 22D6                           u1241 1220  
                         u1170 139A                           u1410 1AC2                           u1090 1B36  
                         u1250 1234                           u1330 213C                           u1171 1396  
                         u1411 1ABE                           u1091 1B32                           u1251 1230  
                         u1331 2138                           u1340 1E52                           u1420 1B0C  
                         u1260 1244                           u1180 112A                           u1500 14C6  
                         u1341 1E4A                           u1421 1B08                           u1261 1240  
                         u1181 1126                           u1501 14C2                           u1158 20BA  
                         u1430 1B24                           u1270 1284                           u1190 1164  
                         u1510 14DE                           u1431 1B20                           u1271 1280  
                         u1191 1160                           u1511 14DA                           u1360 1E70  
                         u1280 1D4E                           u1600 18F2                           u1520 171E  
                         u1440 1632                   _BAUD4CONbits 0EE9                           u1361 1E68  
                         u1281 1D4A                           u1601 18EE                           u1521 171A  
                         u1441 162E                           u1290 1D70                           u1610 1914  
                         u1530 1740                           u1450 1654                           u1291 1D6C  
                         u1611 1910                           u1531 173C                           u1451 1650  
                         u1380 1E94                           u1620 195E                           u1540 178A  
                         u1460 169E                           u1381 1E8C                           u1621 195A  
                         u1541 1786                           u1461 169A                           u1358 1E54  
                         u1630 1976                           u1550 17A2                           u1470 16B6  
                         u1710 0F26                           u1631 1972                           u1551 179E  
                         u1471 16B2                           u1711 0F22                           u1640 1808  
                         u1560 1546                           u1480 145A                           u1720 0F68  
                         u1641 1804                           u1561 1542                           u1481 1456  
                         u1721 0F64                           u1378 1E72                           u1650 182A  
                         u1570 1568                           u1490 147C                           _T2PR 0FBC  
                         u1651 1826                           u1571 1564                           u1491 1478  
                         u1660 1874                           u1580 15B2                           u1661 1870  
                         u1581 15AE                           u1398 1E96                           u1670 188C  
                         u1590 15CA                           u1671 1888                           u1591 15C6  
                         u1807 10D2                           u1680 21A8                           u1681 21A4  
                         u1817 10FA                           u1907 1852                           u1827 14A4  
                         u1917 1896                           u1837 14E8                           u1927 193C  
                         u1847 1590                           u1767 0FBE                           u1937 1980  
                         u1857 15D4                           u1777 0FEA                           u1947 1D94  
                         u1867 167C                           u1787 10A2                           u1957 1AEA  
                         u1877 16C0                           u1797 10BA                           u1967 2058  
                         u1887 1768                           u1897 17AC                    main@red_val 013C  
                         abs@a 0008                           _dbuf 009C                           _main 0E38  
                         _prec 0045                           fsr1h 0FE2                           fsr2h 0FDA  
                         indf2 0FDF                           fsr1l 0FE1                           fsr2l 0FD9  
                         btemp 004C                           _stop 1D32                    main@timings 0178  
   __end_of_reverse_after_read 19A4                           prodh 0FF4                           prodl 0FF3  
                         start 0024         __end_of_color_read_Red 1F54                __end_of_HighISR 0024  
                  color_read@p 000D                   ___param_bank 0000                 turn_left_90@mL 0019  
               turn_left_90@mR 001B                          ??_abs 000A                   main@blue_val 0164  
                        ?_main 0001                          _ADPCH 0F5F                __end_of___awdiv 1A68  
              __end_of___awmod 1C90                          ?_stop 0015                ___awdiv@divisor 0004  
              __end_of___lwdiv 1E40                          i2l408 0020                          i2l454 22E2  
                        i2l457 22F6                ___awdiv@counter 0006                   vfpfcnvrt@fmt 000D  
                        _TMR0H 0FD4                          _TMR0L 0FD3        __end_of_sendCharSerial4 22E0  
   __end_of_I2C_2_Master_Start 2338     __end_of_I2C_2_Master_Write 2304                          _flags 0047  
__end_of_color_click_toggleLED 1EA6                          _fputc 1B26                   main@pred_val 01A2  
                        _width 0043                          _putch 2338                          tablat 0FF5  
                        ttemp5 004D                          ttemp6 0050                          ttemp7 0054  
                        status 0FD8                          wtemp8 004D                __end_of_sprintf 210C  
      __end_of_color_read_Blue 2044          _I2C_2_Master_RepStart 231A                ?_color_read_Red 0006  
              __initialization 21AA                   __end_of_main 110C                   __end_of_stop 1DCC  
              turn_left_135@mL 0019                turn_left_135@mR 001B                  main@clear_val 0128  
              _get16bitTMR0val 22AA                         ??_main 002D                         ??_stop 0019  
                __activetblptr 0001                   ?_setMotorPWM 000F                         ?_fputc 0002  
                       _ADRESH 0F64                         _CCPR1H 0FAA                         _CCPR2H 0FA6  
                       _CCPR3H 0F25                         _CCPR4H 0F21               ___awdiv@dividend 0002  
                       ?_putch 0001     __end_of_reverse_one_square 18BA                         _RC0PPS 0E62  
                       _RC4REG 0EE3                         _RE2PPS 0E74                         _RD5PPS 0E6F  
                       _RC7PPS 0E69                         _RE4PPS 0E76                         _RD6PPS 0E70  
                       i2l2741 22F2                         i2l2739 22E2                  main@green_val 0150  
                       _RG6PPS 0E88                         i2l2991 001A                         i2l2987 000A  
                       i2l2989 0018               ??_turn_right_135 001D                  vfpfcnvrt@done 0010  
                    ??_HighISR 0002       __end_of_color_click_init 208E                         _RX4PPS 0E15  
                       _TX4REG 0EE4                   ?_resetTimer0 0001                   _turn_left_90 15F8  
                ??_Timer0_init 0002                  main@pblue_val 01A4                   _CCPTMRS0bits 0FAD  
                 vfprintf@cfmt 001A                         ___wmul 2226                      ??___awdiv 0006  
                    ??___awmod 0006                      ??___lwdiv 000C                         clear_0 21B0  
                       clear_1 21BC               ___awdiv@quotient 0008                ___awmod@divisor 0004  
                       isa$std 0001                ___awmod@counter 0006                         fputc@c 0002  
                 __mediumconst 0000                         tblptrh 0FF7                         tblptrl 0FF6  
                       tblptru 0FF8               ?_sendCharSerial4 0001                         putch@c 0001  
             __end_of_vfprintf 2146                         stop@mL 0015                         stop@mR 0017  
            ??_initDCmotorsPWM 0004                      ??_sprintf 0020                     __accesstop 0060  
      __end_of__initialization 21C2       __end_of_color_read_Clear 1FF4       __end_of_color_read_Green 1FA4  
       ?_I2C_2_Master_RepStart 0001                  ___rparam_used 0001               ?_color_read_Blue 0006  
              _Interrupts_init 2304                 __pcstackCOMRAM 0001        __end_of_get16bitTMR0val 22C8  
     get16bitTMR0val@timer_val 0006                  __end_of_fputc 1BE0                  __end_of_putch 233A  
          __end_of_Timer0_init 228C                turn_right_90@mL 0019                turn_right_90@mR 001B  
                      ??_fputc 0005                        ??_putch 0002                     __pbssBANK0 0060  
            _color_writetoaddr 224C           reverse_one_square@mL 0019           reverse_one_square@mR 001B  
                 _T2CLKCONbits 0FBF             ?_color_writetoaddr 0004                        ?___wmul 0002  
           _reverse_after_read 18BA            ??_color_writetoaddr 0005                        _SP4BRGH 0EE6  
                      _SP4BRGL 0EE5            ?_reverse_after_read 0019           reverse_after_read@mL 0019  
         reverse_after_read@mR 001B                        _SSP2ADD 0ED6                        _SSP2BUF 0ED5  
                   _color_read 1EA6        __end_of_Interrupts_init 2310         color_writetoaddr@value 0004  
             ??_color_read_Red 0008                  _turn_left_135 16E4                        _HighISR 0008  
               main@pclear_val 01A0      __end_of_color_writetoaddr 226C                      _ADREFbits 0F58  
           _I2C_2_Master_Start 232E                     _initUSART4 228C             _I2C_2_Master_Write 22F8  
                      __Hparam 0000           ??_reverse_after_read 001D                        __Lparam 0000  
            color_read_Red@tmp 000B                    _Timer0_init 226C        sendStringSerial4@string 0003  
                _turn_right_90 1420               ?_get16bitTMR0val 0002                        ___awdiv 19A4  
                      ___awmod 1BE0            ?_I2C_2_Master_Start 0001                        ___lwdiv 1DCC  
          ?_I2C_2_Master_Write 0001                      ?_vfprintf 0017                   __psmallconst 0E00  
                      __pcinit 21AA                 main@pgreen_val 01A6                        __ramtop 0E00  
                      __ptext0 0E38                        __ptext1 1420                        __ptext2 150C  
                      __ptext3 15F8                        __ptext4 16E4                        __ptext5 20D0  
                      __ptext6 210C                        __ptext7 110C                        __ptext8 1B26  
                      __ptext9 2338                      _T2CONbits 0FBD               ___awmod@dividend 0002  
                    _T2HLTbits 0FBE                  _RxBufWriteCnt 004B                        main@pmL 01CB  
                      main@pmR 01CD                        _sprintf 20D0                        main@lum 01AA  
         ??_I2C_2_Master_Start 0003           ??_I2C_2_Master_Write 0003           end_of_initialization 21C2  
               ?_turn_left_135 0019          _color_click_toggleLED 1E40                        fputc@fp 0004  
            ?_color_click_init 0001             ??_color_click_init 0006                 ?_turn_right_90 0019  
            __end_of_vfpfcnvrt 12B4             _reverse_one_square 17D0                        postdec2 0FDD  
                      postinc0 0FEE                        postinc1 0FE6                        postinc2 0FDE  
             vfpfcnvrt@convarg 0012                     ??_vfprintf 001A                _initDCmotorsPWM 1C90  
                    _PORTBbits 0F8A            ?_reverse_one_square 0019             setMotorPWM@negDuty 0014  
                    _TRISAbits 0F81             setMotorPWM@posDuty 0013                      _TRISCbits 0F83  
                    _TRISDbits 0F84                      _TRISEbits 0F85                      _TRISFbits 0F86  
                    _TRISGbits 0F87                      _TRISHbits 0F88               fullSpeedAhead@mL 0015  
             fullSpeedAhead@mR 0017                    ?_color_read 000D       color_writetoaddr@address 0005  
      ??_I2C_2_Master_RepStart 0003               ?_Interrupts_init 0001           ??_reverse_one_square 001D  
                  _CCP1CONbits 0FAB              ?_color_read_Clear 0006                   _EUSART4RXbuf 002F  
                 _EUSART4TXbuf 0060                    _CCP2CONbits 0FA7              ?_color_read_Green 0006  
                  _CCP3CONbits 0F26                    ?_initUSART4 0001                    _CCP4CONbits 0F22  
    sendCharSerial4@charToSend 0002                     main@motorL 01B9                     main@motorR 01C2  
           ??_color_read_Clear 0008             ??_color_read_Green 0008                 _fullSpeedAhead 1A68  
                  vfpfcnvrt@ap 000E                    vfpfcnvrt@cp 0011                    vfpfcnvrt@fp 000C  
               __end_of___wmul 224C            color_read_Clear@tmp 000B            start_initialization 21AA  
                  __end_of_abs 217A                  _TxBufWriteCnt 0049                ??_turn_left_135 001D  
       ?_color_click_toggleLED 0001                ??_turn_right_90 001D            color_read_Green@tmp 000B  
      __end_of_initDCmotorsPWM 1D32                    vfprintf@fmt 0018         __end_of_fullSpeedAhead 1B26  
             turn_right_135@mL 0019               turn_right_135@mR 001B                       ??___wmul 0006  
                  __pbssCOMRAM 002F                  __pcstackBANK1 0100                       ?_HighISR 0001  
            i2_sendCharSerial4 22E0             ?i2_sendCharSerial4 0001               ___lwdiv@dividend 0008  
                 ?_Timer0_init 0001                ?_fullSpeedAhead 0015                      __pintcode 0008  
                     ?___awdiv 0002                       ?___awmod 0002                       ?___lwdiv 0008  
          ??i2_sendCharSerial4 0001           I2C_2_Master_Read@ack 0004           I2C_2_Master_Read@tmp 0005  
                  __smallconst 0E00              _I2C_2_Master_Idle 21FE              _I2C_2_Master_Init 21D4  
            _I2C_2_Master_Read 208E              _I2C_2_Master_Stop 2324                   _RxBufReadCnt 004A  
           ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001  
                ??_setMotorPWM 0011             ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000C  
     initDCmotorsPWM@PWMperiod 0002                       ?_sprintf 001B      __end_ofi2_sendCharSerial4 22F8  
            _sendStringSerial4 217A            ??_I2C_2_Master_Idle 0002            ??_I2C_2_Master_Init 0002  
          ??_I2C_2_Master_Read 0003                 ___wmul@product 0006                       _LATAbits 0F79  
                ??_resetTimer0 0002            ??_I2C_2_Master_Stop 0003                       _LATCbits 0F7B  
                     _LATEbits 0F7D                       _LATGbits 0F7F                       _LATHbits 0F80  
                ?_turn_left_90 0019                       _PIE0bits 0E29                       _PIE2bits 0E2B  
           ?_sendStringSerial4 0003                       _PIE4bits 0E2D                       i2u170_40 22F2  
                     i2u170_41 22EE                       i2u173_40 0018                       i2u173_41 0014  
                     _PIR4bits 0E37               ?_initDCmotorsPWM 0002              ??_sendCharSerial4 0002  
                     _SSP2CON2 0EDA            ??_sendStringSerial4 0005                       _SSP2STAT 0ED8  
                    _vfpfcnvrt 110C                     _ADCON0bits 0F60      __end_of_I2C_2_Master_Idle 2226  
    __end_of_I2C_2_Master_Init 21FE      __end_of_I2C_2_Master_Read 20D0              ___wmul@multiplier 0002  
    __end_of_I2C_2_Master_Stop 232E                      main@pRGBC 01A8                   setMotorPWM@m 000F  
  I2C_2_Master_Write@data_byte 0003          main@actions_completed 01AE              ??_color_read_Blue 0008  
                 _TxBufReadCnt 0048                     vfpfcnvrt@c 0016                   ??_color_read 000F  
    __end_of_sendStringSerial4 21AA  __end_of_I2C_2_Master_RepStart 2324             color_read_Blue@tmp 000B  
               ??_turn_left_90 001D            __end_of_setMotorPWM 1420                   ??_initUSART4 0002  
                     __Hrparam 0000                     vfprintf@ap 0019                       __Lrparam 0000  
                   vfprintf@fp 0017                   __Lsmallconst 0E00                 _turn_right_135 150C  
          __end_of_resetTimer0 231A                     ?_vfpfcnvrt 000C             __end_of_color_read 1F04  
                   _ANSELAbits 0E92                     _ANSELDbits 0EA7                     _ANSELFbits 0EB4  
                   sprintf@fmt 001D                     _T0CON0bits 0FD5                     _T0CON1bits 0FD6  
      ??_color_click_toggleLED 0002                ___lwdiv@divisor 000A             __end_of_initUSART4 22AA  
              ___lwdiv@counter 000E                       __ptext10 2146                       __ptext11 1BE0  
                     __ptext20 1C90                       __ptext12 19A4                       __ptext21 22AA  
                     __ptext13 217A                       __ptext30 1FF4                       __ptext22 1A68  
                     __ptext14 22C8                       __ptext31 231A                       __ptext23 12B4  
                     __ptext15 17D0                       __ptext40 21D4                       __ptext32 208E  
                     __ptext24 2226                       __ptext16 18BA                       __ptext41 226C  
                     __ptext33 1E40                       __ptext25 1DCC                       __ptext17 1D32  
                     __ptext42 2304                       __ptext34 2044                       __ptext26 1EA6  
                     __ptext18 2310                       __ptext35 224C                       __ptext27 1F04  
                     __ptext19 228C                       __ptext44 22E0                       __ptext36 22F8  
                     __ptext28 1F54                       __ptext37 2324                       __ptext29 1FA4  
                     __ptext38 232E                       __ptext39 21FE                   _SSP2CON1bits 0ED9  
                 _SSP2CON2bits 0EDA         __end_of_turn_right_135 15F8                       isa$xinst 0000  
                   _RC4STAbits 0EE7                       main@RGBC 01B1                       int$flags 004C  
                     _vfprintf 210C                     _INTCONbits 0FF2              main@going_forward 01B0  
                  _setMotorPWM 12B4              ??_get16bitTMR0val 0004                       intlevel2 0000  
        __end_of_turn_left_135 17D0                      sprintf@ap 0020               ??_fullSpeedAhead 0019  
                  _resetTimer0 2310                ?_turn_right_135 0019          __end_of_turn_right_90 150C  
                  ??_vfpfcnvrt 000F               _color_click_init 2044                       sprintf@f 0021  
                     sprintf@s 001B           __end_of_turn_left_90 16E4                     _SSP2DATPPS 0E1D  
                   _SSP2CLKPPS 0E1C              main@measured_time 01AC                     _TX4STAbits 0EE8  
              _sendCharSerial4 22C8    i2sendCharSerial4@charToSend 0001  
